{
    "posts": [{
            "audioUrls": {
                "male": "https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl7od6tgg08nlgznvffjp878l-male"
            },
            "reward": {
                "type": "xlm"
            },
            "backups": {
                "github": {
                    "owner": "Abbhiishek",
                    "repository": "Blogs"
                }
            },
            "sourcedFromGithub": false,
            "githubAsSourceMeta": null,
            "isAnonymous": false,
            "views": 20,
            "slugOverridden": false,
            "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1662358260235/uHIvOZFG-.png",
            "autoGeneratedCover": "",
            "brief": "Is Python an object-oriented programming language?\nYes, Python is an objected oriented programming language. Everything in python is an object. Using python we can create classes and objects,for example, that functions are first-class objects. Functi...",
            "content": "<h2 id=\"heading-is-python-an-object-oriented-programming-language\">Is Python an object-oriented programming language?</h2>\n<p>Yes, Python is an objected oriented programming language. Everything in python is an object. Using python we can create classes and objects,for example, that functions are first-class objects. Functions, classes, strings, and even types are objects in Python: like any object, they have a type, they can be passed as function arguments, and they may have methods and properties. Therefore, <strong>Python is object oriented programming language.</strong></p>\n<h2 id=\"heading-main-concepts-of-object-oriented-programming\">Main Concepts of Object-Oriented Programming</h2>\n<p>Object-oriented programming is a method of structuring a program by bundling related properties and behavior into individual objects. These objects are related to entities. Object-oriented programming language helps us in writing reusable code. It is a popular and widely used method of solving problems by creating objects.</p>\n<p>For example let's take human as a class.The height , weight , colour are all the attributes of a object. The biological Processes like Breathing , Walking , Eating all are considered as Methods with data and logic.</p>\n<p>Object-oriented Programming (OOP) is a computer programming model that helps one organize their software design around data, class, and object rather than functions and logic.</p>\n<p>Let us think of a Clothing factory where each step of the line processes some material and transform it into a finished product.</p>\n<p>Classes and objects are the two main building blocks of object-oriented programming. A class creates a new type of object where objects are instances of the class.</p>\n<h2 id=\"heading-class\">Class</h2>\n<p>Class is the blueprint used to create a user-defined data structure. It holds the common attribute and behaviors of the object. For example, the class “Cloth” will hold objects “Shirt”, “Pant” and “Tshirt”.</p>\n<p>For example, let us say that we want to store information on clothes, the general approach would be to store all the information on a list.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># name = [\"category\" , size , \"company\" , price]</span>\nshirt = [ <span class=\"hljs-string\">\"Shirt\"</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-string\">\"xyz-company\"</span>, <span class=\"hljs-number\">2000</span> ]\npant = [ <span class=\"hljs-string\">\"Pant\"</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-string\">\"xyz-company\"</span>, <span class=\"hljs-number\">1500</span> ]\ntshirt = [ <span class=\"hljs-string\">\"Tshirt\"</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">1200</span> ]\n</code></pre>\n<p>There are several issues with this approach.</p>\n<p>First, it can make larger code files more difficult to manage. If you reference pant[0] several lines away from where the pant list is declared.\nThere may be a case when we forget the index for the required value.</p>\n<p>Second, it can introduce errors if not every cloth has the same number of elements in the list. In the third list above, the company is missing, so the tshirt[2] will return 1200 instead of the t-shirt's company name.</p>\n<p>A great way to make this type of code more manageable and more maintainable is to use classes.</p>\n<p>All class definitions start with the class keyword, which is followed by the name of the class and a colon. Any code that is indented below the class definition is considered part of the class’s body.</p>\n<p>Here's an example of a Cloth Class :</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\">#we define a class using the keyword class &lt;name_of_class&gt;:</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cloth</span>:</span> \n    <span class=\"hljs-keyword\">pass</span>\n</code></pre>\n<blockquote>\n<p>Note: Python class names are written in CapitalizedWords notation by convention. For example, a class for a specific brand of cloth like the John Players would be written as JohnPlayers.</p>\n</blockquote>\n<p>Currently, our class doesn't do much. We need to manage the properties like size, price, name, and company name. We define those properties using a method called  <strong>.<strong>init</strong>()</strong>. Every time a new cloth object is created <strong>.<strong>init</strong>()</strong> sets the initial state of the object by assigning the values of the object's properties.</p>\n<p>You can give .<strong>init</strong>() any number of parameters, but the first parameter will always be a variable called self. When a new class instance is created, the instance is automatically passed to the self parameter in .<strong>init</strong>() so that new attributes can be defined on the object.</p>\n<p>Let's update the cloth class with <strong>.<strong>init</strong>()</strong> method that create .name , .size , .price , .company_name attributes:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cloth</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\"> self, name, size , price , company_name </span>):</span>\n        self.name = name\n        self.size = size\n        self.price = price\n        self.company = company_name\n</code></pre>\n<p>Using such a Class creating and managing data seems quite easy</p>\n<p><code>shirt = Cloth(\"shirt\", 25 , 1200 , \"xyz\")</code>\nBy using such a syntax we can retrieve each value as follows :</p>\n<pre><code class=\"lang-python\">shirt.name <span class=\"hljs-comment\"># returns the name </span>\nshirt.size <span class=\"hljs-comment\"># returns the size</span>\nshirt.price <span class=\"hljs-comment\"># returns the price</span>\nshirt.company <span class=\"hljs-comment\"># returns the company name</span>\n</code></pre>\n<h2 id=\"heading-object\">Object</h2>\n<p>An object is an instance of a class. It has both a property (variables) and behavior (methods). The python object “Cloth” will have properties; “buy”, “about”, “sell” and behaviors; “discount”, and “show”.</p>\n<p>Everything in Python is an object, and almost everything has attributes and methods. All functions have a built-in attribute <strong>doc</strong>, which returns the docstring defined in the function source code.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Defining a class named Cloth</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cloth</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\"> self, name, size , price , company_name </span>):</span>\n        self.name = name\n        self.size = size\n        self.price = price\n        self.company = company_name  \n\nshirt = Cloth( <span class=\"hljs-string\">\"shirt\"</span>, <span class=\"hljs-number\">25</span> , <span class=\"hljs-number\">1200</span> , <span class=\"hljs-string\">\"xyz\"</span> ) <span class=\"hljs-comment\"># creating object shirt</span>\n</code></pre>\n<h2 id=\"heading-method\">Method</h2>\n<p>Methods are the functions that are defined inside a class and can only be called from an instance of that class. A method includes the operation and functionality of the object. These methods are defined inside a class. These methods are the reusable piece of code that can be invoked/called at any point in the program.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Defining a class named Cloth</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cloth</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\"> self, name, size , price , company_name </span>):</span>\n        self.name = name\n        self.size = size\n        self.price = price\n        self.company = company_name\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\"> self </span>):</span>  <span class=\"hljs-comment\"># Method </span>\n        print( self.name, self.size, self.price, self.company )  \n\nshirt = Cloth( <span class=\"hljs-string\">\"shirt\"</span>, <span class=\"hljs-number\">25</span> , <span class=\"hljs-number\">1200</span> , <span class=\"hljs-string\">\"xyz\"</span> ) <span class=\"hljs-comment\"># Creating object shirt</span>\nshirt.show() <span class=\"hljs-comment\"># using a method over a object.</span>\n</code></pre>\n<p>Here the show is a method or functionality to print all the data being passed at the time of object creation. </p>\n<h2 id=\"heading-inheritance\">Inheritance</h2>\n<p>Inheritance is the process by which one class takes on the attributes and methods of another. Newly formed classes are called child classes, and the classes that child classes are derived from are called parent classes.</p>\n<p>It specifies that the child object acquires all the properties and behaviours of the parent object.</p>\n<p>Inheritance has many advantages some of them are :</p>\n<ul>\n<li>It provides the reusability of the code.</li>\n<li>It provides Transition and Readability.</li>\n<li>Real World Relationship.</li>\n</ul>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Parent</span>:</span> <span class=\"hljs-comment\"># Parent class</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parent_func</span>(<span class=\"hljs-params\"> self </span>):</span> <span class=\"hljs-comment\"># simple function</span>\n        print( <span class=\"hljs-string\">'This is a Parent Class'</span> )\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\"> Parent </span>):</span> <span class=\"hljs-comment\"># child class with Parent class as attribute</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">child_func</span>(<span class=\"hljs-params\"> self </span>):</span> <span class=\"hljs-comment\"># simple function</span>\n        print(<span class=\"hljs-string\">'This is Child class'</span>)\n\n\nob = Child()\nob.child_func()\nob.parent_func()\n</code></pre>\n<p>Here we can notice that despite creating an Object of child class we have access to the method from a different class. Since we know that methods are restricted to their instance, here we have access to them. This is due to inheritance as the Child class has the attribute of the Parent class.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Parent</span>:</span> <span class=\"hljs-comment\"># Parent class</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\"> self,name,wish </span>):</span> <span class=\"hljs-comment\"># init func</span>\n        self.name = name\n        self.wish = wish\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parent_func</span>(<span class=\"hljs-params\">self</span>):</span> <span class=\"hljs-comment\"># simple function</span>\n        print(<span class=\"hljs-string\">'This is a Parent Class'</span>)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\"> self </span>):</span>\n        print( self.name , self.wish )\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\"> Parent </span>):</span> <span class=\"hljs-comment\"># child class with Parent class as attribute</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\"> self,name,wish,age </span>):</span><span class=\"hljs-comment\"># init function</span>\n        Parent.__init__( self,name,wish ) <span class=\"hljs-comment\"># using Parent init method for name and wish </span>\n        self.age = age\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">child_func</span>(<span class=\"hljs-params\"> self </span>):</span> <span class=\"hljs-comment\"># simple function</span>\n        print( <span class=\"hljs-string\">'This is Child class'</span> )\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\"> self </span>):</span>\n        print( self.name , self.wish , self.age )\n\n\nob = Child( <span class=\"hljs-string\">\"abhishek\"</span> , <span class=\"hljs-string\">\"Happy Reading\"</span> , <span class=\"hljs-number\">20</span> ) <span class=\"hljs-comment\"># passing all the three arguments.</span>\nob.show() <span class=\"hljs-comment\"># calling the method</span>\n</code></pre>\n<p>Inheritance also overrides the <strong>init</strong> method. To avoid that we need to declare the Parent init function under the child <strong>init</strong> Method.</p>\n<p><code>Parent.__init__(self,name,wish)</code></p>\n<p>This is how we can override the Parent init function in the child function.</p>\n<h2 id=\"heading-polymorphism\">Polymorphism</h2>\n<p>Polymorphism contains two words \"poly\" and \"morphs\". Poly means many, and morph means shape. By polymorphism, we understand that one task can be performed in different ways. It's the ability to use a common interface for multiple forms or data.</p>\n<p>Now in this example, we have created two classes “Cat” and “Dog”. They’re different animals and make different sounds. So, the make_sound() function should produce two different outputs based on the objects we pass through them. In this case, we have created two objects “cat1” and “dog1”.</p>\n<p>[IMAGE {04} show that class Cat and Dog have the same method make_sound and method overload ]</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cat</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\"> self, name, age </span>):</span>\n        self.name = name\n        self.age = age\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">info</span>(<span class=\"hljs-params\">self</span>):</span>\n        print(<span class=\"hljs-string\">f\"I am a cat. My name is <span class=\"hljs-subst\">{self.name}</span>. I am <span class=\"hljs-subst\">{self.age}</span> years old.\"</span>)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">make_sound</span>(<span class=\"hljs-params\"> self </span>):</span>\n        print(<span class=\"hljs-string\">\"Meow\"</span>)\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\"> self, name, age </span>):</span>\n        self.name = name\n        self.age = age\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">info</span>(<span class=\"hljs-params\">self</span>):</span>\n        print( <span class=\"hljs-string\">f\"I am a Dog. My name is <span class=\"hljs-subst\">{self.name}</span>. I am <span class=\"hljs-subst\">{self.age}</span> years old.\"</span> )\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">make_sound</span>(<span class=\"hljs-params\"> self </span>):</span>\n        print( <span class=\"hljs-string\">\"Bark\"</span> )\ncat1 = Cat( <span class=\"hljs-string\">\"Kitty\"</span>, <span class=\"hljs-number\">2.5</span> )\ndog1 = Dog( <span class=\"hljs-string\">\"Fluffy\"</span>, <span class=\"hljs-number\">4</span> )\n\n<span class=\"hljs-keyword\">for</span> animal <span class=\"hljs-keyword\">in</span> ( cat1, cow1 ):\n    animal.make_sound()\n    animal.info()\n    animal.make_sound()\n</code></pre>\n<p>The make-sound() function is producing two different outputs- “Meow” and “Bark”.</p>\n<p>This concept in Object Oriented Programming is called Polymorphism. We can also consider this as Method Overloading.</p>\n<p>Let's Create two classes and have some similar properties associated with them:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Phone</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">send_msg</span>(<span class=\"hljs-params\"> self, x </span>):</span> <span class=\"hljs-comment\"># send msg function</span>\n        print(<span class=\"hljs-string\">f\"Sending <span class=\"hljs-subst\">{x}</span> as message ...\"</span>)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">switch_off</span>(<span class=\"hljs-params\"> self </span>):</span> <span class=\"hljs-comment\"># switch off function</span>\n        print(<span class=\"hljs-string\">\"Turning it off\"</span>)\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Watch</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">send_msg</span>(<span class=\"hljs-params\"> self,x </span>):</span> <span class=\"hljs-comment\"># send msg function</span>\n        print(<span class=\"hljs-string\">\"Cannot send the message\"</span>)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">switch_off</span>(<span class=\"hljs-params\"> self </span>):</span> <span class=\"hljs-comment\"># switch off function</span>\n        print(<span class=\"hljs-string\">\"Removing the battery\"</span>)\n</code></pre>\n<p>Here we can notice that we have two classes Phone and Watch which have two same methods send_msg and switch_off.\nNow to call these methods we have to call them separately.This may look tedious to do, well we have an easy way to implement the solution of the above problem as follows:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">try_send_msg</span>(<span class=\"hljs-params\"> Gadget </span>):</span> <span class=\"hljs-comment\"># creating a common interface</span>\n    Gadget.send_msg()\n</code></pre>\n<p>Now lets create two instance of Object class</p>\n<pre><code class=\"lang-python\">iphone = Phone()\niwatch = Watch()\n</code></pre>\n<p>Besides calling both the methods differ for different classes, we pass that into the common interface that we created above.</p>\n<pre><code class=\"lang-python\">try_send_msg( iphone ) <span class=\"hljs-comment\"># passing iphone instance</span>\ntry_send_msg( iwatch ) <span class=\"hljs-comment\"># passing iwatch instance</span>\n</code></pre>\n<p>So the final code goes as follows:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Phone</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">send_msg</span>(<span class=\"hljs-params\"> self </span>):</span>\n        print( <span class=\"hljs-string\">\"Sending as message ... from phone\"</span> )\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">switch_off</span>(<span class=\"hljs-params\"> self </span>):</span>\n        print( <span class=\"hljs-string\">\"Turning phone off\"</span> )\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Watch</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">send_msg</span>(<span class=\"hljs-params\"> self </span>):</span>\n        print( <span class=\"hljs-string\">\"Cannot send the message from watch\"</span> )\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">switch_off</span>(<span class=\"hljs-params\"> self </span>):</span>\n        print( <span class=\"hljs-string\">\"Removing the battery of watch\"</span> )\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">try_send_msg</span>(<span class=\"hljs-params\"> gadget </span>):</span> <span class=\"hljs-comment\"># creating a common interface</span>\n    gadget.send_msg()\n\n\niphone = Phone() <span class=\"hljs-comment\"># creating instance of Phone</span>\niwatch = Watch() <span class=\"hljs-comment\"># creating instance of Watch</span>\n\ntry_send_msg(iphone) <span class=\"hljs-comment\"># passing iphone instance</span>\ntry_send_msg(iwatch) <span class=\"hljs-comment\"># passing iwatch instance</span>\n</code></pre>\n<p>With the following code the given output is as follows:</p>\n<pre><code class=\"lang-python\">Sending <span class=\"hljs-keyword\">as</span> the message ... <span class=\"hljs-keyword\">from</span> phone\nCannot send the message <span class=\"hljs-keyword\">from</span> watch\n</code></pre>\n<p>So we can see that besides calling the same method to a different class that is from a different instance, we wrap those methods into a common interface and pass the instance as parameters.</p>\n<h2 id=\"heading-encapsulation\">Encapsulation</h2>\n<p>Encapsulation is also an essential aspect of object-oriented programming. It is used to restrict access to methods and variables.</p>\n<p>Encapsulation refers to the wrapping up of data under a single unit. It acts as a protective shield for methods and function.</p>\n<p>Encapsulation has some benefits, some of which are :</p>\n<ul>\n<li>Data Hiding</li>\n<li>Flexibility</li>\n<li>Reusability</li>\n</ul>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Scaler</span>():</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span>\n        self.blogname = <span class=\"hljs-string\">\"OOPS\"</span>\n        self.language = <span class=\"hljs-string\">\"Python\"</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">about</span>(<span class=\"hljs-params\">self</span>):</span>\n        print(self.blogname , self.language)\n\n\nob = Scaler()\nob.about()\n</code></pre>\n<p>This gives the following as output :</p>\n<p><code>OOPS Python</code>\nTill now everything seems working. Let's make the language attribute a private attribute by naming convention by using a double underscore at first like __attribute-name.</p>\n<p>This makes the attribute only accessible within the scope of the class for the implementation.</p>\n<p>Let's have a look at the code.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Scaler</span>():</span> <span class=\"hljs-comment\"># defining the class </span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span>\n        self.blogname = <span class=\"hljs-string\">\"OOPS\"</span>\n        self.__language = <span class=\"hljs-string\">\"Python\"</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">about</span>(<span class=\"hljs-params\">self</span>):</span>\n        print(self.blogname , self.__language)\n\n\nob = Scaler() <span class=\"hljs-comment\"># Creating Instance </span>\nob.__language  <span class=\"hljs-comment\"># this throws Attribute Error.</span>\n</code></pre>\n<p><code>__Language</code> makes the attribute language private to its scope. Also, there are ways to recall the value stored in <code>__language</code> Attribute by the following code:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Scaler</span>():</span> <span class=\"hljs-comment\"># defining the class </span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span>\n        self.blogname = <span class=\"hljs-string\">\"OOPS\"</span>\n        self.__language = <span class=\"hljs-string\">\"Python\"</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">about</span>(<span class=\"hljs-params\">self</span>):</span>\n        print(self.blogname , self.__language)\n\n\nob = Scaler() <span class=\"hljs-comment\"># Creating Instance </span>\nprint(ob._Scaler__language) <span class=\"hljs-comment\"># This works and print Python</span>\n</code></pre>\n<p>The above code has the following output :\n<code>Python</code></p>\n<p>Another use-case could be that we want to update a certain value in an attribute but we don't want to make that attribute accessible outside the scope.</p>\n<p>Let's portray this by the following code :</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Scaler</span>():</span> <span class=\"hljs-comment\"># defining the class </span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span>\n        self.blogname = <span class=\"hljs-string\">\"OOPS\"</span>\n        self.__language = <span class=\"hljs-string\">\"Python\"</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">about</span>(<span class=\"hljs-params\">self</span>):</span>\n        print(self.blogname , self.__language)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_language</span>(<span class=\"hljs-params\">self , x</span>):</span> <span class=\"hljs-comment\"># function to set a new value to language attribute</span>\n        self.__language = x\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_language</span>(<span class=\"hljs-params\">self</span>):</span> <span class=\"hljs-comment\"># function to get the current value of langauge attribute.</span>\n        <span class=\"hljs-keyword\">return</span> self.__language\n\n\nob = Scaler() <span class=\"hljs-comment\"># Creating Instance </span>\nprint(ob._Scaler__language) <span class=\"hljs-comment\"># This works and print Python</span>\nob.set_language(<span class=\"hljs-string\">\"py\"</span>) <span class=\"hljs-comment\"># setting py as new language</span>\nprint(ob.get_language()) <span class=\"hljs-comment\"># getting py as new language</span>\nprint(ob._Scaler__language)\n</code></pre>\n<h2 id=\"heading-data-abstraction\">Data Abstraction</h2>\n<p>Data abstraction and encapsulation are often used as synonyms. Both are nearly synonyms because data abstraction is achieved through encapsulation.</p>\n<p>Abstraction refers to hiding unnecessary details to focus on the whole product instead of parts of the project separately. It is a mechanism that represents the important features without including implementation details. Abstraction helps us in partitioning the program into many independent concepts so we may hide the irrelevant information in the code. It offers the greatest flexibility when using abstract data-type objects in different situations.</p>\n<p>Let us take the example of a Mobile. It has a screen, camera, body, etc. All these things combine to form a fully functional mobile, which is an abstraction, and all the different parts are its layers of abstraction. Now a screen is composed of various parts such as a display, touch module, screen guard, etc. For these flayers, the screen is an abstraction. In simple words, abstraction can be achieved by hiding the background details and showing only the necessary ones. In programming, abstraction can not be achieved without Encapsulation.</p>\n<ul>\n<li>Abstract Class - Which has one or more Abstract Methods.</li>\n<li>Abstract Methods - Methods with the declaration but not the definition.</li>\n<li>Abstract classes can not be instantiated, and require subclasses to provide implementations for the abstract methods.</li>\n<li>Subclasses of an abstract class in Python are not required to implement abstract methods of the parent class.</li>\n</ul>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> abc <span class=\"hljs-keyword\">import</span> ABC, abstractmethod <span class=\"hljs-comment\"># predefined abstract Abc</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">ABC</span>):</span>   <span class=\"hljs-comment\"># creating a class with ABC with </span>\n\n<span class=\"hljs-meta\">    @abstractmethod  # changing the method to abstract one </span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">display</span>(<span class=\"hljs-params\">self</span>):</span> <span class=\"hljs-comment\"># not implemented method</span>\n        <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">Parent</span>):</span>  <span class=\"hljs-comment\"># creating a child class that continues Parent class</span>\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">display</span>(<span class=\"hljs-params\">self</span>):</span> <span class=\"hljs-comment\"># defining the abstract method here.</span>\n        print(<span class=\"hljs-string\">\"this is display method from child class\"</span>)\n\n\n\nob = Child()\nob.display()\n</code></pre>\n<p>Here when we create an instance of Child class and call a method over that it first goes to the child class display method which is extended from Parent class. Inside the parent class, we have displayed as an abstract class means the implementation is not present in the particular class. Therefore it's overridden by the child class.</p>\n<p>This is how we implement a large codebase where the logic is separated into different classes for more organized and readable code.</p>\n<p>Let's understand with another example :</p>\n<p>Below we have made an abstract class named Mobile where we have an abstract method named switch_on. The method's implementation is not given in the class. Later on Another child class of Mobile named Screen with extended Mobile class, we have switch_on method implementation.</p>\n<pre><code class=\"lang-python\">\n<span class=\"hljs-keyword\">from</span> abc <span class=\"hljs-keyword\">import</span> ABC, abstractmethod\n\n<span class=\"hljs-comment\"># creating a parent class</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mobile</span>(<span class=\"hljs-params\">ABC</span>):</span>\n\n<span class=\"hljs-meta\">    @abstractmethod  # specifing all the method as an abstract method</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">switch_on</span>(<span class=\"hljs-params\">self</span>):</span> <span class=\"hljs-comment\"># a method definition for turning the screen on.</span>\n        <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Screen</span>(<span class=\"hljs-params\">Mobile</span>):</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">switch_on</span>(<span class=\"hljs-params\">self</span>):</span>\n        print(<span class=\"hljs-string\">\"switched on via Screen class\"</span>)\n\npower = Screen()\npower.switch_on()\n</code></pre>\n<p>When the switch_on method is called over power instance, its points to the switch_on method from the Screen class where the implementation is executed. </p>\n<h2 id=\"heading-learn-more\">Learn more</h2>\n<p><a target=\"_blank\" href=\"https://www.scaler.com/topics/what-is-object-oriented-programming-oop/\">What is object-oriented programming ?</a></p>\n<p><a target=\"_blank\" href=\"https://www.scaler.com/topics/oops-concepts-in-python/\">Object oriented programming concept in python</a></p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<ul>\n<li>Class is the blueprint of an object. It is used to declare and create objects. Class is a logical entity. Example: Computer is a class.</li>\n<li>Object is an instance of the class. The object is a physical entity. And we can create as many objects as we want. Example: Mouse, Keyboard, Monitor, etc are objects of class Computer.</li>\n<li>Inheritance is an OOP concept, where existing classes can be modified or overridden by a new class. The existing class is called the base class or parent class and the new class is called the derived class or child class.</li>\n<li>Polymorphism in OOP allows an object to take many forms. Simply, polymorphism allows us to perform the same action in many different ways. It's the ability to use a common interface for multiple forms or data.</li>\n<li>Encapsulation in OOP is the process of restricting access to methods and variables. Encapsulation refers to the wrapping up of data under a single unit. It acts as a protective shield for methods and function.</li>\n<li>Abstraction refers to hiding unnecessary details to focus on the whole product instead of parts of the project separately. Abstraction is done by Encapsulation.</li>\n</ul>\n",
            "contentMarkdown": "## Is Python an object-oriented programming language?\n\nYes, Python is an objected oriented programming language. Everything in python is an object. Using python we can create classes and objects,for example, that functions are first-class objects. Functions, classes, strings, and even types are objects in Python: like any object, they have a type, they can be passed as function arguments, and they may have methods and properties. Therefore, **Python is object oriented programming language.**\n   \n\n## Main Concepts of Object-Oriented Programming\n\nObject-oriented programming is a method of structuring a program by bundling related properties and behavior into individual objects. These objects are related to entities. Object-oriented programming language helps us in writing reusable code. It is a popular and widely used method of solving problems by creating objects.\n\nFor example let's take human as a class.The height , weight , colour are all the attributes of a object. The biological Processes like Breathing , Walking , Eating all are considered as Methods with data and logic.\n\n\nObject-oriented Programming (OOP) is a computer programming model that helps one organize their software design around data, class, and object rather than functions and logic.\n\nLet us think of a Clothing factory where each step of the line processes some material and transform it into a finished product.\n\nClasses and objects are the two main building blocks of object-oriented programming. A class creates a new type of object where objects are instances of the class.\n\n## Class\nClass is the blueprint used to create a user-defined data structure. It holds the common attribute and behaviors of the object. For example, the class “Cloth” will hold objects “Shirt”, “Pant” and “Tshirt”.\n\nFor example, let us say that we want to store information on clothes, the general approach would be to store all the information on a list.\n\n```python\n# name = [\"category\" , size , \"company\" , price]\nshirt = [ \"Shirt\", 34, \"xyz-company\", 2000 ]\npant = [ \"Pant\", 34, \"xyz-company\", 1500 ]\ntshirt = [ \"Tshirt\", 34, 1200 ]\n```\nThere are several issues with this approach.\n\nFirst, it can make larger code files more difficult to manage. If you reference pant[0] several lines away from where the pant list is declared.\nThere may be a case when we forget the index for the required value.\n\nSecond, it can introduce errors if not every cloth has the same number of elements in the list. In the third list above, the company is missing, so the tshirt[2] will return 1200 instead of the t-shirt's company name.\n\nA great way to make this type of code more manageable and more maintainable is to use classes.\n\nAll class definitions start with the class keyword, which is followed by the name of the class and a colon. Any code that is indented below the class definition is considered part of the class’s body.\n\nHere's an example of a Cloth Class :\n```python\n#we define a class using the keyword class <name_of_class>:\nclass Cloth: \n    pass\n```\n\n> Note: Python class names are written in CapitalizedWords notation by convention. For example, a class for a specific brand of cloth like the John Players would be written as JohnPlayers.\n\nCurrently, our class doesn't do much. We need to manage the properties like size, price, name, and company name. We define those properties using a method called  **.__init__()**. Every time a new cloth object is created **.__init__()** sets the initial state of the object by assigning the values of the object's properties.\n\nYou can give .__init__() any number of parameters, but the first parameter will always be a variable called self. When a new class instance is created, the instance is automatically passed to the self parameter in .__init__() so that new attributes can be defined on the object.\n\nLet's update the cloth class with **.__init__()** method that create .name , .size , .price , .company_name attributes:\n\n```python\nclass Cloth:\n    def __init__( self, name, size , price , company_name ):\n        self.name = name\n        self.size = size\n        self.price = price\n        self.company = company_name\n```\nUsing such a Class creating and managing data seems quite easy\n\n`shirt = Cloth(\"shirt\", 25 , 1200 , \"xyz\")`\nBy using such a syntax we can retrieve each value as follows :\n```python\nshirt.name # returns the name \nshirt.size # returns the size\nshirt.price # returns the price\nshirt.company # returns the company name\n```\n\n\n## Object\n\nAn object is an instance of a class. It has both a property (variables) and behavior (methods). The python object “Cloth” will have properties; “buy”, “about”, “sell” and behaviors; “discount”, and “show”.\n\n\nEverything in Python is an object, and almost everything has attributes and methods. All functions have a built-in attribute __doc__, which returns the docstring defined in the function source code.\n\n```python\n# Defining a class named Cloth\nclass Cloth:\n    def __init__( self, name, size , price , company_name ):\n        self.name = name\n        self.size = size\n        self.price = price\n        self.company = company_name  \n  \nshirt = Cloth( \"shirt\", 25 , 1200 , \"xyz\" ) # creating object shirt\n```\n\n## Method\n\nMethods are the functions that are defined inside a class and can only be called from an instance of that class. A method includes the operation and functionality of the object. These methods are defined inside a class. These methods are the reusable piece of code that can be invoked/called at any point in the program.\n\n```python\n# Defining a class named Cloth\nclass Cloth:\n    def __init__( self, name, size , price , company_name ):\n        self.name = name\n        self.size = size\n        self.price = price\n        self.company = company_name\n        \n    def show( self ):  # Method \n        print( self.name, self.size, self.price, self.company )  \n  \nshirt = Cloth( \"shirt\", 25 , 1200 , \"xyz\" ) # Creating object shirt\nshirt.show() # using a method over a object.\n\n```\n\nHere the show is a method or functionality to print all the data being passed at the time of object creation. \n\n## Inheritance\n\nInheritance is the process by which one class takes on the attributes and methods of another. Newly formed classes are called child classes, and the classes that child classes are derived from are called parent classes.\n\nIt specifies that the child object acquires all the properties and behaviours of the parent object.\n\nInheritance has many advantages some of them are :\n\n* It provides the reusability of the code.\n* It provides Transition and Readability.\n* Real World Relationship.\n\n```python\nclass Parent: # Parent class\n    def parent_func( self ): # simple function\n        print( 'This is a Parent Class' )\n        \nclass Child( Parent ): # child class with Parent class as attribute\n    def child_func( self ): # simple function\n        print('This is Child class')\n        \n\nob = Child()\nob.child_func()\nob.parent_func()\n```\nHere we can notice that despite creating an Object of child class we have access to the method from a different class. Since we know that methods are restricted to their instance, here we have access to them. This is due to inheritance as the Child class has the attribute of the Parent class.\n\n\n```python\nclass Parent: # Parent class\n    def __init__( self,name,wish ): # init func\n        self.name = name\n        self.wish = wish\n        \n    def parent_func(self): # simple function\n        print('This is a Parent Class')\n        \n    def show( self ):\n        print( self.name , self.wish )\n        \nclass Child( Parent ): # child class with Parent class as attribute\n    def __init__( self,name,wish,age ):# init function\n        Parent.__init__( self,name,wish ) # using Parent init method for name and wish \n        self.age = age\n        \n    def child_func( self ): # simple function\n        print( 'This is Child class' )\n        \n    def show( self ):\n        print( self.name , self.wish , self.age )\n        \n\nob = Child( \"abhishek\" , \"Happy Reading\" , 20 ) # passing all the three arguments.\nob.show() # calling the method\n```\n\nInheritance also overrides the __init__ method. To avoid that we need to declare the Parent init function under the child __init__ Method.\n\n`Parent.__init__(self,name,wish)`\n\nThis is how we can override the Parent init function in the child function.\n\n## Polymorphism\n\nPolymorphism contains two words \"poly\" and \"morphs\". Poly means many, and morph means shape. By polymorphism, we understand that one task can be performed in different ways. It's the ability to use a common interface for multiple forms or data.\n\n\nNow in this example, we have created two classes “Cat” and “Dog”. They’re different animals and make different sounds. So, the make_sound() function should produce two different outputs based on the objects we pass through them. In this case, we have created two objects “cat1” and “dog1”.\n\n[IMAGE {04} show that class Cat and Dog have the same method make_sound and method overload ]\n\n```python\nclass Cat:\n    def __init__( self, name, age ):\n        self.name = name\n        self.age = age\n \n    def info(self):\n        print(f\"I am a cat. My name is {self.name}. I am {self.age} years old.\")\n \n    def make_sound( self ):\n        print(\"Meow\")\n \n \nclass Dog:\n    def __init__( self, name, age ):\n        self.name = name\n        self.age = age\n \n    def info(self):\n        print( f\"I am a Dog. My name is {self.name}. I am {self.age} years old.\" )\n \n    def make_sound( self ):\n        print( \"Bark\" )\ncat1 = Cat( \"Kitty\", 2.5 )\ndog1 = Dog( \"Fluffy\", 4 )\n \nfor animal in ( cat1, cow1 ):\n    animal.make_sound()\n    animal.info()\n    animal.make_sound()\n```\n\nThe make-sound() function is producing two different outputs- “Meow” and “Bark”.\n\n\nThis concept in Object Oriented Programming is called Polymorphism. We can also consider this as Method Overloading.\n\nLet's Create two classes and have some similar properties associated with them:\n\n```python\nclass Phone:\n    def send_msg( self, x ): # send msg function\n        print(f\"Sending {x} as message ...\")\n        \n    def switch_off( self ): # switch off function\n        print(\"Turning it off\")\n        \nclass Watch:\n    def send_msg( self,x ): # send msg function\n        print(\"Cannot send the message\")\n    \n    def switch_off( self ): # switch off function\n        print(\"Removing the battery\")\n```\nHere we can notice that we have two classes Phone and Watch which have two same methods send_msg and switch_off.\nNow to call these methods we have to call them separately.This may look tedious to do, well we have an easy way to implement the solution of the above problem as follows:\n\n\n```python\ndef try_send_msg( Gadget ): # creating a common interface\n    Gadget.send_msg()\n```\nNow lets create two instance of Object class\n```python\niphone = Phone()\niwatch = Watch()\n```\nBesides calling both the methods differ for different classes, we pass that into the common interface that we created above.\n\n```python\ntry_send_msg( iphone ) # passing iphone instance\ntry_send_msg( iwatch ) # passing iwatch instance\n```\n\nSo the final code goes as follows:\n\n```python\nclass Phone:\n    def send_msg( self ):\n        print( \"Sending as message ... from phone\" )\n        \n    def switch_off( self ):\n        print( \"Turning phone off\" )\n        \nclass Watch:\n    def send_msg( self ):\n        print( \"Cannot send the message from watch\" )\n    \n    def switch_off( self ):\n        print( \"Removing the battery of watch\" )\n        \ndef try_send_msg( gadget ): # creating a common interface\n    gadget.send_msg()\n    \n\niphone = Phone() # creating instance of Phone\niwatch = Watch() # creating instance of Watch\n\ntry_send_msg(iphone) # passing iphone instance\ntry_send_msg(iwatch) # passing iwatch instance\n\n```\n\nWith the following code the given output is as follows:\n\n```python\nSending as the message ... from phone\nCannot send the message from watch\n```\n\nSo we can see that besides calling the same method to a different class that is from a different instance, we wrap those methods into a common interface and pass the instance as parameters.\n\n## Encapsulation\n\nEncapsulation is also an essential aspect of object-oriented programming. It is used to restrict access to methods and variables.\n\nEncapsulation refers to the wrapping up of data under a single unit. It acts as a protective shield for methods and function.\n\nEncapsulation has some benefits, some of which are :\n\n- Data Hiding\n- Flexibility\n- Reusability\n\n```python\nclass Scaler():\n    def __init__(self):\n        self.blogname = \"OOPS\"\n        self.language = \"Python\"\n        \n    def about(self):\n        print(self.blogname , self.language)\n        \n        \nob = Scaler()\nob.about()\n```\nThis gives the following as output :\n\n`OOPS Python`\nTill now everything seems working. Let's make the language attribute a private attribute by naming convention by using a double underscore at first like __attribute-name.\n\n\n\nThis makes the attribute only accessible within the scope of the class for the implementation.\n\nLet's have a look at the code.\n\n```python\nclass Scaler(): # defining the class \n    def __init__(self):\n        self.blogname = \"OOPS\"\n        self.__language = \"Python\"\n        \n    def about(self):\n        print(self.blogname , self.__language)\n        \n        \nob = Scaler() # Creating Instance \nob.__language  # this throws Attribute Error.\n```\n\n`__Language` makes the attribute language private to its scope. Also, there are ways to recall the value stored in `__language` Attribute by the following code:\n\n\n\n```python\nclass Scaler(): # defining the class \n    def __init__(self):\n        self.blogname = \"OOPS\"\n        self.__language = \"Python\"\n        \n    def about(self):\n        print(self.blogname , self.__language)\n        \n        \nob = Scaler() # Creating Instance \nprint(ob._Scaler__language) # This works and print Python\n```\nThe above code has the following output :\n`Python`\n\nAnother use-case could be that we want to update a certain value in an attribute but we don't want to make that attribute accessible outside the scope.\n\nLet's portray this by the following code :\n```python\nclass Scaler(): # defining the class \n    def __init__(self):\n        self.blogname = \"OOPS\"\n        self.__language = \"Python\"\n        \n    def about(self):\n        print(self.blogname , self.__language)\n        \n    def set_language(self , x): # function to set a new value to language attribute\n        self.__language = x\n        \n    def get_language(self): # function to get the current value of langauge attribute.\n        return self.__language\n        \n        \nob = Scaler() # Creating Instance \nprint(ob._Scaler__language) # This works and print Python\nob.set_language(\"py\") # setting py as new language\nprint(ob.get_language()) # getting py as new language\nprint(ob._Scaler__language)\n\n```\n\n## Data Abstraction\n\nData abstraction and encapsulation are often used as synonyms. Both are nearly synonyms because data abstraction is achieved through encapsulation.\n\nAbstraction refers to hiding unnecessary details to focus on the whole product instead of parts of the project separately. It is a mechanism that represents the important features without including implementation details. Abstraction helps us in partitioning the program into many independent concepts so we may hide the irrelevant information in the code. It offers the greatest flexibility when using abstract data-type objects in different situations.\n\nLet us take the example of a Mobile. It has a screen, camera, body, etc. All these things combine to form a fully functional mobile, which is an abstraction, and all the different parts are its layers of abstraction. Now a screen is composed of various parts such as a display, touch module, screen guard, etc. For these flayers, the screen is an abstraction. In simple words, abstraction can be achieved by hiding the background details and showing only the necessary ones. In programming, abstraction can not be achieved without Encapsulation.\n\n\n \n\n- Abstract Class - Which has one or more Abstract Methods.\n- Abstract Methods - Methods with the declaration but not the definition.\n- Abstract classes can not be instantiated, and require subclasses to provide implementations for the abstract methods.\n- Subclasses of an abstract class in Python are not required to implement abstract methods of the parent class.\n\n```python\nfrom abc import ABC, abstractmethod # predefined abstract Abc\n\nclass Parent(ABC):   # creating a class with ABC with \n    \n    @abstractmethod  # changing the method to abstract one \n    def display(self): # not implemented method\n        None\n        \n        \nclass Child(Parent):  # creating a child class that continues Parent class\n     def display(self): # defining the abstract method here.\n        print(\"this is display method from child class\")\n            \n            \n\nob = Child()\nob.display()\n```\nHere when we create an instance of Child class and call a method over that it first goes to the child class display method which is extended from Parent class. Inside the parent class, we have displayed as an abstract class means the implementation is not present in the particular class. Therefore it's overridden by the child class.\n\nThis is how we implement a large codebase where the logic is separated into different classes for more organized and readable code.\n\n\nLet's understand with another example :\n\nBelow we have made an abstract class named Mobile where we have an abstract method named switch_on. The method's implementation is not given in the class. Later on Another child class of Mobile named Screen with extended Mobile class, we have switch_on method implementation.\n```python\n\nfrom abc import ABC, abstractmethod\n\n# creating a parent class\nclass Mobile(ABC):\n\n    @abstractmethod  # specifing all the method as an abstract method\n    def switch_on(self): # a method definition for turning the screen on.\n        pass\n\nclass Screen(Mobile):\n    def switch_on(self):\n        print(\"switched on via Screen class\")\n\npower = Screen()\npower.switch_on()\n```\n\nWhen the switch_on method is called over power instance, its points to the switch_on method from the Screen class where the implementation is executed. \n\n\n## Learn more \n\n[What is object-oriented programming ?](https://www.scaler.com/topics/what-is-object-oriented-programming-oop/)\n\n[Object oriented programming concept in python](https://www.scaler.com/topics/oops-concepts-in-python/)\n\n\n## Conclusion\n\n- Class is the blueprint of an object. It is used to declare and create objects. Class is a logical entity. Example: Computer is a class.\n- Object is an instance of the class. The object is a physical entity. And we can create as many objects as we want. Example: Mouse, Keyboard, Monitor, etc are objects of class Computer.\n- Inheritance is an OOP concept, where existing classes can be modified or overridden by a new class. The existing class is called the base class or parent class and the new class is called the derived class or child class.\n- Polymorphism in OOP allows an object to take many forms. Simply, polymorphism allows us to perform the same action in many different ways. It's the ability to use a common interface for multiple forms or data.\n- Encapsulation in OOP is the process of restricting access to methods and variables. Encapsulation refers to the wrapping up of data under a single unit. It acts as a protective shield for methods and function.\n- Abstraction refers to hiding unnecessary details to focus on the whole product instead of parts of the project separately. Abstraction is done by Encapsulation.",
            "hasPolls": false,
            "totalPollVotes": 0,
            "upvotes": 0,
            "downvotes": 0,
            "tags": [
                "56744721958ef13879b94d67",
                "591e9732ab184fdc3bcd9185",
                "56744723958ef13879b955a9",
                "56744721958ef13879b94ae7"
            ],
            "untaggedFrom": [

            ],
            "upvotedBy": [

            ],
            "downvotedBy": [

            ],
            "popularity": 5629.9278,
            "responses": [

            ],
            "responseCount": 0,
            "replyCount": 0,
            "followers": [

            ],
            "isActive": true,
            "isFeatured": false,
            "isEngaging": false,
            "answeredByTarget": false,
            "inviters": [

            ],
            "isDelisted": false,
            "isNotified": false,
            "duplicatePosts": [

            ],
            "numCollapsed": 0,
            "hasReward": false,
            "bookmarkedIn": [

            ],
            "similarPostIds": [

            ],
            "reactions": [
                "5c090d96c2a9c2a674d35484",
                "567453d0b73d6a82ac8c5abc"
            ],
            "totalReactions": 2,
            "reactionsByCurrentUser": [

            ],
            "isPinnedToBlog": false,
            "disableComments": false,
            "commentsPaused": false,
            "hasLatex": false,
            "syncAlgolia": true,
            "enableToc": true,
            "toc": [
                [{
                    "id": "f9a17982-d538-445b-8003-ed75c431d017",
                    "level": 2,
                    "previousLevel": null,
                    "parentId": null,
                    "slug": "is-python-an-object-oriented-programming-language",
                    "title": "Is Python an object-oriented programming language?"
                }],
                [{
                    "id": "38393a72-f827-4ac0-9d47-86dce830ff16",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "main-concepts-of-object-oriented-programming",
                    "title": "Main Concepts of Object-Oriented Programming"
                }],
                [{
                    "id": "71b3c398-ed8e-4134-86b0-fa1549e489f4",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "class",
                    "title": "Class"
                }],
                [{
                    "id": "1110ee8d-5798-42a1-b8ee-a52381becc84",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "object",
                    "title": "Object"
                }],
                [{
                    "id": "97498bc2-587d-4d3f-88d4-e9a326396302",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "method",
                    "title": "Method"
                }],
                [{
                    "id": "9aa58bb1-5ba9-463b-80b3-119628aefdb1",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "inheritance",
                    "title": "Inheritance"
                }],
                [{
                    "id": "2d77a771-5963-4346-a3cc-4c87d9c69d6d",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "polymorphism",
                    "title": "Polymorphism"
                }],
                [{
                    "id": "d7755ce1-8539-4d9c-9a3a-9afd4fc2030f",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "encapsulation",
                    "title": "Encapsulation"
                }],
                [{
                    "id": "055fb66e-af20-4334-8185-f3062a6ade4a",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "data-abstraction",
                    "title": "Data Abstraction"
                }],
                [{
                    "id": "8c38f824-998b-4d57-8966-142273e75a4a",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "learn-more",
                    "title": "Learn more"
                }],
                [{
                    "id": "7f12ffbf-4118-4dc3-9e7f-590be4c1faa4",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "conclusion",
                    "title": "Conclusion"
                }]
            ],
            "numUniqueUsersWhoReacted": 0,
            "_id": "631592f7041b51e1712e6c34",
            "title": "Python is an object-oriented programming language",
            "type": "story",
            "isRepublished": true,
            "originalArticleURL": "https://www.scaler.com/topics/python-is-object-oriented-programming-language/",
            "partOfPublication": true,
            "publication": "61f829982454810a8d407f2f",
            "slug": "python-is-an-object-oriented-programming-language",
            "cuid": "cl7od6tgg08nlgznvffjp878l",
            "dateAdded": "2022-09-05T06:05:50.000Z",
            "hasCustomDate": true,
            "pollOptions": [

            ],
            "badges": [

            ],
            "questionReplies": [

            ],
            "contributors": [

            ],
            "author": "61f829629030330a7b25a024",
            "followersCount": 1,
            "readTime": 14,
            "__v": 1,
            "series": "627a9c5d199297a9505d469d",
            "coverImageAttribution": "",
            "coverImagePhotographer": "",
            "dateUpdated": "2022-09-05T06:15:40.831Z",
            "isCoverAttributionHidden": false,
            "metaDescription": "Learn whether python is object oriented programming language, along with examples and code explanations on scaler Topics.",
            "metaTitle": "Python is an object-oriented programming language",
            "ogImage": "",
            "pendingPublicationApproval": false,
            "stickCoverToBottom": false,
            "subtitle": "",
            "viewsUpdatedOn": 1665142208886,
            "reactionToCountMap": {
                "reaction_5c090d96c2a9c2a674d35484": 1,
                "reaction_567453d0b73d6a82ac8c5abc": 1
            },
            "uniqueReactions": [
                "5c090d96c2a9c2a674d35484",
                "567453d0b73d6a82ac8c5abc"
            ],
            "reactionToCountMapUnique": {
                "reaction_5c090d96c2a9c2a674d35484": 1,
                "reaction_567453d0b73d6a82ac8c5abc": 1
            },
            "id": "631592f7041b51e1712e6c34"
        },
        {
            "audioUrls": {
                "male": "https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl6k73s4y01jf8onvey8v3tc0-male"
            },
            "reward": {
                "type": "xlm"
            },
            "sourcedFromGithub": false,
            "githubAsSourceMeta": null,
            "isAnonymous": false,
            "views": 9,
            "slugOverridden": false,
            "coverImage": "https://cdn.hashnode.com/res/hashnode/image/unsplash/cckf4TsHAuw/upload/v1659929219805/QJ2J-hvsU.jpeg",
            "autoGeneratedCover": "",
            "brief": "Around the web, there are plenty of resources to get started with or learn from them. In this article, i would love to note down the ones I found to be useful. If I tend to miss some, do let me know in the Comments below 🙌\n\nGoogle \nBy google, i mean...",
            "content": "<p>Around the web, there are plenty of resources to get started with or learn from them. In this article, i would love to note down the ones I found to be useful. If I tend to miss some, do let me know in the Comments below 🙌</p>\n<ol>\n<li><p>Google \nBy google, i mean the Google developers site where you have everything to learn as a complete beginner.\nhttps://developers.google.com/web</p>\n</li>\n<li><p>MDN Web Docs are one of the huge libraries of documentation where you can learn web dev by Mozilla and Google.\nhttps://developer.mozilla.org/en-US/</p>\n</li>\n<li><p>Free Code Camp\nWell, we are talking about quality content and then how we can forget \nabout this non-profit organization that helps students and \npeople to learn to code with over 3000+ hours of content.</p>\n<p>  www.freecodecamp.org</p>\n</li>\n</ol>\n<ol>\n<li><p>Code Academy contains both text and video resources to learn web \ndevelopment and programming for free in an easy way. It has plenty \nof resources to get started with.</p>\n<p>   www.codeacademy.com</p>\n</li>\n<li><p>Khan Academy\nKhan Academy is a useful website to learn web development and \nmore programming concepts. Everything for free.</p>\n<p>   https://www.khanacademy.org/computing/computer-programming</p>\n</li>\n<li><p>Coursera is a fantastic site that has free video content to \nlearn web development and more.</p>\n<p>   https://www.coursera.org/</p>\n</li>\n<li><p>Scrimba \nScrimba allows you to study where you want when you want. We \nalso substitute the classroom teaching experience with \ninteractive screencast, live events, and peer-to-peer help \nbetween students.</p>\n<p>   https://scrimba.com/</p>\n<p>Well all the courses and paths are not free but you can apply for \nscrimba scholarship which will give you access to their content \nfor 6 months.</p>\n<p>  https://scholarship.scrimba.com/</p>\n</li>\n<li><p>CodeDamn\nYou may or may not have heard of it , but it's a great platform \nwhere you can learn full-stack web development. Most of the \ncourses are free and going with that you can gain a lot of \nknowledge. Some advance or new topics are paid but they are super \naffordable for one .</p>\n<p>   www.codedamn.com</p>\n</li>\n</ol>\n<p>I hope you found this article helpful, if so let me know in the comment section. Also if you have some more listings let us know.</p>\n",
            "contentMarkdown": "Around the web, there are plenty of resources to get started with or learn from them. In this article, i would love to note down the ones I found to be useful. If I tend to miss some, do let me know in the Comments below 🙌\n\n1. Google \nBy google, i mean the Google developers site where you have everything to learn as a complete beginner.\nhttps://developers.google.com/web\n\n2. MDN Web Docs are one of the huge libraries of documentation where you can learn web dev by Mozilla and Google.\nhttps://developer.mozilla.org/en-US/\n\n3. Free Code Camp\n   Well, we are talking about quality content and then how we can forget \n   about this non-profit organization that helps students and \n   people to learn to code with over 3000+ hours of content.\n\n     www.freecodecamp.org\n\n\n4. Code Academy contains both text and video resources to learn web \n  development and programming for free in an easy way. It has plenty \n  of resources to get started with.\n\n      www.codeacademy.com\n\n5. Khan Academy\n   Khan Academy is a useful website to learn web development and \n   more programming concepts. Everything for free.\n\n      https://www.khanacademy.org/computing/computer-programming\n\n6. Coursera is a fantastic site that has free video content to \n   learn web development and more.\n\n      https://www.coursera.org/\n\n7. Scrimba \n   Scrimba allows you to study where you want when you want. We \n   also substitute the classroom teaching experience with \n   interactive screencast, live events, and peer-to-peer help \n   between students.\n\n      https://scrimba.com/\n\n   Well all the courses and paths are not free but you can apply for \n   scrimba scholarship which will give you access to their content \n   for 6 months.\n\n     https://scholarship.scrimba.com/\n\n8. CodeDamn\n  You may or may not have heard of it , but it's a great platform \n  where you can learn full-stack web development. Most of the \n  courses are free and going with that you can gain a lot of \n  knowledge. Some advance or new topics are paid but they are super \n  affordable for one .\n\n      www.codedamn.com\n\n\nI hope you found this article helpful, if so let me know in the comment section. Also if you have some more listings let us know.",
            "hasPolls": false,
            "totalPollVotes": 0,
            "upvotes": 0,
            "downvotes": 0,
            "tags": [
                "56744722958ef13879b94f1b",
                "57039f98f950faa9ab7ec552",
                "590af9b8b17a7199893121c1",
                "62ca83b2bffc4694f5bc4055",
                "56744723958ef13879b95470"
            ],
            "untaggedFrom": [

            ],
            "upvotedBy": [

            ],
            "downvotedBy": [

            ],
            "popularity": 5576.9599,
            "responses": [

            ],
            "responseCount": 0,
            "replyCount": 0,
            "followers": [

            ],
            "isActive": true,
            "isFeatured": false,
            "isEngaging": false,
            "answeredByTarget": false,
            "inviters": [

            ],
            "isDelisted": false,
            "isNotified": false,
            "duplicatePosts": [

            ],
            "numCollapsed": 0,
            "hasReward": false,
            "bookmarkedIn": [

            ],
            "similarPostIds": [

            ],
            "reactions": [
                "5c090d96c2a9c2a674d35484",
                "5c090d96c2a9c2a674d35485",
                "5c090d96c2a9c2a674d35486",
                "567453d0b73d6a82ac8c5abd",
                "567453d0b73d6a82ac8c5abc",
                "567453d0b73d6a82ac8c5ab9",
                "5c090d96c2a9c2a674d35488",
                "5c090d96c2a9c2a674d3548a",
                "5c090d96c2a9c2a674d3548b"
            ],
            "totalReactions": 10,
            "reactionsByCurrentUser": [

            ],
            "isPinnedToBlog": false,
            "disableComments": false,
            "commentsPaused": false,
            "hasLatex": false,
            "syncAlgolia": true,
            "enableToc": true,
            "toc": [

            ],
            "numUniqueUsersWhoReacted": 0,
            "_id": "62f08335dfc2b15565884d72",
            "title": "Learn Web Dev FREE!",
            "subtitle": "Some resources to start learning Web dev other than Youtube📍",
            "pollOptions": [

            ],
            "type": "story",
            "coverImageAttribution": "https://unsplash.com/es/@andrewtneel",
            "coverImagePhotographer": "Andrew Neel",
            "isCoverAttributionHidden": false,
            "ogImage": "",
            "metaTitle": "Learn Web Dev FREE!",
            "metaDescription": "Some resources to start learning Web dev other than Youtube📍",
            "isRepublished": true,
            "originalArticleURL": "https://dev.to/abbhiishek/learn-web-dev-free--2pl9",
            "partOfPublication": true,
            "publication": "61f829982454810a8d407f2f",
            "slug": "learn-web-dev-free",
            "importedFromMedium": false,
            "dateAdded": "2022-08-08T03:29:57.280Z",
            "hasCustomDate": false,
            "hasScheduledDate": false,
            "stickCoverToBottom": false,
            "series": "6258434652fb7bd53380b2fb",
            "badges": [

            ],
            "questionReplies": [

            ],
            "contributors": [

            ],
            "cuid": "cl6k73s4y01jf8onvey8v3tc0",
            "author": "61f829629030330a7b25a024",
            "followersCount": 1,
            "draft": "62f081bcdfc2b15565884d44",
            "readTime": 2,
            "__v": 0,
            "viewsUpdatedOn": 1662044423666,
            "reactionToCountMap": {
                "reaction_5c090d96c2a9c2a674d35484": 2,
                "reaction_5c090d96c2a9c2a674d35485": 1,
                "reaction_5c090d96c2a9c2a674d35486": 1,
                "reaction_567453d0b73d6a82ac8c5abd": 1,
                "reaction_567453d0b73d6a82ac8c5abc": 1,
                "reaction_567453d0b73d6a82ac8c5ab9": 1,
                "reaction_5c090d96c2a9c2a674d35488": 1,
                "reaction_5c090d96c2a9c2a674d3548a": 1,
                "reaction_5c090d96c2a9c2a674d3548b": 1
            },
            "uniqueReactions": [
                "5c090d96c2a9c2a674d35484",
                "5c090d96c2a9c2a674d35485",
                "5c090d96c2a9c2a674d35486",
                "567453d0b73d6a82ac8c5abd",
                "567453d0b73d6a82ac8c5abc",
                "567453d0b73d6a82ac8c5ab9",
                "5c090d96c2a9c2a674d35488",
                "5c090d96c2a9c2a674d3548a",
                "5c090d96c2a9c2a674d3548b"
            ],
            "reactionToCountMapUnique": {
                "reaction_5c090d96c2a9c2a674d35484": 2,
                "reaction_5c090d96c2a9c2a674d35485": 1,
                "reaction_5c090d96c2a9c2a674d35486": 1,
                "reaction_567453d0b73d6a82ac8c5abd": 1,
                "reaction_567453d0b73d6a82ac8c5abc": 1,
                "reaction_567453d0b73d6a82ac8c5ab9": 1,
                "reaction_5c090d96c2a9c2a674d35488": 1,
                "reaction_5c090d96c2a9c2a674d3548a": 1,
                "reaction_5c090d96c2a9c2a674d3548b": 1
            },
            "id": "62f08335dfc2b15565884d72"
        },
        {
            "audioUrls": {
                "male": "https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl6d5h6ql031ygwnveqrm592z-male"
            },
            "reward": {
                "type": "xlm"
            },
            "sourcedFromGithub": false,
            "githubAsSourceMeta": null,
            "isAnonymous": false,
            "views": 26,
            "slugOverridden": false,
            "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1659503270361/qpx-8Hotz.png",
            "autoGeneratedCover": "",
            "brief": "Vanilla js is known as plain old Javascript and it’s basically the javascript written without using any libraries.\nReact is a JS library used for building UI. It allows us to make complex UIs using components.\nWhat you actually get in ReactJS CODE Is...",
            "content": "<p>Vanilla js is known as plain old Javascript and it’s basically the javascript written without using any libraries.\nReact is a JS library used for building UI. It allows us to make complex UIs using components.</p>\n<h2 id=\"heading-what-you-actually-get-in-reactjs-code-isolation-in-react\">What you actually get in ReactJS CODE Isolation in React ?</h2>\n<p>In Vanilla JS, if we want to update some piece of HTML. That piece of code may reside in multiple JS files. So, it becomes hard for the developer to track all these files and they have to keep all the files open at once. \nIn React, we split our code into components and each component maintains all the code needed for both display and updates to UI. Therefore, updated code is next to display code, which makes complex apps much easier to understand. </p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi918d2dh2p9bzvmtji6.png\" alt=\"components in reactjs\" /></p>\n<h2 id=\"heading-we-get-better-data-handling-in-react\">We get better Data Handling in React</h2>\n<p>In Vanilla JS, our data is stored in a model called DOM(Document Object Model) which is created and maintained by the browser. \nIf a user gives input in a form, the developer needs to extract that data by finding it in the DOM first and then extracting its value. Which becomes a very tedious job.\nBut, In React we have a concept called “controlled-components” which sets the text value in a JS Object as the user types it. In general, React stores data in regular JS variables.\nEx : </p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> [input, setInput] = useState(“”)\n</code></pre>\n<h2 id=\"heading-hooks-in-react\">Hooks in React</h2>\n<p>In React we have a concept called Hooks which provides benefits like Reusability, Readability, and Testability. You get some built-in hooks like useState, useEffect, useReducer, useRef etc, which helps in rapid development.\nImproves Readability  For example “useContext” hook has been a blessing for improving the readability of JSX as it allows context values to be read outside of JSX.\nAside from code it’s easier to read the component tree in react dev tools when debugging.</p>\n<h2 id=\"heading-using-react-in-web-apps\">Using React in Web Apps</h2>\n<p>Using React JS in creating web applications is a cherry on cake. Data gets dynamically updated in web pages without requiring them to be reloaded at each time. When the user clicks on a button in the page data can be presented to the user without reloading the page every time. This gives the user a good interaction with the web site. </p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Vanilla JS is awesome but it’s not a great alternative when it comes to building huge applications with complex functionalities. Also, you can’t create complex UIs(it will take too much of time). On the other hand, React allows us to create reusable components. So, React is Better to learn &amp; use in every aspect of rapid Development. </p>\n",
            "contentMarkdown": "Vanilla js is known as plain old Javascript and it’s basically the javascript written without using any libraries.\nReact is a JS library used for building UI. It allows us to make complex UIs using components.\n\n## What you actually get in ReactJS CODE Isolation in React ?\n\nIn Vanilla JS, if we want to update some piece of HTML. That piece of code may reside in multiple JS files. So, it becomes hard for the developer to track all these files and they have to keep all the files open at once. \nIn React, we split our code into components and each component maintains all the code needed for both display and updates to UI. Therefore, updated code is next to display code, which makes complex apps much easier to understand. \n\n\n![components in reactjs](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi918d2dh2p9bzvmtji6.png)\n\n\n## We get better Data Handling in React\n\nIn Vanilla JS, our data is stored in a model called DOM(Document Object Model) which is created and maintained by the browser. \nIf a user gives input in a form, the developer needs to extract that data by finding it in the DOM first and then extracting its value. Which becomes a very tedious job.\nBut, In React we have a concept called “controlled-components” which sets the text value in a JS Object as the user types it. In general, React stores data in regular JS variables.\nEx : \n```js\nconst [input, setInput] = useState(“”)\n```\n\n\n## Hooks in React \nIn React we have a concept called Hooks which provides benefits like Reusability, Readability, and Testability. You get some built-in hooks like useState, useEffect, useReducer, useRef etc, which helps in rapid development.\nImproves Readability  For example “useContext” hook has been a blessing for improving the readability of JSX as it allows context values to be read outside of JSX.\nAside from code it’s easier to read the component tree in react dev tools when debugging.\n \n\n\n\n\n## Using React in Web Apps \nUsing React JS in creating web applications is a cherry on cake. Data gets dynamically updated in web pages without requiring them to be reloaded at each time. When the user clicks on a button in the page data can be presented to the user without reloading the page every time. This gives the user a good interaction with the web site. \n\n\n\n\n\n\n## Conclusion \nVanilla JS is awesome but it’s not a great alternative when it comes to building huge applications with complex functionalities. Also, you can’t create complex UIs(it will take too much of time). On the other hand, React allows us to create reusable components. So, React is Better to learn & use in every aspect of rapid Development. \n\n \n",
            "hasPolls": false,
            "totalPollVotes": 0,
            "upvotes": 0,
            "downvotes": 0,
            "tags": [
                "56744723958ef13879b95434",
                "56744721958ef13879b94cad",
                "56744722958ef13879b94f1b",
                "56744723958ef13879b955a9"
            ],
            "untaggedFrom": [

            ],
            "upvotedBy": [

            ],
            "downvotedBy": [

            ],
            "popularity": 5566.4933,
            "responses": [

            ],
            "responseCount": 0,
            "replyCount": 0,
            "followers": [

            ],
            "isActive": true,
            "isFeatured": false,
            "isEngaging": false,
            "answeredByTarget": false,
            "inviters": [

            ],
            "isDelisted": false,
            "isNotified": false,
            "duplicatePosts": [

            ],
            "numCollapsed": 0,
            "hasReward": false,
            "bookmarkedIn": [

            ],
            "similarPostIds": [

            ],
            "reactions": [
                "5c090d96c2a9c2a674d35484",
                "5c090d96c2a9c2a674d35486",
                "5c090d96c2a9c2a674d35485",
                "567453d0b73d6a82ac8c5ab9",
                "5d9dd859f31791c942dc5b52",
                "5c090d96c2a9c2a674d3548b",
                "567453d0b73d6a82ac8c5abd",
                "5c090d96c2a9c2a674d3548a",
                "567453d0b73d6a82ac8c5abc"
            ],
            "totalReactions": 9,
            "reactionsByCurrentUser": [

            ],
            "isPinnedToBlog": false,
            "disableComments": false,
            "commentsPaused": false,
            "hasLatex": false,
            "syncAlgolia": true,
            "enableToc": true,
            "toc": [
                [{
                    "id": "24049f60-15ca-4f62-a116-478e58464748",
                    "level": 2,
                    "previousLevel": null,
                    "parentId": null,
                    "slug": "what-you-actually-get-in-reactjs-code-isolation-in-react",
                    "title": "What you actually get in ReactJS CODE Isolation in React ?"
                }],
                [{
                    "id": "98f6da48-0e93-43b3-a081-6970f5a05294",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "we-get-better-data-handling-in-react",
                    "title": "We get better Data Handling in React"
                }],
                [{
                    "id": "7bf1b6cd-6495-4a92-9cb8-ad454d6a49ae",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "hooks-in-react",
                    "title": "Hooks in React"
                }],
                [{
                    "id": "ae977255-7a25-4a8d-b721-ba541d0b8474",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "using-react-in-web-apps",
                    "title": "Using React in Web Apps"
                }],
                [{
                    "id": "c5362f43-b656-4b20-bda9-b692809baded",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "conclusion",
                    "title": "Conclusion"
                }]
            ],
            "numUniqueUsersWhoReacted": 0,
            "_id": "62ea032816f9480a9dac4647",
            "title": "Why is it time to move on to ReactJS?",
            "subtitle": "Benefits of React over Vanilla js",
            "pollOptions": [

            ],
            "type": "story",
            "coverImageAttribution": "",
            "coverImagePhotographer": "",
            "isCoverAttributionHidden": false,
            "ogImage": "",
            "metaTitle": "Why is it time to move on to ReactJS?",
            "metaDescription": "Benefits of React over Vanilla js",
            "isRepublished": false,
            "originalArticleURL": "",
            "partOfPublication": true,
            "publication": "61f829982454810a8d407f2f",
            "slug": "why-is-it-time-to-move-on-to-reactjs",
            "importedFromMedium": false,
            "dateAdded": "2022-08-03T05:10:00.257Z",
            "hasCustomDate": false,
            "hasScheduledDate": false,
            "stickCoverToBottom": false,
            "series": "6258434652fb7bd53380b2fb",
            "badges": [

            ],
            "questionReplies": [

            ],
            "contributors": [

            ],
            "cuid": "cl6d5h6ql031ygwnveqrm592z",
            "author": "61f829629030330a7b25a024",
            "followersCount": 1,
            "draft": "62ea02a016f9480a9dac462b",
            "readTime": 2,
            "__v": 0,
            "reactionToCountMap": {
                "reaction_5c090d96c2a9c2a674d35484": 1,
                "reaction_5c090d96c2a9c2a674d35486": 1,
                "reaction_5c090d96c2a9c2a674d35485": 1,
                "reaction_567453d0b73d6a82ac8c5ab9": 1,
                "reaction_5d9dd859f31791c942dc5b52": 1,
                "reaction_5c090d96c2a9c2a674d3548b": 1,
                "reaction_567453d0b73d6a82ac8c5abd": 1,
                "reaction_5c090d96c2a9c2a674d3548a": 1,
                "reaction_567453d0b73d6a82ac8c5abc": 1
            },
            "viewsUpdatedOn": 1665122412020,
            "uniqueReactions": [
                "5c090d96c2a9c2a674d35484",
                "5c090d96c2a9c2a674d35486",
                "5c090d96c2a9c2a674d35485",
                "567453d0b73d6a82ac8c5ab9",
                "5d9dd859f31791c942dc5b52",
                "5c090d96c2a9c2a674d3548b",
                "567453d0b73d6a82ac8c5abd",
                "5c090d96c2a9c2a674d3548a",
                "567453d0b73d6a82ac8c5abc"
            ],
            "reactionToCountMapUnique": {
                "reaction_5c090d96c2a9c2a674d35484": 1,
                "reaction_5c090d96c2a9c2a674d35486": 1,
                "reaction_5c090d96c2a9c2a674d35485": 1,
                "reaction_567453d0b73d6a82ac8c5ab9": 1,
                "reaction_5d9dd859f31791c942dc5b52": 1,
                "reaction_5c090d96c2a9c2a674d3548b": 1,
                "reaction_567453d0b73d6a82ac8c5abd": 1,
                "reaction_5c090d96c2a9c2a674d3548a": 1,
                "reaction_567453d0b73d6a82ac8c5abc": 1
            },
            "id": "62ea032816f9480a9dac4647"
        },
        {
            "audioUrls": {
                "male": "https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl32l3ghb014qesnve2uidtp1-male"
            },
            "reward": {
                "type": "xlm"
            },
            "backups": {
                "github": {
                    "_id": "623493ec6647c71acb641e5d",
                    "isActive": true,
                    "user": "61f829629030330a7b25a024",
                    "accessToken": "ghu_x90vHPCmgY7MifvYeC4XggOdD8ub1z39uzDD",
                    "installationId": "24219261",
                    "owner": "Abbhiishek",
                    "repository": "Blogs",
                    "githubUsername": "Abbhiishek",
                    "dateAdded": "2022-03-18T14:15:08.205Z",
                    "__v": 0,
                    "publication": "61f829982454810a8d407f2f"
                }
            },
            "sourcedFromGithub": false,
            "githubAsSourceMeta": null,
            "isAnonymous": false,
            "views": 105,
            "slugOverridden": false,
            "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1652333945864/KEk6agWtX.png",
            "autoGeneratedCover": "",
            "brief": "Overview\nDecorators are one of the most helpful and powerful tools of Python. These are used to modify the behavior of the particular function. Decorators provide the flexibility to wrap another function to expand the features and working of wrapped ...",
            "content": "<h1 id=\"heading-overview\">Overview</h1>\n<p>Decorators are one of the most helpful and powerful tools of Python. These are used to modify the behavior of the particular function. Decorators provide the flexibility to wrap another function to expand the features and working of wrapped function, without modifying the original called function.</p>\n<h1 id=\"heading-scope-of-the-article\">Scope of the Article</h1>\n<p>In this article , we are going to learn the following about the Decorators in Python</p>\n<h1 id=\"heading-introduction\">Introduction</h1>\n<p>Prerequisites for learning decorators</p>\n<ul>\n<li>Functions in python</li>\n<li>Decorators function with parameters</li>\n<li>Syntactic Decorator</li>\n<li>Reusing Decorator</li>\n<li>Decorator with arguments</li>\n<li>Returning Values from Decorated Functions</li>\n<li>Fancy Decorators</li>\n<li>Classes as decorators</li>\n<li>Chaining decorators</li>\n</ul>\n<h2 id=\"heading-introduction\">Introduction</h2>\n<p>A decorator is a design pattern in Python that allows a user to add new functionality to an existing function without modifying its state. Decorators are usually called before the definition of a function you want to decorate.</p>\n<p><em>Decorators are also used to gather objects and classes together in a larger structure while keeping it well organized and flexible.</em></p>\n<blockquote>\n<p>Just like a gift we decorate to add some nice perspective to it , we use Wrapper. In Case of Decorators we do the same with a piece of code using a function that takes another function.</p>\n</blockquote>\n<h2 id=\"heading-prerequisites-for-learning-decorators\">Prerequisites for learning decorators</h2>\n<p>In order to understand what are decorators and how they works , we first must be familiar with the following prerequisites to begin with</p>\n<ul>\n<li>Functions in Python</li>\n<li>First Class Citizen</li>\n<li>Higher Order Function</li>\n</ul>\n<h3 id=\"heading-functions-in-python\">Functions in python</h3>\n<p>Function in Python are First Class Citizen that means that :\nThey can be stored like variables.\nThey can be returned from functions as its values.\nThey can be passed as an argument inside Functions.\nThey just act like a variable in python.</p>\n<p>Let’s create a Simple function for Greeting People:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span>(<span class=\"hljs-params\">msg</span>):</span>\n  print(<span class=\"hljs-string\">f'Greeting:<span class=\"hljs-subst\">{msg}</span>'</span>)\n</code></pre>\n<p>It's a simple function that takes msg as an argument and prints it in formatted string.</p>\n<p>Now let's assume that we wanted to add some top layer functionality but don’t want to change the existing function for more readable code.We decide to make another function which shows user “Good Morning” “Good Evening” and “Good Afternoon” according to time of function call:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-comment\">#Function to greet people</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span>(<span class=\"hljs-params\">msg</span>):</span>\n print(<span class=\"hljs-string\">f'Greeting:<span class=\"hljs-subst\">{msg}</span>'</span>)\n<span class=\"hljs-comment\">#function to show user the current state of the day</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span> <span class=\"hljs-title\">with_state</span>(<span class=\"hljs-params\">greet, msg</span>):</span>\n currentTime=time.strftime(<span class=\"hljs-string\">'&amp;H:&amp;M'</span>)\n  <span class=\"hljs-keyword\">if</span> currentTime.hour&lt;<span class=\"hljs-number\">12</span>:\n       print(<span class=\"hljs-string\">'Good morning'</span>)\n  <span class=\"hljs-keyword\">if</span> currentTime.hour&gt;<span class=\"hljs-number\">12</span>:\n       print(<span class=\"hljs-string\">'Good afternoon'</span>)\n  <span class=\"hljs-keyword\">if</span> currentTime.hour&gt;<span class=\"hljs-number\">6</span>:\n       print( <span class=\"hljs-string\">'Good evening'</span>)\n <span class=\"hljs-comment\">#greet function is called inside this function</span>\ngreet(msg)\n</code></pre>\n<p>In the above code the greet function is called inside another function greet_with_state which is a Higher Order Function.</p>\n<h3 id=\"heading-higher-order-functions\">Higher Order Functions</h3>\n<p>There are the function that can:</p>\n<p>Accepts another function as argument\nReturn another Function </p>\n<blockquote>\n<p>HOF are used by decorators to create those complex structures.</p>\n</blockquote>\n<p>Let's take another example of Higher Order Function:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-comment\">#Function to add two numbers</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x, y</span>):</span>\n  returnx+y\n<span class=\"hljs-comment\">#Function to subtract two numbers</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sub</span>(<span class=\"hljs-params\">x, y</span>):</span>\n  returnx-y\n<span class=\"hljs-comment\">#Higher Order Function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">operate</span>(<span class=\"hljs-params\"> func, x, y</span>):</span>\n  result=func(x, y)\n  <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<h1 id=\"heading-decorators\">Decorators</h1>\n<p>Decorators supercharge a function and add extra functionality to it. It is simply a function that wraps another function and enhances it or modifies it.</p>\n<blockquote>\n<p>In layman's perspective it is something that  decorates something. Exactly, here as well decorators are something which decorates our function and add extra functionality to it.</p>\n</blockquote>\n<p><em>Now it is the time to create our own decorator</em></p>\n<pre><code class=\"lang-py\"><span class=\"hljs-comment\">#Adecortaor Function with func as argument</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">make_decorator</span>(<span class=\"hljs-params\"> func</span>):</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span> <span class=\"hljs-title\">func</span>():</span>\n        print(<span class=\"hljs-string\">\"I amadecorated\"</span>)\n        func()\n    <span class=\"hljs-comment\">#make_decorator function return the inner_func</span>\n    <span class=\"hljs-keyword\">return</span> inner_func\n<span class=\"hljs-comment\">#Anormal Function in Python</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">normal</span>():</span>\n    print(<span class=\"hljs-string\">\"I am normal Function in python\"</span>)\n</code></pre>\n<p>Here we have created a decorator function or a higher order function named as <strong>make_decorator</strong> which takes a func as parameters, and returns<strong> inner_func</strong> and acts like a wrapper function.</p>\n<p>There are many ways of passing the normal function into the <strong>make_decorator</strong> function. One of the common ways is to call the function simply as shown below:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-comment\">#A decorator Function with func as argument</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">make_decorator</span>(<span class=\"hljs-params\"> func</span>):</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner_func</span>():</span>\n        print(<span class=\"hljs-string\">\"I am decorated\"</span>)\n        func()\n    <span class=\"hljs-comment\"># make_decorator function return the inner_func</span>\n    <span class=\"hljs-keyword\">return</span> inner_func\n<span class=\"hljs-comment\">#Anormal Function in Python</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">normal</span>():</span>\n    print(<span class=\"hljs-string\">\"I am normal Function in python\"</span>)\n</code></pre>\n<p>We can see that the decorator function added some new functionality to the original function. This is similar to packing a gift or present. The decorator acts as a wrapper. The nature of the object that got decorated (actual normal function) does not alter. But now, it looks decorated.</p>\n<h2 id=\"heading-syntactic-decorator\">Syntactic Decorator</h2>\n<p>In python we have another way of implementing this kind of higher order function using Syntactic Decorators. To make use of a Decorator function in python we can use the @ symbol along with the name of the decorator function and place it above the definition of the function to be decorated. </p>\n<p><em>Syntactic is syntax within a programming language that is designed to make things easier to read or to express.</em></p>\n<p>For example:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-comment\">#Adecortaor Function with func as argument</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">make_decorator</span>(<span class=\"hljs-params\">func</span>):</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner_func</span>():</span>\n        print(<span class=\"hljs-string\">\"I amadecorated\"</span>)\n        func()\n    <span class=\"hljs-comment\">#make_decorator function return the inner func</span>\n    <span class=\"hljs-keyword\">return</span> inner_func\n<span class=\"hljs-comment\">#Anormal Function in Python with decortaor</span>\n<span class=\"hljs-meta\">@make_decorator</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">normal</span>():</span>\n    print(<span class=\"hljs-string\">\"I am normal Function in python\"</span>)\n<span class=\"hljs-comment\">#Calling the normal function within make_decorator function</span>\nnormal()\n</code></pre>\n<p>The decorator function seems to be very similar to other functions , but things change when we go with parameters in function calls.</p>\n<h2 id=\"heading-decorators-function-with-parameters\">Decorators function with parameters</h2>\n<p>Till now all the examples and use cases we discussed are good for the function which has no passing parameters in it. </p>\n<p>What if we have some function which arguments?</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-comment\">#additions function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x,y</span>):</span>\n  <span class=\"hljs-keyword\">return</span> x+y\n<span class=\"hljs-comment\">#subtraction function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x,y</span>):</span>\n  <span class=\"hljs-keyword\">return</span> x-y\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">calculator</span>(<span class=\"hljs-params\">func</span>):</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">cal</span>():</span>\n    print(<span class=\"hljs-string\">'Your are using a calculator'</span>)\n    result=func()\n    print(result)\n  <span class=\"hljs-keyword\">return</span> cal\n</code></pre>\n<p>In this scenario the Calculator function would work as we are not passing the arguments here. For that we also have to pass the same arguments in cal function inside the calculator function.</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-comment\">#additions function</span>\n<span class=\"hljs-meta\">@calculator</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x,y</span>):</span>\n  <span class=\"hljs-keyword\">return</span> x+y\n<span class=\"hljs-comment\">#subtraction function</span>\n<span class=\"hljs-meta\">@calculator</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sub</span>(<span class=\"hljs-params\">x,y</span>):</span>\n  <span class=\"hljs-keyword\">return</span> x-y\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">calculator</span>(<span class=\"hljs-params\">func</span>):</span>\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">cal</span>(<span class=\"hljs-params\">x, y</span>):</span>\n    print(<span class=\"hljs-string\">'Your are usingacalculator'</span>)\n    <span class=\"hljs-keyword\">return</span> func(x, y)\n  <span class=\"hljs-keyword\">return</span> cal\nsum=add(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>)\nMinus=sub( <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">10</span>)\n</code></pre>\n<p>This way one can pass parameters into a decorative function</p>\n<p>There may be case when you don't know how many positional arguments is to be passed and in that case <em>args, *</em>kwargs  are considered at that place.</p>\n<p>Lets have an example to understand it more easily:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-comment\">#Adecortaor Function with func as argument</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">my_decorator</span>(<span class=\"hljs-params\">func</span>):</span>\n    %<span class=\"hljs-number\">23</span> To deal <span class=\"hljs-keyword\">with</span> unknow number of positional arguments \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">wrap_func</span>(<span class=\"hljs-params\">*args, **kwargs</span>):</span>\n            print(<span class=\"hljs-string\">'***********'</span>)\n            func(*args, **kwargs)\n           print(<span class=\"hljs-string\">'***********'</span>)\n    <span class=\"hljs-keyword\">return</span> wrap_func\n<span class=\"hljs-meta\">@my_decorator</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello</span>(<span class=\"hljs-params\">greeting,msg</span>):</span>\n      <span class=\"hljs-comment\">#we are passing multiple arguments which may not be</span>\ndefined <span class=\"hljs-keyword\">in</span> decorator function\n      print(greeting, msg)\nhello( <span class=\"hljs-string\">'Hey Learner! '</span>, <span class=\"hljs-string\">'Welcome to HashNode'</span>)\n</code></pre>\n<h2 id=\"heading-reusing-decorator\">Reusing Decorator</h2>\n<p>Just like an ordinary function a Decorator function can be used multiple times.</p>\n<p>Let's create a decorator function with the following code:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run_twice</span>(<span class=\"hljs-params\"> func</span>):</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">wrapper</span>():</span>\n    <span class=\"hljs-comment\">#this wrapper runs twice</span>\n      func()\n      func()\n  <span class=\"hljs-keyword\">return</span> wrapper\n<span class=\"hljs-meta\">@run_twice</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span>():</span>\n  print( <span class=\"hljs-string\">'Hello'</span>)\ngreet()\n</code></pre>\n<p>The decorator run_twice  runs whatever the function is passed twice. This simply suggests that A decorator can be reused just like any other function.</p>\n<h2 id=\"heading-decorator-with-arguments\">Decorator with arguments</h2>\n<p>The same way a value is passed in function we can pass arguments to Decorator itself too.\nLet's try to create a Decorator with arguments with same functionality as above:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run_multiple</span>(<span class=\"hljs-params\">num</span>):</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">func</span>):</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">wrapper</span>( ):</span>\n      <span class=\"hljs-comment\">#this wrapper runs num times</span>\n      <span class=\"hljs-keyword\">for</span>-<span class=\"hljs-keyword\">in</span> range( num):\n         func()\n    <span class=\"hljs-keyword\">return</span> wrapper\n  <span class=\"hljs-keyword\">return</span> run\n<span class=\"hljs-meta\">@run_multiple(num=3)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span>():</span>\n print( <span class=\"hljs-string\">'Hello'</span>)\n\ngreet()\n</code></pre>\n<h2 id=\"heading-returning-values-from-decorated-functions\">Returning Values from Decorated Functions</h2>\n<p>Same as ordinary functions we can return something out of the wrapper function.\nConsider the following timing function, it prints a statement then returns the current time, we are decorating it with another function:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">my_decorator</span>(<span class=\"hljs-params\">func</span>):</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">wrapper</span>(<span class=\"hljs-params\"> <span class=\"hljs-number\">0</span>:\n    print(<span class=\"hljs-params\"><span class=\"hljs-string\">\"Time is \"</span></span>)\n    result=func(<span class=\"hljs-params\"></span>)\n    return result\n  return wrapper\n@my_decorator\ndef timing(<span class=\"hljs-params\"></span>):\n t1=time(<span class=\"hljs-params\"></span>)\n  return t1\ntime=timing(<span class=\"hljs-params\"></span>)\nprint(<span class=\"hljs-params\">time</span>)</span></span>\n</code></pre>\n<p>Here :</p>\n<ul>\n<li>Timing function :  It's getting decorated by my_decorator where the function is called and value is stored in the result variable which is again returned from the wrapper function.</li>\n</ul>\n<ul>\n<li>Return : The return in wrapper and my_decorator function is must otherwise the value is lost which was returned from the original timing Function.</li>\n</ul>\n<h2 id=\"heading-fancy-decorators\">Fancy Decorators</h2>\n<p>Till now, you have seen how to implement decorators on functions. You can also use decorators with classes, these are known as fancy decorators in Python. </p>\n<p>There are two possible ways for doing this:</p>\n<ul>\n<li>Decorating the methods of a class.</li>\n<li>Decorating a complete class.</li>\n</ul>\n<h2 id=\"heading-decorating-the-methods-of-a-class\">Decorating the Methods of a Class</h2>\n<p><em>Python provides the following built-in decorators to use with the methods of a class:</em></p>\n<ul>\n<li>@classmethod: It is used to create methods that are bound to the class and not the object of the class. It is shared among all the objects of that class. The class is passed as the first parameter to a class method. Class methods are often used as factory methods that can create specific instances of the class.</li>\n<li>@staticmethod: Static methods can't modify object state or class state as they don't have access to cls or self. They are just a part of the class namespace.</li>\n</ul>\n<pre><code class=\"lang-py\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>:</span>\n<span class=\"hljs-meta\">     @staticmethod</span>\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello</span>( ):</span>\n          print( <span class=\"hljs-string\">\"Hello Reader! How much you are liking this topic ?\"</span>)\nper=Person(O\nper.hello()\nPerson.hello()\n</code></pre>\n<ul>\n<li>@property: It is used to create getters and setters for class attributes.\nLet's see an example of all the three decorators:</li>\n</ul>\n<pre><code class=\"lang-py\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">_init_</span>(<span class=\"hljs-params\">self, name, level</span>):</span>\n         self.name name\n         self.level=level\n<span class=\"hljs-meta\">    @property</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">info</span>(<span class=\"hljs-params\">self</span>):</span>\n         <span class=\"hljs-keyword\">return</span> self.name+<span class=\"hljs-string\">\"Has Level\"</span>+self.level\nstu=Student(<span class=\"hljs-string\">\"Abhishek Kushwaha\"</span>,<span class=\"hljs-string\">\"10\"</span>)\nprint( <span class=\"hljs-string\">\"Name:\"</span>, stu.name)\nprint(<span class=\"hljs-string\">\"Level:\"</span>, stu.level)\nprint(stu.info)\n</code></pre>\n<h2 id=\"heading-decorating-a-complete-class\">Decorating a Complete Class</h2>\n<p>You can also use decorators on a whole class.\nWriting a class decorator is very similar to writing a function decorator. The only difference is that in this case the decorator will receive a class and not a function as an argument. Decorating a class does not decorate its methods. It's equivalent to the following:</p>\n<pre><code class=\"lang-py\">className = decorator(className)\n</code></pre>\n<p>Decorators can be used with the methods of a class or the whole class.</p>\n<h1 id=\"heading-classes-as-decorators\">Classes as Decorators</h1>\n<p>We can also use a class as a decorator also. Classes are the best option to store the state of data, so let's understand how to implement a decorator with a class that will record the number of Reader called a function.\nThere are two requirements to make a class as a decorator:\nThe <strong>init</strong> function needs to take a function as an argument.\nThe class needs to implement the <strong>call</strong> method. This is required because the class will be used as a decorator and a decorator must be a callable object.\nNow, let's implement the class:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CountCalls</span>:</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">_init_</span>(<span class=\"hljs-params\">self, func</span>):</span>\n    self.func func\n    self.num_reader=<span class=\"hljs-number\">0</span>\n    ACallable Object\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">_call_</span>(<span class=\"hljs-params\">self, *args, **kwargs</span>):</span>\n    self.num_reader +=<span class=\"hljs-number\">1</span>\n    print(<span class=\"hljs-string\">f\"hello Reader <span class=\"hljs-subst\">{self.num_reader}</span> of <span class=\"hljs-subst\">{self.func._name__!r}</span>\"</span>)\n    <span class=\"hljs-keyword\">return</span> self.func(*args, **kwargs)\n<span class=\"hljs-meta\">@CountCalls</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">Scaler</span>( ):</span>\n  print(<span class=\"hljs-string\">\"Thanks For Reading!\"</span>)\nScaler()\nScaler()\nScaler()\n</code></pre>\n<p>After decoration, the <strong>call</strong> method of the class is called instead of the Scaler method.\nClasses can also be used as decorators by implementing the <strong>call</strong> method and passing the function to <strong>init</strong> as an argument.</p>\n<h1 id=\"heading-chaining-decorators\">Chaining decorators</h1>\n<p>Chaining the decorators means that we can apply multiple decorators to a single function. These are also termed as nesting decorators.\nConsider the following two decorators:</p>\n<pre><code class=\"lang-py\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">split_string</span>(<span class=\"hljs-params\">func</span>):</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">wrapper</span>(<span class=\"hljs-params\">*args, **kwargs</span>):</span>\n    print(<span class=\"hljs-string\">\"This is Split Decorator\"</span>)\n    <span class=\"hljs-keyword\">return</span> func(*args, **kwargs).split()\n  <span class=\"hljs-keyword\">return</span> wrapper\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">to_upper</span>(<span class=\"hljs-params\">func</span>):</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">wrapper</span> (<span class=\"hljs-params\">*args, **kwargs</span>):</span>\n    print(<span class=\"hljs-string\">\"This is UpperCase Decorator\"</span>)\n    <span class=\"hljs-keyword\">return</span> func(*args, **kwargs).upper()\n  <span class=\"hljs-keyword\">return</span> wrapper\n<span class=\"hljs-meta\">@split_string</span>\n<span class=\"hljs-meta\">@to_upper</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span>(<span class=\"hljs-params\">name </span>):</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"Hello, <span class=\"hljs-subst\">{name}</span>!\"</span>\nprint(greet(<span class=\"hljs-string\">\"Abhishek\"</span>))\n</code></pre>\n<ul>\n<li>The first one takes a function that returns a string and then splits it into a list of words.</li>\n<li>The second one takes a function that returns a string and converts it into uppercase.</li>\n</ul>\n<p>We have used both the decorator on the single function. This way of applying multiple decorator in a single function is often called as <strong>Chaining</strong>.</p>\n<p>Output:</p>\n<pre><code class=\"lang-py\">This <span class=\"hljs-keyword\">is</span> Split Decorator\nThis <span class=\"hljs-keyword\">is</span> UpperCase Decorator\n[<span class=\"hljs-string\">'HELLO,'</span>, <span class=\"hljs-string\">'ABHISHEK!'</span>]\n</code></pre>\n<p><strong>Explanation:</strong>\nIn case of multiple decorator , the order matters as the one called first is executed first and so on.\nHere :</p>\n<ul>\n<li><p>Split_string is applied first which prints the statement : This is Split Decorator , after which the main function i.e greet is returned.</p>\n</li>\n<li><p>return func(<em>args, *</em>kwargs).split() - This statement makes the pointer to enter the to_upper decorator , where it prints the statement : This is UpperCase Decorator , after which the main function where upperCase object is used and value is returned.</p>\n</li>\n</ul>\n<p>You can achieve this by also using statement like this</p>\n<pre><code class=\"lang-py\">greet=split_string(to_upper(greet))\nprint(greet)\n</code></pre>\n<ul>\n<li>You can apply multiple decorators to a single function by stacking them on top of each other.</li>\n</ul>\n",
            "contentMarkdown": "# Overview\nDecorators are one of the most helpful and powerful tools of Python. These are used to modify the behavior of the particular function. Decorators provide the flexibility to wrap another function to expand the features and working of wrapped function, without modifying the original called function.\n\n# Scope of the Article\n\nIn this article , we are going to learn the following about the Decorators in Python\n# Introduction\nPrerequisites for learning decorators\n- Functions in python\n- Decorators function with parameters\n- Syntactic Decorator\n- Reusing Decorator\n- Decorator with arguments\n- Returning Values from Decorated Functions\n- Fancy Decorators\n- Classes as decorators\n- Chaining decorators\n\n## Introduction\nA decorator is a design pattern in Python that allows a user to add new functionality to an existing function without modifying its state. Decorators are usually called before the definition of a function you want to decorate.\n\n*Decorators are also used to gather objects and classes together in a larger structure while keeping it well organized and flexible.*\n\n> Just like a gift we decorate to add some nice perspective to it , we use Wrapper. In Case of Decorators we do the same with a piece of code using a function that takes another function.\n\n\n\n\n## Prerequisites for learning decorators\n\nIn order to understand what are decorators and how they works , we first must be familiar with the following prerequisites to begin with\n\n- Functions in Python\n- First Class Citizen\n- Higher Order Function\n\n### Functions in python\n\nFunction in Python are First Class Citizen that means that :\nThey can be stored like variables.\nThey can be returned from functions as its values.\nThey can be passed as an argument inside Functions.\nThey just act like a variable in python.\n\nLet’s create a Simple function for Greeting People:\n\n```py\ndef greet(msg):\n  print(f'Greeting:{msg}')\n```\n\n\nIt's a simple function that takes msg as an argument and prints it in formatted string.\n\nNow let's assume that we wanted to add some top layer functionality but don’t want to change the existing function for more readable code.We decide to make another function which shows user “Good Morning” “Good Evening” and “Good Afternoon” according to time of function call:\n\n```py\nfrom time import time\n#Function to greet people\ndef greet(msg):\n print(f'Greeting:{msg}')\n#function to show user the current state of the day\ndef greet with_state(greet, msg):\n currentTime=time.strftime('&H:&M')\n  if currentTime.hour<12:\n       print('Good morning')\n  if currentTime.hour>12:\n       print('Good afternoon')\n  if currentTime.hour>6:\n       print( 'Good evening')\n #greet function is called inside this function\ngreet(msg)\n```\n\nIn the above code the greet function is called inside another function greet_with_state which is a Higher Order Function.\n\n\n\n### Higher Order Functions\nThere are the function that can:\n\nAccepts another function as argument\nReturn another Function \n\n> HOF are used by decorators to create those complex structures.\n\nLet's take another example of Higher Order Function:\n```py\n#Function to add two numbers\ndef add(x, y):\n  returnx+y\n#Function to subtract two numbers\ndef sub(x, y):\n  returnx-y\n#Higher Order Function\ndef operate( func, x, y):\n  result=func(x, y)\n  return result\n```\n\n\n# Decorators\n\nDecorators supercharge a function and add extra functionality to it. It is simply a function that wraps another function and enhances it or modifies it.\n\n> In layman's perspective it is something that  decorates something. Exactly, here as well decorators are something which decorates our function and add extra functionality to it.\n\n\n\n*Now it is the time to create our own decorator*\n```py\n#Adecortaor Function with func as argument\ndef make_decorator( func):\n    def inner func():\n        print(\"I amadecorated\")\n        func()\n    #make_decorator function return the inner_func\n    return inner_func\n#Anormal Function in Python\ndef normal():\n    print(\"I am normal Function in python\")\n```\n\n\nHere we have created a decorator function or a higher order function named as **make_decorator** which takes a func as parameters, and returns** inner_func** and acts like a wrapper function.\n\nThere are many ways of passing the normal function into the **make_decorator** function. One of the common ways is to call the function simply as shown below:\n\n```py\n#A decorator Function with func as argument\ndef make_decorator( func):\n    def inner_func():\n        print(\"I am decorated\")\n        func()\n    # make_decorator function return the inner_func\n    return inner_func\n#Anormal Function in Python\ndef normal():\n    print(\"I am normal Function in python\")\n\n```\n\nWe can see that the decorator function added some new functionality to the original function. This is similar to packing a gift or present. The decorator acts as a wrapper. The nature of the object that got decorated (actual normal function) does not alter. But now, it looks decorated.\n\n\n## Syntactic Decorator\n\nIn python we have another way of implementing this kind of higher order function using Syntactic Decorators. To make use of a Decorator function in python we can use the @ symbol along with the name of the decorator function and place it above the definition of the function to be decorated. \n\n*Syntactic is syntax within a programming language that is designed to make things easier to read or to express.*\n\nFor example:\n\n```py\n#Adecortaor Function with func as argument\ndef make_decorator(func):\n    def inner_func():\n        print(\"I amadecorated\")\n        func()\n    #make_decorator function return the inner func\n    return inner_func\n#Anormal Function in Python with decortaor\n@make_decorator\ndef normal():\n    print(\"I am normal Function in python\")\n#Calling the normal function within make_decorator function\nnormal()\n```\n\n\nThe decorator function seems to be very similar to other functions , but things change when we go with parameters in function calls.\n\n## Decorators function with parameters\n\nTill now all the examples and use cases we discussed are good for the function which has no passing parameters in it. \n\nWhat if we have some function which arguments?\n\n```py\n#additions function\ndef add(x,y):\n  return x+y\n#subtraction function\ndef add(x,y):\n  return x-y\ndef calculator(func):\n  def cal():\n    print('Your are using a calculator')\n    result=func()\n    print(result)\n  return cal\n```\n\nIn this scenario the Calculator function would work as we are not passing the arguments here. For that we also have to pass the same arguments in cal function inside the calculator function.\n\n```py\n#additions function\n@calculator\ndef add(x,y):\n  return x+y\n#subtraction function\n@calculator\ndef sub(x,y):\n  return x-y\ndef calculator(func):\n def cal(x, y):\n    print('Your are usingacalculator')\n    return func(x, y)\n  return cal\nsum=add(10,20)\nMinus=sub( 20, 10)\n```\n\n\nThis way one can pass parameters into a decorative function\n\n\nThere may be case when you don't know how many positional arguments is to be passed and in that case *args, **kwargs  are considered at that place.\n\nLets have an example to understand it more easily:\n\n```py\n#Adecortaor Function with func as argument\ndef my_decorator(func):\n    %23 To deal with unknow number of positional arguments \n    def wrap_func(*args, **kwargs):\n            print('***********')\n            func(*args, **kwargs)\n           print('***********')\n    return wrap_func\n@my_decorator\ndef hello(greeting,msg):\n      #we are passing multiple arguments which may not be\ndefined in decorator function\n      print(greeting, msg)\nhello( 'Hey Learner! ', 'Welcome to HashNode')\n```\n\n\n## Reusing Decorator\nJust like an ordinary function a Decorator function can be used multiple times.\n\nLet's create a decorator function with the following code:\n\n```py\ndef run_twice( func):\n  def wrapper():\n    #this wrapper runs twice\n      func()\n      func()\n  return wrapper\n@run_twice\ndef greet():\n  print( 'Hello')\ngreet()\n```\n\n\nThe decorator run_twice  runs whatever the function is passed twice. This simply suggests that A decorator can be reused just like any other function.\n\n## Decorator with arguments\n\nThe same way a value is passed in function we can pass arguments to Decorator itself too.\nLet's try to create a Decorator with arguments with same functionality as above:\n\n```py\ndef run_multiple(num):\n  def run(func):\n    def wrapper( ):\n      #this wrapper runs num times\n      for-in range( num):\n         func()\n    return wrapper\n  return run\n@run_multiple(num=3)\ndef greet():\n print( 'Hello')\n                  \ngreet()\n```\n\n\n\n## Returning Values from Decorated Functions\n\nSame as ordinary functions we can return something out of the wrapper function.\nConsider the following timing function, it prints a statement then returns the current time, we are decorating it with another function:\n\n```py\nfrom time import time\ndef my_decorator(func):\n  def wrapper( 0:\n    print(\"Time is \")\n    result=func()\n    return result\n  return wrapper\n@my_decorator\ndef timing():\n t1=time()\n  return t1\ntime=timing()\nprint(time)\n```\n     \n\nHere :\n\n- Timing function :  It's getting decorated by my_decorator where the function is called and value is stored in the result variable which is again returned from the wrapper function.\n\n\n- Return : The return in wrapper and my_decorator function is must otherwise the value is lost which was returned from the original timing Function.\n\n## Fancy Decorators\n\nTill now, you have seen how to implement decorators on functions. You can also use decorators with classes, these are known as fancy decorators in Python. \n\nThere are two possible ways for doing this:\n\n- Decorating the methods of a class.\n- Decorating a complete class.\n\n## Decorating the Methods of a Class\n\n*Python provides the following built-in decorators to use with the methods of a class:*\n\n- @classmethod: It is used to create methods that are bound to the class and not the object of the class. It is shared among all the objects of that class. The class is passed as the first parameter to a class method. Class methods are often used as factory methods that can create specific instances of the class.\n- @staticmethod: Static methods can't modify object state or class state as they don't have access to cls or self. They are just a part of the class namespace.\n\n```py\nclass Person:\n     @staticmethod\n     def hello( ):\n          print( \"Hello Reader! How much you are liking this topic ?\")\nper=Person(O\nper.hello()\nPerson.hello()\n```\n\n- @property: It is used to create getters and setters for class attributes.\nLet's see an example of all the three decorators:\n\n```py\nclass Student:\n    def _init_(self, name, level):\n         self.name name\n         self.level=level\n    @property\n    def info(self):\n         return self.name+\"Has Level\"+self.level\nstu=Student(\"Abhishek Kushwaha\",\"10\")\nprint( \"Name:\", stu.name)\nprint(\"Level:\", stu.level)\nprint(stu.info)\n```\n\n## Decorating a Complete Class\n\nYou can also use decorators on a whole class.\nWriting a class decorator is very similar to writing a function decorator. The only difference is that in this case the decorator will receive a class and not a function as an argument. Decorating a class does not decorate its methods. It's equivalent to the following:\n\n```py\nclassName = decorator(className)\n```\n\n\nDecorators can be used with the methods of a class or the whole class.\n\n# Classes as Decorators\n\nWe can also use a class as a decorator also. Classes are the best option to store the state of data, so let's understand how to implement a decorator with a class that will record the number of Reader called a function.\nThere are two requirements to make a class as a decorator:\nThe __init__ function needs to take a function as an argument.\nThe class needs to implement the __call__ method. This is required because the class will be used as a decorator and a decorator must be a callable object.\nNow, let's implement the class:\n\n```py\nclass CountCalls:\n  def _init_(self, func):\n    self.func func\n    self.num_reader=0\n    ACallable Object\n  def _call_(self, *args, **kwargs):\n    self.num_reader +=1\n    print(f\"hello Reader {self.num_reader} of {self.func._name__!r}\")\n    return self.func(*args, **kwargs)\n@CountCalls\ndef Scaler( ):\n  print(\"Thanks For Reading!\")\nScaler()\nScaler()\nScaler()\n```\n\n\nAfter decoration, the __call__ method of the class is called instead of the Scaler method.\nClasses can also be used as decorators by implementing the __call__ method and passing the function to __init__ as an argument.\n\n\n\n\n\n\n# Chaining decorators\n\nChaining the decorators means that we can apply multiple decorators to a single function. These are also termed as nesting decorators.\nConsider the following two decorators:\n\n```py\ndef split_string(func):\n  def wrapper(*args, **kwargs):\n    print(\"This is Split Decorator\")\n    return func(*args, **kwargs).split()\n  return wrapper\ndef to_upper(func):\n  def wrapper (*args, **kwargs):\n    print(\"This is UpperCase Decorator\")\n    return func(*args, **kwargs).upper()\n  return wrapper\n@split_string\n@to_upper\ndef greet(name ):\n  return f\"Hello, {name}!\"\nprint(greet(\"Abhishek\"))\n```\n\n\n- The first one takes a function that returns a string and then splits it into a list of words.\n- The second one takes a function that returns a string and converts it into uppercase.\n\nWe have used both the decorator on the single function. This way of applying multiple decorator in a single function is often called as **Chaining**.\n\nOutput:\n\n```py\nThis is Split Decorator\nThis is UpperCase Decorator\n['HELLO,', 'ABHISHEK!']\n```\n\n\n\n**Explanation:**\nIn case of multiple decorator , the order matters as the one called first is executed first and so on.\nHere :\n\n- Split_string is applied first which prints the statement : This is Split Decorator , after which the main function i.e greet is returned.\n\n- return func(*args, **kwargs).split() - This statement makes the pointer to enter the to_upper decorator , where it prints the statement : This is UpperCase Decorator , after which the main function where upperCase object is used and value is returned.\n\n\nYou can achieve this by also using statement like this\n\n```py\ngreet=split_string(to_upper(greet))\nprint(greet)\n```\n\n\n- You can apply multiple decorators to a single function by stacking them on top of each other.",
            "hasPolls": false,
            "totalPollVotes": 0,
            "upvotes": 0,
            "downvotes": 0,
            "tags": [
                "56744721958ef13879b94d67",
                "5f3867d1c4d5973f55c90b8b",
                "56744723958ef13879b952b6"
            ],
            "untaggedFrom": [

            ],
            "upvotedBy": [

            ],
            "downvotedBy": [

            ],
            "popularity": 5407.1768,
            "responses": [

            ],
            "responseCount": 0,
            "replyCount": 0,
            "followers": [

            ],
            "isActive": true,
            "isFeatured": false,
            "isEngaging": false,
            "answeredByTarget": false,
            "inviters": [

            ],
            "isDelisted": false,
            "isNotified": false,
            "duplicatePosts": [

            ],
            "numCollapsed": 0,
            "hasReward": false,
            "bookmarkedIn": [

            ],
            "similarPostIds": [

            ],
            "reactions": [
                "5c090d96c2a9c2a674d3548b",
                "567453d0b73d6a82ac8c5abd",
                "5c090d96c2a9c2a674d35486",
                "5c090d96c2a9c2a674d35488",
                "567453d0b73d6a82ac8c5ab9",
                "5d9dd859f31791c942dc5b52",
                "5c090d96c2a9c2a674d3548a",
                "567453d0b73d6a82ac8c5abc",
                "5c090d96c2a9c2a674d35485",
                "5c090d96c2a9c2a674d35484"
            ],
            "totalReactions": 10,
            "reactionsByCurrentUser": [

            ],
            "isPinnedToBlog": false,
            "disableComments": false,
            "commentsPaused": false,
            "hasLatex": false,
            "syncAlgolia": true,
            "enableToc": true,
            "toc": [
                [{
                    "id": "1682ad49-d312-4a9d-a5fe-516706a6a2b9",
                    "level": 1,
                    "previousLevel": null,
                    "parentId": null,
                    "slug": "overview",
                    "title": "Overview"
                }],
                [{
                    "id": "64f44f1a-e3ce-496d-b20f-1b070849c693",
                    "level": 1,
                    "previousLevel": 1,
                    "parentId": null,
                    "slug": "scope-of-the-article",
                    "title": "Scope of the Article"
                }],
                [{
                    "id": "69b03dee-0d0e-492f-b695-ce2a5d871af6",
                    "level": 1,
                    "previousLevel": 1,
                    "parentId": null,
                    "slug": "introduction",
                    "title": "Introduction"
                }],
                [{
                    "id": "9cda382d-a045-4b69-a154-57437faea192",
                    "level": 2,
                    "previousLevel": 1,
                    "parentId": "69b03dee-0d0e-492f-b695-ce2a5d871af6",
                    "slug": "introduction",
                    "title": "Introduction"
                }],
                [{
                    "id": "4255ddee-c4a9-4a3a-8c2c-f9aec468297a",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": "69b03dee-0d0e-492f-b695-ce2a5d871af6",
                    "slug": "prerequisites-for-learning-decorators",
                    "title": "Prerequisites for learning decorators"
                }],
                [{
                    "id": "56cd4241-480e-462b-83e6-60f18ff5850c",
                    "level": 3,
                    "previousLevel": 2,
                    "parentId": "4255ddee-c4a9-4a3a-8c2c-f9aec468297a",
                    "slug": "functions-in-python",
                    "title": "Functions in python"
                }],
                [{
                    "id": "ee6db006-0727-436c-b72e-78a0ab2319f9",
                    "level": 3,
                    "previousLevel": 3,
                    "parentId": "4255ddee-c4a9-4a3a-8c2c-f9aec468297a",
                    "slug": "higher-order-functions",
                    "title": "Higher Order Functions"
                }],
                [{
                    "id": "d861f582-a2ab-48cc-99f1-d3181b44bff0",
                    "level": 1,
                    "previousLevel": 3,
                    "parentId": null,
                    "slug": "decorators",
                    "title": "Decorators"
                }],
                [{
                    "id": "ee28b145-dade-49d7-ac25-44995aa77015",
                    "level": 2,
                    "previousLevel": 1,
                    "parentId": "d861f582-a2ab-48cc-99f1-d3181b44bff0",
                    "slug": "syntactic-decorator",
                    "title": "Syntactic Decorator"
                }],
                [{
                    "id": "8a7d14a7-3c1c-4928-8293-14bbc643ab3a",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": "d861f582-a2ab-48cc-99f1-d3181b44bff0",
                    "slug": "decorators-function-with-parameters",
                    "title": "Decorators function with parameters"
                }],
                [{
                    "id": "6a03a322-b3da-476e-a844-28462fd3acdc",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": "d861f582-a2ab-48cc-99f1-d3181b44bff0",
                    "slug": "reusing-decorator",
                    "title": "Reusing Decorator"
                }],
                [{
                    "id": "09ed46a5-f682-4ac6-9b18-315977d80986",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": "d861f582-a2ab-48cc-99f1-d3181b44bff0",
                    "slug": "decorator-with-arguments",
                    "title": "Decorator with arguments"
                }],
                [{
                    "id": "94bc6822-0167-45a9-bf2e-5d7991f92330",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": "d861f582-a2ab-48cc-99f1-d3181b44bff0",
                    "slug": "returning-values-from-decorated-functions",
                    "title": "Returning Values from Decorated Functions"
                }],
                [{
                    "id": "9d367c2c-35df-475e-acfa-c9b95a0a1485",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": "d861f582-a2ab-48cc-99f1-d3181b44bff0",
                    "slug": "fancy-decorators",
                    "title": "Fancy Decorators"
                }],
                [{
                    "id": "9395e501-e78b-427d-9291-b51b0131b519",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": "d861f582-a2ab-48cc-99f1-d3181b44bff0",
                    "slug": "decorating-the-methods-of-a-class",
                    "title": "Decorating the Methods of a Class"
                }],
                [{
                    "id": "6cfe1331-ff17-40ca-ac00-65c17fa4a123",
                    "level": 2,
                    "previousLevel": 2,
                    "parentId": "d861f582-a2ab-48cc-99f1-d3181b44bff0",
                    "slug": "decorating-a-complete-class",
                    "title": "Decorating a Complete Class"
                }],
                [{
                    "id": "2d4cdf4f-228f-426e-995d-528a9b813f81",
                    "level": 1,
                    "previousLevel": 2,
                    "parentId": null,
                    "slug": "classes-as-decorators",
                    "title": "Classes as Decorators"
                }],
                [{
                    "id": "6dfd36c8-03bd-4527-bf5b-b5314f588aee",
                    "level": 1,
                    "previousLevel": 1,
                    "parentId": null,
                    "slug": "chaining-decorators",
                    "title": "Chaining decorators"
                }]
            ],
            "numUniqueUsersWhoReacted": 0,
            "_id": "627c9e4e4903bec29b585f50",
            "title": "Decorators in Python",
            "subtitle": "Decorators are one of the most helpful and powerful tools of Python. These are used to modify the behavior of the particular function.",
            "type": "story",
            "coverImageAttribution": "",
            "coverImagePhotographer": "",
            "isCoverAttributionHidden": false,
            "ogImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1652334138621/rME4mpMQB.png",
            "metaTitle": "Decorators in Python How to understand decorator",
            "metaDescription": "Decorators are one of the most helpful and powerful tools of Python. These are used to modify the behavior of the particular function",
            "isRepublished": false,
            "originalArticleURL": "",
            "partOfPublication": true,
            "publication": "61f829982454810a8d407f2f",
            "slug": "decorators-in-python",
            "importedFromMedium": false,
            "dateAdded": "2022-05-12T05:42:38.193Z",
            "hasCustomDate": false,
            "hasScheduledDate": false,
            "stickCoverToBottom": false,
            "series": "627a9c5d199297a9505d469d",
            "pollOptions": [

            ],
            "badges": [

            ],
            "questionReplies": [

            ],
            "contributors": [

            ],
            "cuid": "cl32l3ghb014qesnve2uidtp1",
            "author": "61f829629030330a7b25a024",
            "followersCount": 1,
            "draft": "627a9256f543e7a92b803974",
            "hasPinnedTag": false,
            "readTime": 10,
            "__v": 3,
            "reactionToCountMap": {
                "reaction_5c090d96c2a9c2a674d3548b": 1,
                "reaction_567453d0b73d6a82ac8c5abd": 1,
                "reaction_5c090d96c2a9c2a674d35486": 1,
                "reaction_5c090d96c2a9c2a674d35488": 1,
                "reaction_567453d0b73d6a82ac8c5ab9": 1,
                "reaction_5d9dd859f31791c942dc5b52": 1,
                "reaction_5c090d96c2a9c2a674d3548a": 1,
                "reaction_567453d0b73d6a82ac8c5abc": 1,
                "reaction_5c090d96c2a9c2a674d35485": 1,
                "reaction_5c090d96c2a9c2a674d35484": 1
            },
            "viewsUpdatedOn": 1665122412020,
            "dateUpdated": "2022-05-13T15:48:49.352Z",
            "pendingPublicationApproval": false,
            "uniqueReactions": [
                "5c090d96c2a9c2a674d3548b",
                "567453d0b73d6a82ac8c5abd",
                "5c090d96c2a9c2a674d35486",
                "5c090d96c2a9c2a674d35488",
                "567453d0b73d6a82ac8c5ab9",
                "5d9dd859f31791c942dc5b52",
                "5c090d96c2a9c2a674d3548a",
                "567453d0b73d6a82ac8c5abc",
                "5c090d96c2a9c2a674d35485",
                "5c090d96c2a9c2a674d35484"
            ],
            "reactionToCountMapUnique": {
                "reaction_5c090d96c2a9c2a674d3548b": 1,
                "reaction_567453d0b73d6a82ac8c5abd": 1,
                "reaction_5c090d96c2a9c2a674d35486": 1,
                "reaction_5c090d96c2a9c2a674d35488": 1,
                "reaction_567453d0b73d6a82ac8c5ab9": 1,
                "reaction_5d9dd859f31791c942dc5b52": 1,
                "reaction_5c090d96c2a9c2a674d3548a": 1,
                "reaction_567453d0b73d6a82ac8c5abc": 1,
                "reaction_5c090d96c2a9c2a674d35485": 1,
                "reaction_5c090d96c2a9c2a674d35484": 1
            },
            "id": "627c9e4e4903bec29b585f50"
        },
        {
            "audioUrls": {
                "male": "https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl30exdhg00uodwnv41f6dtc9-male"
            },
            "reward": {
                "type": "xlm"
            },
            "backups": {
                "github": {
                    "_id": "623493ec6647c71acb641e5d",
                    "isActive": true,
                    "user": "61f829629030330a7b25a024",
                    "accessToken": "ghu_x90vHPCmgY7MifvYeC4XggOdD8ub1z39uzDD",
                    "installationId": "24219261",
                    "owner": "Abbhiishek",
                    "repository": "Blogs",
                    "githubUsername": "Abbhiishek",
                    "dateAdded": "2022-03-18T14:15:08.205Z",
                    "__v": 0,
                    "publication": "61f829982454810a8d407f2f"
                }
            },
            "sourcedFromGithub": false,
            "githubAsSourceMeta": null,
            "isAnonymous": false,
            "views": 6,
            "slugOverridden": false,
            "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1647612368311/VXshLUOs3.png",
            "autoGeneratedCover": "",
            "brief": "Internet\nThe Internet is a global network of computers connected to each other which communicate through a standardized set of protocols.\n\nThe internet is the world’s most popular computer network. It began as an academic research project in 1969, an...",
            "content": "<h1 id=\"heading-internet\">Internet</h1>\n<p>The Internet is a global network of computers connected to each other which communicate through a standardized set of protocols.</p>\n<ul>\n<li><p>The internet is the world’s most popular computer network. It began as an academic research project in 1969, and became a global commercial network in the 1990s. Today it is used by more than 2 billion people around the world.</p>\n</li>\n<li><p>The internet is notable for its decentralization. No one owns the internet or controls who can connect to it. Instead, thousands of different organizations operate their own networks and negotiate voluntary interconnection agreements.</p>\n</li>\n<li><p>Most people access internet content using a web browser. Indeed, the web has become so popular that many people incorrectly treat the internet and the web as synonymous. But in reality, the web is just one of many internet applications. Other popular Internet applications include email and BitTorrent.</p>\n</li>\n</ul>\n<h3 id=\"heading-whats-an-ip-address\">What’s an IP address?</h3>\n<p>Internet Protocol addresses are numbers that computers use to identify each other on the internet. For example, an IP address for vox.com is 216.146.46.10 &amp; for codeforcommunity.codes is 185.199.108.153</p>\n<p>An ICANN department known as the Internet Assigned Numbers Authority is responsible for distributing IP addresses to ensure that two different organizations don’t use the same address.</p>\n<h3 id=\"heading-what-is-ipv6\">What is IPv6?</h3>\n<ul>\n<li><p>The current internet standard, known as IPv4, only allows for about 4 billion IP addresses. This was considered a very big number in the 1970s, but today, the supply of IPv4 addresses is nearly exhausted.</p>\n</li>\n<li><p>So internet engineers have developed a new standard called IPv6. IPv6 allows for a mind-boggling number of unique addresses <em>the exact figure is 39 digits long</em> ensuring that the world will never again run out.</p>\n</li>\n<li><p>At first, the transition to IPv6 was slow. Technical work on the standard was completed in the 1990s, but the internet community faced a serious chicken-and-egg problem: as long as most people were using IPv4, there was little incentive for anyone to switch to IPv6.</p>\n</li>\n<li><p>But as IPv4 addresses became scarce, IPv6 adoption accelerated. The fraction of users who connected to Google via IPv6 grew from 1 percent at the beginning of 2013 to 6 percent in mid-2015.</p>\n</li>\n</ul>\n",
            "contentMarkdown": "# Internet\n\nThe Internet is a global network of computers connected to each other which communicate through a standardized set of protocols.\n\n\n\n- The internet is the world’s most popular computer network. It began as an academic research project in 1969, and became a global commercial network in the 1990s. Today it is used by more than 2 billion people around the world.\n\n- The internet is notable for its decentralization. No one owns the internet or controls who can connect to it. Instead, thousands of different organizations operate their own networks and negotiate voluntary interconnection agreements.\n\n- Most people access internet content using a web browser. Indeed, the web has become so popular that many people incorrectly treat the internet and the web as synonymous. But in reality, the web is just one of many internet applications. Other popular Internet applications include email and BitTorrent.\n\n\n### What’s an IP address?\n\nInternet Protocol addresses are numbers that computers use to identify each other on the internet. For example, an IP address for vox.com is 216.146.46.10 & for codeforcommunity.codes is 185.199.108.153\n\nAn ICANN department known as the Internet Assigned Numbers Authority is responsible for distributing IP addresses to ensure that two different organizations don’t use the same address.\n\n### What is IPv6?\n\n- The current internet standard, known as IPv4, only allows for about 4 billion IP addresses. This was considered a very big number in the 1970s, but today, the supply of IPv4 addresses is nearly exhausted.\n\n- So internet engineers have developed a new standard called IPv6. IPv6 allows for a mind-boggling number of unique addresses *the exact figure is 39 digits long* ensuring that the world will never again run out.\n\n- At first, the transition to IPv6 was slow. Technical work on the standard was completed in the 1990s, but the internet community faced a serious chicken-and-egg problem: as long as most people were using IPv4, there was little incentive for anyone to switch to IPv6.\n\n- But as IPv4 addresses became scarce, IPv6 adoption accelerated. The fraction of users who connected to Google via IPv6 grew from 1 percent at the beginning of 2013 to 6 percent in mid-2015.",
            "hasPolls": false,
            "totalPollVotes": 0,
            "upvotes": 0,
            "downvotes": 0,
            "tags": [
                "56f260f15ec781bb472f83af",
                "56744722958ef13879b94f40",
                "56744722958ef13879b94f1b"
            ],
            "untaggedFrom": [

            ],
            "upvotedBy": [

            ],
            "downvotedBy": [

            ],
            "popularity": 5404.2592,
            "responses": [

            ],
            "responseCount": 0,
            "replyCount": 0,
            "followers": [

            ],
            "isActive": true,
            "isFeatured": false,
            "isEngaging": false,
            "answeredByTarget": false,
            "inviters": [

            ],
            "isDelisted": true,
            "isNotified": false,
            "duplicatePosts": [

            ],
            "numCollapsed": 0,
            "hasReward": false,
            "bookmarkedIn": [

            ],
            "similarPostIds": [

            ],
            "reactions": [
                "5c090d96c2a9c2a674d35484",
                "5d9dd859f31791c942dc5b52"
            ],
            "totalReactions": 2,
            "reactionsByCurrentUser": [

            ],
            "isPinnedToBlog": false,
            "disableComments": false,
            "commentsPaused": false,
            "hasLatex": false,
            "syncAlgolia": true,
            "enableToc": false,
            "toc": [

            ],
            "numUniqueUsersWhoReacted": 0,
            "_id": "627a9d70f543e7a92b803bde",
            "title": "Learn The Basics Of Web -- Internet Fundamental",
            "subtitle": "Learning The basics of web is important so that you have a clear idea how things work in backend",
            "type": "story",
            "coverImageAttribution": "",
            "coverImagePhotographer": "",
            "isCoverAttributionHidden": false,
            "ogImage": "",
            "metaTitle": "Learn The Basics Of Web -- Internet Fundamental",
            "metaDescription": "Learning The basics of web is important so that you have a clear idea how things work in backend",
            "isRepublished": false,
            "originalArticleURL": "",
            "partOfPublication": true,
            "publication": "61f829982454810a8d407f2f",
            "slug": "learn-the-basics-of-web-internet-fundamental",
            "importedFromMedium": false,
            "dateAdded": "2022-05-10T17:14:24.742Z",
            "hasCustomDate": false,
            "stickCoverToBottom": true,
            "series": "6258434652fb7bd53380b2fb",
            "pollOptions": [

            ],
            "badges": [

            ],
            "questionReplies": [

            ],
            "contributors": [

            ],
            "cuid": "cl30exdhg00uodwnv41f6dtc9",
            "author": "61f829629030330a7b25a024",
            "followersCount": 1,
            "draft": "623491d4bef4c71aa6f0e3a8",
            "hasPinnedTag": false,
            "readTime": 2,
            "__v": 0,
            "reactionToCountMap": {
                "reaction_5c090d96c2a9c2a674d35484": 1,
                "reaction_5d9dd859f31791c942dc5b52": 1
            },
            "viewsUpdatedOn": 1661747414143,
            "uniqueReactions": [
                "5c090d96c2a9c2a674d35484",
                "5d9dd859f31791c942dc5b52"
            ],
            "reactionToCountMapUnique": {
                "reaction_5c090d96c2a9c2a674d35484": 1,
                "reaction_5d9dd859f31791c942dc5b52": 1
            },
            "id": "627a9d70f543e7a92b803bde"
        },
        {
            "audioUrls": {
                "male": "https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl0wi7txd059hj6nv5beu10bu-male"
            },
            "reward": {
                "type": "xlm"
            },
            "backups": {
                "github": {
                    "owner": "Abbhiishek",
                    "repository": "Blogs"
                }
            },
            "sourcedFromGithub": false,
            "githubAsSourceMeta": null,
            "isAnonymous": false,
            "views": 30,
            "slugOverridden": false,
            "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1647613689258/kePd3cJPs.png",
            "autoGeneratedCover": "",
            "brief": "Whether you’re looking to begin coding as a hobby, a new career, or just to enhance your current role, the first thing you’ll have to do is decide which programming language you want to start with.\nhonestly, there is no right answer. Choosing a first...",
            "content": "<p>Whether you’re looking to begin coding as a hobby, a new career, or just to enhance your current role, the first thing you’ll have to do is decide which programming language you want to start with.</p>\n<p>honestly, there is no right answer. Choosing a first language will depend on what kind of projects you want to work on, who you want to work for, or how easy you want it to be. Hopefully, this guide will help give you a better idea of which one you should pursue.</p>\n<p><strong><a target=\"_blank\" href=\"https://www.python.org/\">Python</a></strong></p>\n<p><strong>Python </strong>is always recommended if you’re looking for an easy and even fun programming language to learn first. Rather than having to jump into strict syntax rules, Python reads like English and is simple to understand for someone who’s new to programming. This allows you to obtain a basic knowledge of coding practices without having to obsess over smaller details that are often important in other languages.</p>\n<p>Python also is ideal for <strong>web development</strong>, <strong>graphic user interfaces (GUIs)</strong>, and <strong>software development</strong>. In fact, it was used to build Instagram, YouTube, and Spotify, so it’s clearly in demand among employers in addition to having a faster onboarding.</p>\n<p>Though it has it’s advantages, <em>Python is often thought of as a slow language that requires more testing and is not as practical for developing mobile apps as other languages.</em> </p>\n<p><strong><a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/\">C#</a></strong></p>\n<p>While C is one of the more difficult languages to learn, it’s still an excellent first language pick up because almost all programming languages are implemented in it. This means that once you learn C, it’ll be simple to learn more languages like C++ and C#.</p>\n<p>Because C is more “machine-level”, learning it is great for teaching you how a computer functions. Software Developer Joel Spolsky compares it to understanding basic anatomy before becoming a medical doctor, making it the best way to code efficiently.</p>\n<p>In this way, C is an exceptional choice to become a master coder and a talented developer from the get-go if you’re willing to take on the challenge.</p>\n<p><a target=\"_blank\" href=\"https://www.java.com/en/\"><strong>Java</strong></a></p>\n<p>Java is an object-oriented and feature-heavy programming language that’s in high demand. It’s been built under the premise of “Write once, run anywhere,” meaning that it can be written on any device and work cross-platform.</p>\n<p>This makes it one of the most desired (yes, we mean high-paid) language skills. So, if you’re looking to learn a language that’s going to get you a great career, this might be the one, especially since top employers for Java programmers including Ebay, Amazon, and IBM.</p>\n<p>Additionally, Java is often used for Android and iOS app development, as it’s the basis of the Android operating system, which makes it one of the best choices if you want to build mobile apps.</p>\n<p>While it may not be as easy to pick up as Python, Java is a high-level language, and so it’s still relatively beginner-friendly. However, it has a slow startup and will take beginners much longer to deploy their first project.</p>\n<p><a target=\"_blank\" href=\"https://www.javascript.com/\"><strong>JavaScript</strong></a></p>\n<p>JavaScript is another incredibly popular language. Many websites that you use every day rely on JavaScript including Twitter, Gmail, Spotify, Facebook, and Instagram according to General Assembly.</p>\n<p>Additionally, it’s a must-have when adding interactivity to websites because it communicates with HTML and CSS. This makes it essential for front-end development and consumer-facing websites while becoming increasingly important in back-end development and growing in demand all the time. Because of its popularity, JavaScript is also the leading the charge in test automation frameworks, being the backbone of frameworks like Protractor and Nightwatch.JS.</p>\n<p>There’s nothing to install with JavaScript since it’s already built into browsers, so it’s the easiest language to get started with in terms of set-up. The con here is that this means it’s interpreted differently across browsers (you’ll need to do some extra cross-browser testing) and may have deficiencies in responsive design compared to server-side scripts.</p>\n<p>Again, while it’s not the most difficult to learn, it certainly isn’t as easy as Python. If Javascript does seem difficult at first, try out this Javascript tutorial that’s so easy a cat could do it.</p>\n<p><a target=\"_blank\" href=\"https://rubyonrails.org/\"><strong>Ruby</strong></a></p>\n<p>Ruby is similar to Python in that it’s one of the easiest languages for people with no prior programming experience to read. You don’t need to know a ton of commands or programming vocabulary to learn it, and it has a multitude of libraries and tools that come in handy.</p>\n<p>A big reason people like Ruby is because of the awesome full-stack framework, Ruby on Rails, which is becoming increasingly popular among startups and enterprise solutions. Airbnb, Groupon, Hulu, and Soundcloud are just a few of the websites that were built with Ruby on Rails, and Ruby has quite the active developer community today.</p>\n<p>The reason it’s so popular for small businesses, however, is often one of the many criticisms against it. Ruby can have the challenge of scalability across a large system and may have a hard time with performance on larger websites. Additionally, while Ruby is certainly easy to learn, you’ll find most of the opportunities come from learning Ruby on Rails, which may slow down your learning curve if you were just expecting to take the easy way out to create a website.</p>\n<p><strong>So, What’s the Best Programming Language to Learn?</strong>\nIf you’re looking for something easy: <strong>Python</strong>\nIf you want a solid foundation to make you a master developer: <strong>C</strong>\nIf you’re looking for a job or want to make mobile apps: <strong>Java</strong>\nIf you want to try front-end development: <strong>Javascript</strong>\nIf you’re programming for your startup’s website: <strong>Ruby</strong></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1647612957224/HEOonRzVG.png\" alt=\"Choose the best as per your need !\" /></p>\n<p><em>All the credits goes to their respective Creator !</em></p>\n",
            "contentMarkdown": "Whether you’re looking to begin coding as a hobby, a new career, or just to enhance your current role, the first thing you’ll have to do is decide which programming language you want to start with.\n\nhonestly, there is no right answer. Choosing a first language will depend on what kind of projects you want to work on, who you want to work for, or how easy you want it to be. Hopefully, this guide will help give you a better idea of which one you should pursue.\n\n**[Python](https://www.python.org/)**\n\n**Python **is always recommended if you’re looking for an easy and even fun programming language to learn first. Rather than having to jump into strict syntax rules, Python reads like English and is simple to understand for someone who’s new to programming. This allows you to obtain a basic knowledge of coding practices without having to obsess over smaller details that are often important in other languages.\n\nPython also is ideal for **web development**, **graphic user interfaces (GUIs)**, and **software development**. In fact, it was used to build Instagram, YouTube, and Spotify, so it’s clearly in demand among employers in addition to having a faster onboarding.\n\nThough it has it’s advantages, *Python is often thought of as a slow language that requires more testing and is not as practical for developing mobile apps as other languages.* \n\n**[C#](https://docs.microsoft.com/en-us/dotnet/csharp/)**\n\nWhile C is one of the more difficult languages to learn, it’s still an excellent first language pick up because almost all programming languages are implemented in it. This means that once you learn C, it’ll be simple to learn more languages like C++ and C#.\n\nBecause C is more “machine-level”, learning it is great for teaching you how a computer functions. Software Developer Joel Spolsky compares it to understanding basic anatomy before becoming a medical doctor, making it the best way to code efficiently.\n\nIn this way, C is an exceptional choice to become a master coder and a talented developer from the get-go if you’re willing to take on the challenge.\n\n[**Java**](https://www.java.com/en/)\n\nJava is an object-oriented and feature-heavy programming language that’s in high demand. It’s been built under the premise of “Write once, run anywhere,” meaning that it can be written on any device and work cross-platform.\n\nThis makes it one of the most desired (yes, we mean high-paid) language skills. So, if you’re looking to learn a language that’s going to get you a great career, this might be the one, especially since top employers for Java programmers including Ebay, Amazon, and IBM.\n\nAdditionally, Java is often used for Android and iOS app development, as it’s the basis of the Android operating system, which makes it one of the best choices if you want to build mobile apps.\n\nWhile it may not be as easy to pick up as Python, Java is a high-level language, and so it’s still relatively beginner-friendly. However, it has a slow startup and will take beginners much longer to deploy their first project.\n\n[**JavaScript**](https://www.javascript.com/)\n\nJavaScript is another incredibly popular language. Many websites that you use every day rely on JavaScript including Twitter, Gmail, Spotify, Facebook, and Instagram according to General Assembly.\n\nAdditionally, it’s a must-have when adding interactivity to websites because it communicates with HTML and CSS. This makes it essential for front-end development and consumer-facing websites while becoming increasingly important in back-end development and growing in demand all the time. Because of its popularity, JavaScript is also the leading the charge in test automation frameworks, being the backbone of frameworks like Protractor and Nightwatch.JS.\n\nThere’s nothing to install with JavaScript since it’s already built into browsers, so it’s the easiest language to get started with in terms of set-up. The con here is that this means it’s interpreted differently across browsers (you’ll need to do some extra cross-browser testing) and may have deficiencies in responsive design compared to server-side scripts.\n\nAgain, while it’s not the most difficult to learn, it certainly isn’t as easy as Python. If Javascript does seem difficult at first, try out this Javascript tutorial that’s so easy a cat could do it.\n\n[**Ruby**](https://rubyonrails.org/)\n\nRuby is similar to Python in that it’s one of the easiest languages for people with no prior programming experience to read. You don’t need to know a ton of commands or programming vocabulary to learn it, and it has a multitude of libraries and tools that come in handy.\n\nA big reason people like Ruby is because of the awesome full-stack framework, Ruby on Rails, which is becoming increasingly popular among startups and enterprise solutions. Airbnb, Groupon, Hulu, and Soundcloud are just a few of the websites that were built with Ruby on Rails, and Ruby has quite the active developer community today.\n\nThe reason it’s so popular for small businesses, however, is often one of the many criticisms against it. Ruby can have the challenge of scalability across a large system and may have a hard time with performance on larger websites. Additionally, while Ruby is certainly easy to learn, you’ll find most of the opportunities come from learning Ruby on Rails, which may slow down your learning curve if you were just expecting to take the easy way out to create a website.\n\n**So, What’s the Best Programming Language to Learn?**\nIf you’re looking for something easy: **Python**\nIf you want a solid foundation to make you a master developer: **C**\nIf you’re looking for a job or want to make mobile apps: **Java**\nIf you want to try front-end development: **Javascript**\nIf you’re programming for your startup’s website: **Ruby**\n\n![Choose the best as per your need !](https://cdn.hashnode.com/res/hashnode/image/upload/v1647612957224/HEOonRzVG.png)\n\n\n_All the credits goes to their respective Creator !_",
            "hasPolls": false,
            "totalPollVotes": 0,
            "upvotes": 0,
            "downvotes": 0,
            "tags": [
                "56744721958ef13879b94c7e",
                "56744721958ef13879b94d67",
                "56744721958ef13879b94cad",
                "56744721958ef13879b94c9f",
                "56744721958ef13879b94a30"
            ],
            "untaggedFrom": [

            ],
            "upvotedBy": [

            ],
            "downvotedBy": [

            ],
            "popularity": 5156.2618,
            "responses": [

            ],
            "responseCount": 0,
            "replyCount": 0,
            "followers": [

            ],
            "isActive": true,
            "isFeatured": false,
            "isEngaging": false,
            "answeredByTarget": false,
            "inviters": [

            ],
            "isDelisted": false,
            "isNotified": false,
            "duplicatePosts": [

            ],
            "numCollapsed": 0,
            "hasReward": false,
            "bookmarkedIn": [

            ],
            "similarPostIds": [

            ],
            "reactions": [
                "5c090d96c2a9c2a674d35485",
                "5c090d96c2a9c2a674d35486",
                "5c090d96c2a9c2a674d3548b"
            ],
            "totalReactions": 3,
            "reactionsByCurrentUser": [

            ],
            "isPinnedToBlog": false,
            "disableComments": false,
            "commentsPaused": false,
            "hasLatex": false,
            "syncAlgolia": true,
            "enableToc": false,
            "toc": [

            ],
            "numUniqueUsersWhoReacted": 0,
            "_id": "62349422bef4c71aa6f0e400",
            "title": "What’s the Best Programming Language to Learn First?",
            "type": "story",
            "isRepublished": false,
            "originalArticleURL": "",
            "partOfPublication": true,
            "publication": "61f829982454810a8d407f2f",
            "slug": "whats-the-best-programming-language-to-learn-first",
            "cuid": "cl0wi7txd059hj6nv5beu10bu",
            "dateAdded": "2022-01-01T13:16:19.000Z",
            "hasCustomDate": true,
            "pollOptions": [

            ],
            "badges": [

            ],
            "questionReplies": [

            ],
            "contributors": [

            ],
            "author": "61f829629030330a7b25a024",
            "followersCount": 1,
            "hasPinnedTag": false,
            "readTime": 5,
            "__v": 1,
            "reactionToCountMap": {
                "reaction_5c090d96c2a9c2a674d35485": 1,
                "reaction_5c090d96c2a9c2a674d35486": 1,
                "reaction_5c090d96c2a9c2a674d3548a": 0,
                "reaction_5c090d96c2a9c2a674d3548b": 1
            },
            "viewsUpdatedOn": 1659544211996,
            "series": null,
            "coverImageAttribution": "",
            "coverImagePhotographer": "",
            "dateUpdated": "2022-03-18T14:35:26.370Z",
            "isCoverAttributionHidden": false,
            "metaDescription": "Whether you’re looking to begin coding as a hobby, a new career, or just to enhance your current role, the first thing you’ll have to do is decide which pro",
            "metaTitle": "What’s the Best Programming Language",
            "pendingPublicationApproval": false,
            "subtitle": "",
            "uniqueReactions": [
                "5c090d96c2a9c2a674d35485",
                "5c090d96c2a9c2a674d35486",
                "5c090d96c2a9c2a674d3548b"
            ],
            "reactionToCountMapUnique": {
                "reaction_5c090d96c2a9c2a674d35485": 1,
                "reaction_5c090d96c2a9c2a674d35486": 1,
                "reaction_5c090d96c2a9c2a674d3548a": 0,
                "reaction_5c090d96c2a9c2a674d3548b": 1,
                "reaction_5c090d96c2a9c2a674d35484": 0
            },
            "id": "62349422bef4c71aa6f0e400"
        }
    ]
}