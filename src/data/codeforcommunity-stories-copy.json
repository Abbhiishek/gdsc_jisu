{"posts":[{"audioUrls":{"male":"https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl4cu4f2400xnf6nv329w8k3o-male"},"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":45,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1655003892797/NXHOuDdQ_.png","autoGeneratedCover":"","brief":"Overview\nA pointer is a variable whose value is the address of another variable of the same type. The variable's value that the pointer points to is accessed by dereferencing using the * operator. There are different types of pointers such as null, v...","content":"<h1 id=\"heading-overview\">Overview</h1>\n<p>A pointer is a variable whose value is the address of another variable of the same type. The variable's value that the pointer points to is accessed by dereferencing using the * operator. There are different types of pointers such as null, void, wild, etc.</p>\n<h1 id=\"heading-scope\">Scope</h1>\n<p>The article explains Pointer in C's syntax and how to use pointers with examples.\nThe article also explains different types of pointers in C with explanations and the benefits of using pointers in C.</p>\n<h1 id=\"heading-what-are-pointers-in-c\">What are Pointers in C?</h1>\n<p>Every variable we define in our program is stored at a specific in memory.</p>\n<p>Let's say we define the following integer:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">50</span>;\n</code></pre>\n<p>In our computer’s memory, there are now 4 bytes somewhere that have the binary value of 50, with some value for its address, like 0x123:</p>\n<p><strong>What is 0x123?</strong></p>\n<p>0x123 is a hexadecimal number. As memory address tends to be large numbers we often use a hexadecimal number system to represent them.</p>\n<p>We can access this address in our C program using the &amp; operator.</p>\n<p>Let's look at an example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">50</span>;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Value of the variable n is: %d\\n\"</span>, n);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Memory address of the variable n is: %x\\n\"</span>, &amp;n);\n}\n</code></pre>\n<p>Output:</p>\n<pre><code><span class=\"hljs-keyword\">Value</span> <span class=\"hljs-keyword\">of</span> the variable n <span class=\"hljs-keyword\">is</span>: <span class=\"hljs-number\">50</span>\nMemory address <span class=\"hljs-keyword\">of</span> the variable n <span class=\"hljs-keyword\">is</span>: dcbc14ac\n</code></pre><p>We got dcbc14ac as the address of variable n.</p>\n<p><strong>What's the role of a pointer in all this?</strong></p>\n<p>A pointer is a variable that stores an address in memory, where some other variable might be stored.</p>\n<p>In the subsequent sections, we will learn how to define and use pointers.</p>\n<h1 id=\"heading-syntax-of-pointers-in-c\">Syntax of Pointers in C</h1>\n<p>The syntax of Pointers in C is:</p>\n<pre><code class=\"lang-c\">data_type * pointer_variable_name;\n</code></pre>\n<p>Some of the valid pointers declarations in C are as follows:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">int</span>    *ptr_in;     <span class=\"hljs-comment\">// pointer to an integer </span>\n<span class=\"hljs-keyword\">char</span>   *ptr_ch ;    <span class=\"hljs-comment\">// pointer to a character </span>\n<span class=\"hljs-keyword\">double</span> *ptr_dbl;    <span class=\"hljs-comment\">// pointer to a double </span>\n<span class=\"hljs-keyword\">float</span>  *ptr_fl;     <span class=\"hljs-comment\">// pointer to a float</span>\n</code></pre>\n<h1 id=\"heading-how-to-use-pointers-in-c\">How to Use Pointers in C?</h1>\n<h2 id=\"heading-declare-a-pointer-variable\">Declare a pointer variable.</h2>\n<p>A variable's address is assigned to a pointer using the &amp; operator.\nUse the address in the pointer variable to get the value by using the *(asterisk) operator, which returns the variable's value at the address indicated by its argument.\nHow to use pointers in c</p>\n<p>In the above example, a variable int i = 4 is declared, the address of variable i is 0x77ff. A pointer variable int <em>ptr=&amp;i is declared. It contains the address of variable int i. The value of </em>ptr will be value at address 0x77ff; that value would be 4.</p>\n<p>Example of Pointers in C\nIllustration of pointers in C using following code:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">42</span>;     <span class=\"hljs-comment\">//variable declaration</span>\n   <span class=\"hljs-keyword\">int</span> *ptr;      <span class=\"hljs-comment\">//pointer variable declaration</span>\n   ptr = &amp;x;       <span class=\"hljs-comment\">//store address of variable x in pointer ptr</span>\n   <span class=\"hljs-comment\">//printing the address</span>\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Address stored in a variable ptr is: %x \\n\"</span>, ptr);\n   <span class=\"hljs-comment\">//printing the value</span>\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Value stored in a variable ptr is: %d \\n\"</span>, *ptr);   \n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>Output:</p>\n<p>Address stored in a variable ptr is: a7a9b45c\nValue stored in a variable ptr is: 42</p>\n<p>Explanation</p>\n<p><strong>Working of pointers in c</strong></p>\n<p>In the above example, an int variable x is declared first.\nThe memory location where variable x is declared is a7a9b45c. The value stored in x is 42.\nThe pointer variable ptr is declared using <em>(asterisk) symbol, as mentioned that the data type of the pointer will also be the same as the variable it will point to.\nIn this, ptr = &amp;x, by using &amp; operator, the address of x variable is stored in ptr.\nThe value stored in x is accessed using </em> operator, *ptr will give the value at location a7a9b45c, ie., 42.\nTypes of Pointers in C\nThere are the following types of pointers:</p>\n<p><strong>Null Pointer</strong></p>\n<p>A null pointer is a type of pointer created by assigning a null value to the pointer. A null pointer can be of any data type. It has a value of 0 in it. The operating system reserves memory at address 0; most operating systems do not allow programs to access memory at that address. The memory address 0 has unique importance.</p>\n<p>It indicates that the pointer is not intended to point to an accessible memory location. Dereferencing null pointer results in undefined behavior, i.e., if you try to access as *ptr (where ptr is a NULL pointer), it will result in a null pointer exception.</p>\n<p>Illustration of Null pointer using following code:</p>\n<pre><code><span class=\"hljs-string\">``</span><span class=\"hljs-string\">`c</span>\n</code></pre><p>#include \n    int main()\n    {\n        int *ptr = NULL;     //null pointer\n        printf(“The value inside variable ptr is: %x”,ptr);\n        return 0;\n    }</p>\n<pre><code>\nOutput\n</code></pre><p>The value inside variable ptr is: 0</p>\n<pre><code>\n**Void Pointer**\n\nThe <span class=\"hljs-keyword\">void</span> pointer is a generic pointer that isn<span class=\"hljs-number\">'</span>t associated with any data type. A <span class=\"hljs-keyword\">void</span> pointer can be typecasted to any type, so it is instrumental in assigning the different types of variables to the <span class=\"hljs-keyword\">void</span> pointer.\n\nIllustration of <span class=\"hljs-keyword\">void</span> pointer <span class=\"hljs-keyword\">using</span> following code:\n\n```c\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n    </span>{\n        <span class=\"hljs-keyword\">void</span> *ptr=<span class=\"hljs-literal\">NULL</span>; <span class=\"hljs-comment\">//void pointer</span>\n        <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">5</span>;\n        ptr = &amp;x;\n        <span class=\"hljs-comment\">//typecasted to int using (int *)</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"value of *ptr is %d \"</span>, *(<span class=\"hljs-keyword\">int</span> *)ptr);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n</code></pre><p>Output</p>\n<pre><code><span class=\"hljs-keyword\">value</span> <span class=\"hljs-keyword\">of</span> *ptr <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">5</span>\n</code></pre><p><strong>Wild pointer</strong></p>\n<p>If a pointer isn't initialized to anything, it's called a wild pointer. Dereferencing a wild pointer has undefined behavior that may crash the program or give a garbage value.</p>\n<p>Illustration of wild pointer using following code:</p>\n<pre><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> *ptr;    <span class=\"hljs-comment\">//wild pointer</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"value of *ptr is %d \"</span>,*ptr);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre><p>Output</p>\n<p>Runtime Error\nThe program will result in a segmentation fault(SIGSEGV) if the garbage pointer is not a valid address.</p>\n<p><strong>Dangling Pointer</strong></p>\n<p>A dangling pointer is a pointer that refers to a memory location that has been released or deleted.</p>\n<p>Illustration of dangling pointer using following code:</p>\n<pre><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;    </span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{ \n    <span class=\"hljs-comment\">//memory allocated to ptr</span>\n    <span class=\"hljs-keyword\">int</span> *ptr = (<span class=\"hljs-keyword\">int</span> *) <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">int</span>));\n    <span class=\"hljs-comment\">// memory released</span>\n    <span class=\"hljs-built_in\">free</span>(ptr);\n    <span class=\"hljs-comment\">// ptr is pointing to a deleted memory location now.</span>\n    <span class=\"hljs-comment\">// now ptr became dangling pointer</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"value of *ptr is %d \"</span>,*ptr);\n    <span class=\"hljs-comment\">// Removing dangling pointer</span>\n    ptr = <span class=\"hljs-literal\">NULL</span>; \n}\n</code></pre><p>Output</p>\n<pre><code><span class=\"hljs-keyword\">value</span> <span class=\"hljs-keyword\">of</span> *ptr <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">0</span> \n</code></pre><p><strong>Complex Pointer</strong></p>\n<p>A Complex pointers contains of [] , <em> ,(), data type, identifier. These operators have different associativity and precedence. () &amp; [] have the highest precedence &amp; associativity from left to right followed by </em> &amp; Identifier having precedence 2 &amp; associativity from right to left and Data Type having the least priority.</p>\n<pre><code><span class=\"hljs-selector-tag\">char</span> (* ptr)<span class=\"hljs-selector-attr\">[4]</span>\n</code></pre><p>Here, ptr is a pointer to a one-dimensional character array of size four.</p>\n<h2 id=\"heading-other-pointers\">Other Pointers</h2>\n<p>The following are some other pointers used in old 16-bit Intel architecture:</p>\n<p><strong>Near pointer</strong></p>\n<p>A near pointer works with data segments of memory that are in 64Kb of range. It can't access addresses outside of that data segment.  We can make any pointer a near pointer by using the keyword 'near'. Illustration of Near pointer using following code:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n    </span>{\n       <span class=\"hljs-keyword\">int</span> x=<span class=\"hljs-number\">42</span>;\n       <span class=\"hljs-keyword\">int</span> near* ptr = &amp;x;\n       <span class=\"hljs-keyword\">int</span> sz = <span class=\"hljs-keyword\">sizeof</span>(ptr);\n       <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"size of ptr is %d byte\"</span>,sz);\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n</code></pre>\n<p>Output</p>\n<pre><code>size of ptr <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">byte</span>\n</code></pre><p><strong>Far pointer</strong></p>\n<p>A far pointer has the size of 4 bytes (32 bit), and it can visit memory beyond the current segment. The compiler allocates a segment register for segment address and another register for offset within the current segment.</p>\n<p>Illustration of far pointer using following code:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n      </span>{\n         <span class=\"hljs-keyword\">int</span> x=<span class=\"hljs-number\">42</span>;\n         <span class=\"hljs-keyword\">int</span> far* ptr = &amp;x;\n         <span class=\"hljs-keyword\">int</span> sz = <span class=\"hljs-keyword\">sizeof</span>(ptr);\n         <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"size of ptr is %d byte\"</span>,sz);\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n      }\n</code></pre>\n<p>Output</p>\n<pre><code>size of ptr <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">byte</span>\n</code></pre><p><strong>Huge Pointer</strong></p>\n<p>A huge pointer is similar to a far pointer, the size of a huge pointer is also 4 bytes (32 bit), and it can also visit memory beyond the current segment.</p>\n<p>The main difference between huge and far pointer is of modification of segment. In the far pointer, the segment part cannot be modified. But in the Huge pointer, the segment part can be changed.</p>\n<p><strong>Benefits of Using Pointers in C</strong></p>\n<ul>\n<li>Pointers are helpful for memory location access.</li>\n<li>Pointers can be used for dynamic space allocation(malloc, etc.), and space can be deallocated also.</li>\n<li>The data structures such as graphs, linked lists, trees, etc., can be created using pointers.</li>\n<li>Pointers allow references to function and thereby help in the passing of function as arguments to other functions.</li>\n<li>Conclusion</li>\n<li>A pointer is a variable whose value is the address of another variable of the same type.</li>\n<li>The value of the variable that the pointer points to by dereferencing using the * operator.</li>\n<li>The different types of pointers are void, null, dangling, wild, near, far, and huge.</li>\n<li>A pointer can be typecasted to different data types.</li>\n<li>Pointers are slower in accessing than direct access to the variables.</li>\n</ul>\n","contentMarkdown":"\n# Overview\nA pointer is a variable whose value is the address of another variable of the same type. The variable's value that the pointer points to is accessed by dereferencing using the * operator. There are different types of pointers such as null, void, wild, etc.\n\n# Scope\nThe article explains Pointer in C's syntax and how to use pointers with examples.\nThe article also explains different types of pointers in C with explanations and the benefits of using pointers in C.\n\n# What are Pointers in C?\nEvery variable we define in our program is stored at a specific in memory.\n\nLet's say we define the following integer:\n\n```c\nint n = 50;\n```\nIn our computer’s memory, there are now 4 bytes somewhere that have the binary value of 50, with some value for its address, like 0x123:\n\n\n\n**What is 0x123?**\n\n0x123 is a hexadecimal number. As memory address tends to be large numbers we often use a hexadecimal number system to represent them.\n\nWe can access this address in our C program using the & operator.\n\nLet's look at an example:\n\n```c\n#include<stdio.h>\n\nvoid main()\n{\n    int n = 50;\n    printf(\"Value of the variable n is: %d\\n\", n);\n    printf(\"Memory address of the variable n is: %x\\n\", &n);\n}\n```\nOutput:\n\n```\nValue of the variable n is: 50\nMemory address of the variable n is: dcbc14ac\n```\n\nWe got dcbc14ac as the address of variable n.\n\n**What's the role of a pointer in all this?**\n\nA pointer is a variable that stores an address in memory, where some other variable might be stored.\n\n\nIn the subsequent sections, we will learn how to define and use pointers.\n\n# Syntax of Pointers in C\nThe syntax of Pointers in C is:\n\n```c\ndata_type * pointer_variable_name;\n```\nSome of the valid pointers declarations in C are as follows:\n\n```c\nint    *ptr_in;     // pointer to an integer \nchar   *ptr_ch ;    // pointer to a character \ndouble *ptr_dbl;    // pointer to a double \nfloat  *ptr_fl;     // pointer to a float\n```\n# How to Use Pointers in C?\n\n## Declare a pointer variable.\nA variable's address is assigned to a pointer using the & operator.\nUse the address in the pointer variable to get the value by using the *(asterisk) operator, which returns the variable's value at the address indicated by its argument.\nHow to use pointers in c\n\nIn the above example, a variable int i = 4 is declared, the address of variable i is 0x77ff. A pointer variable int *ptr=&i is declared. It contains the address of variable int i. The value of *ptr will be value at address 0x77ff; that value would be 4.\n\nExample of Pointers in C\nIllustration of pointers in C using following code:\n\n```c\n#include <stdio.h>\n\nint main()\n{\n   int x = 42;     //variable declaration\n   int *ptr;      //pointer variable declaration\n   ptr = &x;       //store address of variable x in pointer ptr\n   //printing the address\n   printf(\"Address stored in a variable ptr is: %x \\n\", ptr);\n   //printing the value\n   printf(\"Value stored in a variable ptr is: %d \\n\", *ptr);   \n   return 0;\n}\n```\nOutput:\n\nAddress stored in a variable ptr is: a7a9b45c\nValue stored in a variable ptr is: 42\n\nExplanation\n\n**Working of pointers in c**\n\nIn the above example, an int variable x is declared first.\nThe memory location where variable x is declared is a7a9b45c. The value stored in x is 42.\nThe pointer variable ptr is declared using *(asterisk) symbol, as mentioned that the data type of the pointer will also be the same as the variable it will point to.\nIn this, ptr = &x, by using & operator, the address of x variable is stored in ptr.\nThe value stored in x is accessed using * operator, *ptr will give the value at location a7a9b45c, ie., 42.\nTypes of Pointers in C\nThere are the following types of pointers:\n\n**Null Pointer**\n\nA null pointer is a type of pointer created by assigning a null value to the pointer. A null pointer can be of any data type. It has a value of 0 in it. The operating system reserves memory at address 0; most operating systems do not allow programs to access memory at that address. The memory address 0 has unique importance.\n\nIt indicates that the pointer is not intended to point to an accessible memory location. Dereferencing null pointer results in undefined behavior, i.e., if you try to access as *ptr (where ptr is a NULL pointer), it will result in a null pointer exception.\n\nIllustration of Null pointer using following code:\n\n    ```c\n#include <stdio.h>\n    int main()\n    {\n\t    int *ptr = NULL; \t//null pointer\n\t    printf(“The value inside variable ptr is: %x”,ptr);\n\t    return 0;\n    }\n```\n\nOutput\n\n```\nThe value inside variable ptr is: 0\n```\n\n**Void Pointer**\n\nThe void pointer is a generic pointer that isn't associated with any data type. A void pointer can be typecasted to any type, so it is instrumental in assigning the different types of variables to the void pointer.\n\nIllustration of void pointer using following code:\n\n```c\n#include<stdio.h>\n    int main()\n    {\n        void *ptr=NULL; //void pointer\n        int x = 5;\n        ptr = &x;\n        //typecasted to int using (int *)\n        printf(\"value of *ptr is %d \", *(int *)ptr);\n        return 0;\n    }\n```\n\nOutput\n```\nvalue of *ptr is 5\n```\n\n**Wild pointer**\n\nIf a pointer isn't initialized to anything, it's called a wild pointer. Dereferencing a wild pointer has undefined behavior that may crash the program or give a garbage value.\n\nIllustration of wild pointer using following code:\n\n    #include <stdio.h>\n    int main()\n    {\n\t    int *ptr;\t//wild pointer\n\t    printf(\"value of *ptr is %d \",*ptr);\n\t    return 0;\n    }\n\nOutput\n\nRuntime Error\nThe program will result in a segmentation fault(SIGSEGV) if the garbage pointer is not a valid address.\n\n**Dangling Pointer**\n\nA dangling pointer is a pointer that refers to a memory location that has been released or deleted.\n\nIllustration of dangling pointer using following code:\n\n    #include <stdlib.h>    \n    #include <stdio.h>\n    int main()\n    { \n        //memory allocated to ptr\n        int *ptr = (int *) malloc(sizeof(int));\n        // memory released\n        free(ptr);\n        // ptr is pointing to a deleted memory location now.\n        // now ptr became dangling pointer\n        printf(\"value of *ptr is %d \",*ptr);\n        // Removing dangling pointer\n        ptr = NULL; \n    }\nOutput\n\n    value of *ptr is 0 \n\n\n**Complex Pointer**\n\nA Complex pointers contains of [] , * ,(), data type, identifier. These operators have different associativity and precedence. () & [] have the highest precedence & associativity from left to right followed by * & Identifier having precedence 2 & associativity from right to left and Data Type having the least priority.\n\n    char (* ptr)[4]\n\nHere, ptr is a pointer to a one-dimensional character array of size four.\n\n## Other Pointers\n\nThe following are some other pointers used in old 16-bit Intel architecture:\n\n**Near pointer**\n\nA near pointer works with data segments of memory that are in 64Kb of range. It can't access addresses outside of that data segment.  We can make any pointer a near pointer by using the keyword 'near'. Illustration of Near pointer using following code:\n\n```c\n#include<stdio.h>\n    int main()\n    {\n       int x=42;\n       int near* ptr = &x;\n       int sz = sizeof(ptr);\n       printf(\"size of ptr is %d byte\",sz);\n       return 0;\n    }\n```\nOutput\n\n```\nsize of ptr is 2 byte\n```\n\n**Far pointer**\n\nA far pointer has the size of 4 bytes (32 bit), and it can visit memory beyond the current segment. The compiler allocates a segment register for segment address and another register for offset within the current segment.\n\nIllustration of far pointer using following code:\n\n   ```c\n#include<stdio.h>\n     int main()\n      {\n         int x=42;\n         int far* ptr = &x;\n         int sz = sizeof(ptr);\n         printf(\"size of ptr is %d byte\",sz);\n         return 0;\n      }\n```\n\nOutput\n\n```\nsize of ptr is 4 byte\n```\n\n**Huge Pointer**\n\nA huge pointer is similar to a far pointer, the size of a huge pointer is also 4 bytes (32 bit), and it can also visit memory beyond the current segment.\n\nThe main difference between huge and far pointer is of modification of segment. In the far pointer, the segment part cannot be modified. But in the Huge pointer, the segment part can be changed.\n\n**Benefits of Using Pointers in C**\n\n- Pointers are helpful for memory location access.\n- Pointers can be used for dynamic space allocation(malloc, etc.), and space can be deallocated also.\n- The data structures such as graphs, linked lists, trees, etc., can be created using pointers.\n- Pointers allow references to function and thereby help in the passing of function as arguments to other functions.\n- Conclusion\n- A pointer is a variable whose value is the address of another variable of the same type.\n- The value of the variable that the pointer points to by dereferencing using the * operator.\n- The different types of pointers are void, null, dangling, wild, near, far, and huge.\n- A pointer can be typecasted to different data types.\n- Pointers are slower in accessing than direct access to the variables.","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744721958ef13879b9492c","62a74a8cddf27ef9ab05d9b7","56744721958ef13879b94b13"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5470.6247,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35484","5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35486","567453d0b73d6a82ac8c5abd","5c090d96c2a9c2a674d3548a","567453d0b73d6a82ac8c5abc","567453d0b73d6a82ac8c5ab9","5c090d96c2a9c2a674d35488","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548b"],"totalReactions":20,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":true,"enableToc":true,"toc":[[{"id":"79bfcdf8-7c91-435f-9f61-368c2f8fe2b8","level":1,"previousLevel":null,"parentId":null,"slug":"overview","title":"Overview"}],[{"id":"8d9c8dbd-dc19-4f87-ba4c-d7405d200f74","level":1,"previousLevel":1,"parentId":null,"slug":"scope","title":"Scope"}],[{"id":"3c03e6a1-aa23-44fd-83ac-6841d1852250","level":1,"previousLevel":1,"parentId":null,"slug":"what-are-pointers-in-c","title":"What are Pointers in C?"}],[{"id":"d339f8ab-2beb-45f0-9182-76d591c88354","level":1,"previousLevel":1,"parentId":null,"slug":"syntax-of-pointers-in-c","title":"Syntax of Pointers in C"}],[{"id":"01c44ce7-13fb-486d-b727-b6a2b157e10e","level":1,"previousLevel":1,"parentId":null,"slug":"how-to-use-pointers-in-c","title":"How to Use Pointers in C?"}],[{"id":"9456ac62-328c-4f01-bab4-8d6605390827","level":2,"previousLevel":1,"parentId":"01c44ce7-13fb-486d-b727-b6a2b157e10e","slug":"declare-a-pointer-variable","title":"Declare a pointer variable."}],[{"id":"9287a1d5-0c34-4c6f-af23-758b09865260","level":2,"previousLevel":2,"parentId":"01c44ce7-13fb-486d-b727-b6a2b157e10e","slug":"other-pointers","title":"Other Pointers"}]],"numUniqueUsersWhoReacted":0,"_id":"62a74a8bddf27ef9ab05d9b6","title":"Pointers in C","subtitle":"Learn about pointers in C.","type":"story","coverImageAttribution":"","coverImagePhotographer":"","isCoverAttributionHidden":false,"ogImage":"","metaTitle":"Pointers in C","metaDescription":"Learn about pointers in C.","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"6285a82d83966a1653f1383f","slug":"pointers-in-c","importedFromMedium":false,"dateAdded":"2022-06-13T14:32:43.847Z","hasCustomDate":false,"hasScheduledDate":false,"stickCoverToBottom":false,"series":"628a2bb4929bcf4c721d471f","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"cl4cu4f2400xnf6nv329w8k3o","author":"61f829629030330a7b25a024","followersCount":1,"draft":"62a559cda2c282d2d837a640","readTime":7,"__v":0,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":2,"reaction_5c090d96c2a9c2a674d35485":2,"reaction_5c090d96c2a9c2a674d35486":2,"reaction_567453d0b73d6a82ac8c5abd":2,"reaction_5c090d96c2a9c2a674d3548a":2,"reaction_567453d0b73d6a82ac8c5abc":2,"reaction_567453d0b73d6a82ac8c5ab9":2,"reaction_5c090d96c2a9c2a674d35488":2,"reaction_5d9dd859f31791c942dc5b52":2,"reaction_5c090d96c2a9c2a674d3548b":2},"viewsUpdatedOn":1664035208448,"uniqueReactions":["5c090d96c2a9c2a674d35484","5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35486","567453d0b73d6a82ac8c5abd","5c090d96c2a9c2a674d3548a","567453d0b73d6a82ac8c5abc","567453d0b73d6a82ac8c5ab9","5c090d96c2a9c2a674d35488","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548b"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":2,"reaction_5c090d96c2a9c2a674d35485":2,"reaction_5c090d96c2a9c2a674d35486":2,"reaction_567453d0b73d6a82ac8c5abd":2,"reaction_5c090d96c2a9c2a674d3548a":2,"reaction_567453d0b73d6a82ac8c5abc":2,"reaction_567453d0b73d6a82ac8c5ab9":2,"reaction_5c090d96c2a9c2a674d35488":2,"reaction_5d9dd859f31791c942dc5b52":2,"reaction_5c090d96c2a9c2a674d3548b":2},"id":"62a74a8bddf27ef9ab05d9b6"},{"audioUrls":{"male":"https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl4ct31fy06twjpnv1q242tvx-male"},"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":121,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1655127347772/Ey32g2MXj.png","autoGeneratedCover":"","brief":"Before going into the syntax of a C++ program, let us first understand some basic terms.\nTokens  :\nTo understand Tokens, let us first take the example of an atom. We all know that an atom is the smallest unit of matter. Similarly, a token is the smal...","content":"<p>Before going into the syntax of a C++ program, let us first understand some basic terms.</p>\n<h2 id=\"heading-tokens\">Tokens  :</h2>\n<p>To understand Tokens, let us first take the example of an atom. We all know that an atom is the smallest unit of matter. Similarly, a token is the <strong>smallest unit</strong> of a program. They can be described as the <strong>fundamental building blocks</strong> that constitute a program.</p>\n<h2 id=\"heading-types-of-tokens\">Types of Tokens :</h2>\n<ul>\n<li>Keywords</li>\n<li>Identifiers</li>\n<li>Constants</li>\n<li>Literals</li>\n<li>Special Symbols</li>\n<li>Variables</li>\n<li>Operators</li>\n</ul>\n<h2 id=\"heading-keywords\">Keywords :</h2>\n<p>Keywords are the <strong>reserved words</strong> in C++ which have a <strong>predefined meaning</strong> to the <strong>compiler</strong>.</p>\n<p>As C++ is an extension of the C language, It supports the <strong>32 keywords</strong> that are also available in C. \n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1654767497495/pan9li79T.jpg\" alt=\"keywords(1).jpg\" />\nIn addition, C++ supports <strong>31 more keywords</strong> that are not available in C. \n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1654767513914/9qego4jAG.jpg\" alt=\"keywords(2).jpg\" /></p>\n<h2 id=\"heading-identifiers\">Identifiers :</h2>\n<p>The <strong>unique names</strong> assigned to <strong>identify</strong> the different parts( <strong>functions, variables, structures, class</strong> etc) of a program are called <strong>Identifiers</strong>.</p>\n<h3 id=\"heading-the-naming-convention-for-identifiers-is-as-follows\">The naming convention for Identifiers is as follows :</h3>\n<ul>\n<li>An Identifier consists of only <strong>alphabets, characters, digits, and underscores(_)</strong>.</li>\n<li>It should not contain <strong>whitespace</strong> or any other <strong>special character</strong>.</li>\n<li>The first letter of an Identifier must be an alphabet or an underscore(_).</li>\n<li>Identifiers in C++ are <strong>case sensitive</strong>( which means that <strong>'var'</strong> and <strong>'VAR'</strong> are different).</li>\n<li><strong>Reserved words</strong> cannot be used as Identifiers.</li>\n</ul>\n<pre><code class=\"lang-cpp\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">enum</span>; ❌ <span class=\"hljs-comment\">// an Identifier cannot be a keyword</span>\n<span class=\"hljs-keyword\">int</span> var; ✅ <span class=\"hljs-comment\">// valid Identifier</span>\n<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">1</span>sum; ❌ <span class=\"hljs-comment\">// an Identifier cannot start with a digit </span>\n<span class=\"hljs-keyword\">int</span> _sum1; ✅ <span class=\"hljs-comment\">// valid Identifier</span>\n<span class=\"hljs-keyword\">int</span> var@<span class=\"hljs-number\">1</span>; ❌ <span class=\"hljs-comment\">// an Identifier cannot have a special character</span>\n</code></pre>\n<h2 id=\"heading-constants\">Constants :</h2>\n<p>Constants refer to the components whose value <strong>cannot</strong> be <strong>changed </strong> throughout the program. Constants must have to be <strong>initialized</strong> at the time of creating it and a new value <strong>cannot be assigned</strong> to it later on. </p>\n<h3 id=\"heading-there-are-two-ways-of-defining-constants-in-c\">There are two ways of defining Constants in C++ :</h3>\n<ul>\n<li>By using the <strong>const</strong> keyword: Using the <strong>const keyword </strong> before a variable makes it a Constant.</li>\n</ul>\n<h3 id=\"heading-syntax\">Syntax :</h3>\n<pre><code><span class=\"hljs-keyword\">const</span>  data_type  constant_name = <span class=\"hljs-keyword\">value</span>;\n</code></pre><h3 id=\"heading-example\">Example :</h3>\n<pre><code class=\"lang-cpp\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> val=<span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// a constant 'val' is declared with value 5</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> val;\nval=<span class=\"hljs-number\">5</span>; ❌ <span class=\"hljs-comment\">// it should be initialized in the first line</span>\n</code></pre>\n<ul>\n<li>By using <strong>#define</strong> preprocessor: The preprocessors are the <strong>directives</strong> which give instructions to the compiler to <strong>preprocess</strong> information or <strong>perform a task</strong> before the <strong>actual compilation</strong> of the program starts. All the preprocessor directives are therefore declared before the <strong>main( )</strong>.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1654959274503/8UyApjSPq.jpg\" alt=\"preprocessor.jpg\" /></p>\n<p><strong>#define</strong> preprocessor directive is used to define a <strong>constant value</strong> with a <strong>name</strong>. The compiler will <strong>replace references</strong> to these constants with the <strong>defined value</strong> at the time of compilation.</p>\n<h3 id=\"heading-syntax\">Syntax :</h3>\n<pre><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span>   constant_name   value</span>\n</code></pre><h3 id=\"heading-example\">Example :</h3>\n<pre><code class=\"lang-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span>   val   5  <span class=\"hljs-comment\">// a constant 'val' is defined with value 5</span></span>\n</code></pre>\n<h3 id=\"heading-types-of-constants\">Types of Constants :</h3>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1654959243702/YEUZBAkTZ.jpg\" alt=\"constants.jpg\" /></p>\n<ul>\n<li><strong>Integer Constants</strong> - constants that have numeric values with no fractional or exponential part. <strong>Example: </strong>0, 1, 999, -567, etc.</li>\n<li><strong>Real or Floating-point Constants</strong> - constants  that have numeric values with fractional or exponential part. <strong>Example:</strong> 0.45, 0.6669, 1.25, etc.</li>\n<li><strong>Character Constants</strong> - Constants that have a character enclosed within single quotations. <strong>Example:</strong> 'A', 'b', 'Z', etc.</li>\n<li><strong>String Constants</strong> - Constants that have a group of characters enclosed within double quotations. <strong>Example:</strong> \"Code for Community\".</li>\n</ul>\n<h2 id=\"heading-literals\">Literals :</h2>\n<p>Literals are used for representing <strong>fixed</strong> values( or <strong>Constant</strong> values). In other words, a <strong>Constant value</strong> is called a <strong>Literal</strong>.</p>\n<h3 id=\"heading-example\">Example :</h3>\n<pre><code class=\"lang-cpp\"><span class=\"hljs-keyword\">const</span>   <span class=\"hljs-keyword\">int</span>   a = <span class=\"hljs-number\">9</span>; <span class=\"hljs-comment\">// 'a' is a constant and '9' is a literal</span>\n</code></pre>\n<h3 id=\"heading-types-of-literals\">Types of Literals :</h3>\n<ul>\n<li><strong>Integer Literals</strong> - numeric values with no fractional or exponential part.  <strong>Example: </strong>0, -1, 022, 0x521, etc.</li>\n<li><strong>Floating-point Literals</strong> - numeric values with fractional or exponential part.  <strong>Example:</strong> 0.99E-2, 0.000024, -1.25, etc.</li>\n<li><strong>Character Literals</strong> - consists of a single character enclosed within single quotations. <strong>Example:</strong> 'C', 'd', 'X', etc.</li>\n<li><strong>String Literals</strong> - consists of a group of characters enclosed within double quotations. <strong>Example:</strong> \"Hashnode\".</li>\n<li><strong>Escape sequence</strong> - Sometimes, it is necessary to use characters that cannot be typed directly through the keyboard. These characters can be represented through an <strong>escape sequence</strong>.</li>\n</ul>\n<p>An escape sequence is a <strong>special character</strong> that can be used to <strong>manipulate</strong> the <strong>printing behavior</strong> of the <strong>output</strong>. They are used with a <strong>backslash()</strong> followed by a <strong>coded</strong> <strong>character</strong>.</p>\n<p>For example, if we were to print \"Hello World\" in the <strong>same line</strong>, we would simply write </p>\n<pre><code class=\"lang-cpp\"><span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Hello World\"</span> ;\n</code></pre>\n<p>Now, if we were to print \"Hello\" and \"World\" in <strong>two different lines</strong>, we can use <strong>\\n</strong> to send the cursor to the next line </p>\n<pre><code class=\"lang-cpp\"><span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Hello \\n\"</span>;\n<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"World\"</span>; <span class=\"hljs-comment\">// 'World' will be printed in the next line</span>\n</code></pre>\n<p><strong>Here are a few examples of escape sequence :\n</strong></p>\n<table> \n     <tr><th> Escape Sequence </th><th> Character </th></tr>\n     <tr><td> \\n </td><td> nextline </td></tr>\n     <tr><td> \\b </td><td> backspace </td></tr>\n     <tr><td> \\r </td><td> return </td></tr>\n     <tr><td> \\t </td><td> horizontal tab </td></tr>\n     <tr><td> \\v </td><td> vertical tab </td></tr>\n     <tr><td> \\ </td><td> backslash </td></tr>\n     <tr><td> \\' </td><td> single quotation mark </td></tr>\n     <tr><td> \\\" </td><td> double quotation mark </td></tr>\n     <tr><td> \\? </td><td> question mark </td></tr>\n     <tr><td> \\0 </td><td> null character </td></tr>\n</table>\n\n<h2 id=\"heading-special-symbols\">Special Symbols :</h2>\n<p>C++ supports a variety of symbols that conveys a special meaning. These special symbols, therefore, cannot be used for any other purpose other than their specified function in the program.</p>\n<h3 id=\"heading-the-following-are-some-of-the-special-symbols-supported-by-c\">The following are some of the <strong>Special Symbols</strong> supported by C++ :</h3>\n<ul>\n<li><strong>Brackets [ ]:</strong> Opening and closing brackets are used to declare array size and access array elements.</li>\n<li><strong>Parentheses ( ):</strong> These special symbols are used to indicate function calls and function parameters.</li>\n<li><strong>Braces { }:</strong> These opening and ending curly braces mark the start and end of a block of code containing more than one executable statement.</li>\n<li><strong>Comma (, ):</strong> It is used to separate more than one expression in an executable statement like parameters in function calls.</li>\n<li><strong>Colon (:):</strong> It is an operator that essentially invokes something called an initialization list.</li>\n<li><strong>Semicolon (;):</strong> It is known as a statement terminator. It indicates the end of one logical entity. That’s why each statement must be ended with a semicolon.</li>\n<li><strong>Asterisk (*):</strong> It is used to create a pointer variable and for the multiplication of variables.</li>\n<li><strong>Assignment operator (=):</strong> It is used to assign values to a variable.</li>\n<li><strong>Pre-processor (#):</strong> The preprocessor is a directive that is used automatically by the compiler to modify our program before the actual compilation.</li>\n</ul>\n<p>This is it for this blog post, we would be discussing Variables and Operators in the next one. Till then Keep Learning...</p>\n","contentMarkdown":"Before going into the syntax of a C++ program, let us first understand some basic terms.\n\n## Tokens  :\nTo understand Tokens, let us first take the example of an atom. We all know that an atom is the smallest unit of matter. Similarly, a token is the **smallest unit** of a program. They can be described as the **fundamental building blocks** that constitute a program.\n\n## Types of Tokens :\n- Keywords\n- Identifiers\n- Constants\n- Literals\n- Special Symbols\n- Variables\n- Operators\n\n## Keywords :\nKeywords are the **reserved words** in C++ which have a **predefined meaning** to the **compiler**.\n\nAs C++ is an extension of the C language, It supports the **32 keywords** that are also available in C. \n![keywords(1).jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1654767497495/pan9li79T.jpg align=\"left\")\nIn addition, C++ supports **31 more keywords** that are not available in C. \n![keywords(2).jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1654767513914/9qego4jAG.jpg align=\"left\")\n\n## Identifiers :\nThe **unique names** assigned to **identify** the different parts( **functions, variables, structures, class** etc) of a program are called **Identifiers**.\n\n### The naming convention for Identifiers is as follows :\n- An Identifier consists of only **alphabets, characters, digits, and underscores(_)**.\n- It should not contain **whitespace** or any other **special character**.\n- The first letter of an Identifier must be an alphabet or an underscore(_).\n- Identifiers in C++ are **case sensitive**( which means that **'var'** and **'VAR'** are different).\n- **Reserved words** cannot be used as Identifiers.\n\n```cpp\nint enum; ❌ // an Identifier cannot be a keyword\nint var; ✅ // valid Identifier\nint 1sum; ❌ // an Identifier cannot start with a digit \nint _sum1; ✅ // valid Identifier\nint var@1; ❌ // an Identifier cannot have a special character \n``` \n## Constants :\nConstants refer to the components whose value **cannot** be **changed ** throughout the program. Constants must have to be **initialized** at the time of creating it and a new value **cannot be assigned** to it later on. \n\n### There are two ways of defining Constants in C++ :\n\n- By using the **const** keyword: Using the **const keyword ** before a variable makes it a Constant.\n  \n### Syntax :\n```\nconst  data_type  constant_name = value;\n``` \n### Example :\n```cpp\nconst int val=5; // a constant 'val' is declared with value 5\n\nconst int val;\nval=5; ❌ // it should be initialized in the first line\n``` \n- By using **#define** preprocessor: The preprocessors are the **directives** which give instructions to the compiler to **preprocess** information or **perform a task** before the **actual compilation** of the program starts. All the preprocessor directives are therefore declared before the **main( )**.\n\n![preprocessor.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1654959274503/8UyApjSPq.jpg align=\"left\")\n\n**#define** preprocessor directive is used to define a **constant value** with a **name**. The compiler will **replace references** to these constants with the **defined value** at the time of compilation.\n\n### Syntax :\n```\n#define   constant_name   value\n``` \n### Example :\n```cpp\n#define   val   5  // a constant 'val' is defined with value 5 \n``` \n### Types of Constants :\n![constants.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1654959243702/YEUZBAkTZ.jpg align=\"left\")\n- **Integer Constants** - constants that have numeric values with no fractional or exponential part. **Example: **0, 1, 999, -567, etc.\n- **Real or Floating-point Constants** - constants  that have numeric values with fractional or exponential part. **Example:** 0.45, 0.6669, 1.25, etc.\n- **Character Constants** - Constants that have a character enclosed within single quotations. **Example:** 'A', 'b', 'Z', etc.\n- **String Constants** - Constants that have a group of characters enclosed within double quotations. **Example:** \"Code for Community\".\n\n## Literals :\nLiterals are used for representing **fixed** values( or **Constant** values). In other words, a **Constant value** is called a **Literal**.\n\n### Example :\n```cpp\nconst   int   a = 9; // 'a' is a constant and '9' is a literal\n``` \n### Types of Literals :\n- **Integer Literals** - numeric values with no fractional or exponential part.  **Example: **0, -1, 022, 0x521, etc.\n- **Floating-point Literals** - numeric values with fractional or exponential part.  **Example:** 0.99E-2, 0.000024, -1.25, etc.\n- **Character Literals** - consists of a single character enclosed within single quotations. **Example:** 'C', 'd', 'X', etc.\n- **String Literals** - consists of a group of characters enclosed within double quotations. **Example:** \"Hashnode\".\n- **Escape sequence** - Sometimes, it is necessary to use characters that cannot be typed directly through the keyboard. These characters can be represented through an **escape sequence**.\n\nAn escape sequence is a **special character** that can be used to **manipulate** the **printing behavior** of the **output**. They are used with a **backslash(\\)** followed by a **coded** **character**.\n\nFor example, if we were to print \"Hello World\" in the **same line**, we would simply write \n```cpp\ncout << \"Hello World\" ; \n``` \nNow, if we were to print \"Hello\" and \"World\" in **two different lines**, we can use **\\n** to send the cursor to the next line \n```cpp\ncout << \"Hello \\n\";\ncout << \"World\"; // 'World' will be printed in the next line\n``` \n**Here are a few examples of escape sequence :\n**\n<table> \n     <tr><th> Escape Sequence </th><th> Character </th></tr>\n     <tr><td> \\n </td><td> nextline </td></tr>\n     <tr><td> \\b </td><td> backspace </td></tr>\n     <tr><td> \\r </td><td> return </td></tr>\n     <tr><td> \\t </td><td> horizontal tab </td></tr>\n     <tr><td> \\v </td><td> vertical tab </td></tr>\n     <tr><td> \\\\ </td><td> backslash </td></tr>\n     <tr><td> \\' </td><td> single quotation mark </td></tr>\n     <tr><td> \\\" </td><td> double quotation mark </td></tr>\n     <tr><td> \\? </td><td> question mark </td></tr>\n     <tr><td> \\0 </td><td> null character </td></tr>\n</table>\n\n## Special Symbols :\nC++ supports a variety of symbols that conveys a special meaning. These special symbols, therefore, cannot be used for any other purpose other than their specified function in the program.\n\n### The following are some of the **Special Symbols** supported by C++ :\n- **Brackets [ ]:** Opening and closing brackets are used to declare array size and access array elements.\n- **Parentheses ( ):** These special symbols are used to indicate function calls and function parameters.\n- **Braces { }:** These opening and ending curly braces mark the start and end of a block of code containing more than one executable statement.\n- **Comma (, ):** It is used to separate more than one expression in an executable statement like parameters in function calls.\n- **Colon (:):** It is an operator that essentially invokes something called an initialization list.\n- **Semicolon (;):** It is known as a statement terminator. It indicates the end of one logical entity. That’s why each statement must be ended with a semicolon.\n- **Asterisk (*):** It is used to create a pointer variable and for the multiplication of variables.\n- **Assignment operator (=):** It is used to assign values to a variable.\n- **Pre-processor (#):** The preprocessor is a directive that is used automatically by the compiler to modify our program before the actual compilation.\n\n\nThis is it for this blog post, we would be discussing Variables and Operators in the next one. Till then Keep Learning...","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b955a9","5f3f40bfdfbb4247f7c14d4c","56744721958ef13879b948b7","56744723958ef13879b954c1"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5470.3263,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35484","5c090d96c2a9c2a674d35486","5c090d96c2a9c2a674d35485","567453d0b73d6a82ac8c5abd","5c090d96c2a9c2a674d3548b","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d35488","5c090d96c2a9c2a674d3548a","567453d0b73d6a82ac8c5ab9","567453d0b73d6a82ac8c5abc"],"totalReactions":11,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":true,"enableToc":true,"toc":[[{"id":"374dcac6-20ef-40f8-a7d7-5d3cc5e0a7dd","level":2,"previousLevel":null,"parentId":null,"slug":"tokens","title":"Tokens  :"}],[{"id":"2f9ce210-7b86-465a-af7c-494a601fd1c1","level":2,"previousLevel":2,"parentId":null,"slug":"types-of-tokens","title":"Types of Tokens :"}],[{"id":"19d5bad9-afa0-4d1c-a8bd-9600c699c268","level":2,"previousLevel":2,"parentId":null,"slug":"keywords","title":"Keywords :"}],[{"id":"5a38cffd-9e22-4b39-a973-13a0fbb03b21","level":2,"previousLevel":2,"parentId":null,"slug":"identifiers","title":"Identifiers :"}],[{"id":"099aa7a2-8a3d-479c-a11b-6a9990ad95c5","level":3,"previousLevel":2,"parentId":"5a38cffd-9e22-4b39-a973-13a0fbb03b21","slug":"the-naming-convention-for-identifiers-is-as-follows","title":"The naming convention for Identifiers is as follows :"}],[{"id":"713a02b9-b1de-4f0f-874e-e98c7a17a90e","level":2,"previousLevel":3,"parentId":null,"slug":"constants","title":"Constants :"}],[{"id":"1f60fe9c-ca38-4a23-bcf2-2dc200957e31","level":3,"previousLevel":2,"parentId":"713a02b9-b1de-4f0f-874e-e98c7a17a90e","slug":"there-are-two-ways-of-defining-constants-in-c","title":"There are two ways of defining Constants in C++ :"}],[{"id":"dea7069c-ce24-4f2e-be6f-135e2b564020","level":3,"previousLevel":3,"parentId":"713a02b9-b1de-4f0f-874e-e98c7a17a90e","slug":"syntax","title":"Syntax :"}],[{"id":"5a3386ae-b087-4033-a4a3-2d1e5f96410c","level":3,"previousLevel":3,"parentId":"713a02b9-b1de-4f0f-874e-e98c7a17a90e","slug":"example","title":"Example :"}],[{"id":"d7e92902-d64e-44a3-af5a-9656e550c40e","level":3,"previousLevel":3,"parentId":"713a02b9-b1de-4f0f-874e-e98c7a17a90e","slug":"syntax","title":"Syntax :"}],[{"id":"7fc72376-a156-4785-951c-8dec848281fc","level":3,"previousLevel":3,"parentId":"713a02b9-b1de-4f0f-874e-e98c7a17a90e","slug":"example","title":"Example :"}],[{"id":"e30028eb-8699-481c-adb8-ee57b29d4395","level":3,"previousLevel":3,"parentId":"713a02b9-b1de-4f0f-874e-e98c7a17a90e","slug":"types-of-constants","title":"Types of Constants :"}],[{"id":"e797b255-0398-4a6b-b02a-415932986f25","level":2,"previousLevel":3,"parentId":null,"slug":"literals","title":"Literals :"}],[{"id":"1961a953-df82-4a15-8276-e774b6ce1ecc","level":3,"previousLevel":2,"parentId":"e797b255-0398-4a6b-b02a-415932986f25","slug":"example","title":"Example :"}],[{"id":"9da9eb54-caf2-4484-add4-040eaefc2391","level":3,"previousLevel":3,"parentId":"e797b255-0398-4a6b-b02a-415932986f25","slug":"types-of-literals","title":"Types of Literals :"}],[{"id":"c2150881-5ac1-4ce6-bc6b-25c0ec104e92","level":2,"previousLevel":3,"parentId":null,"slug":"special-symbols","title":"Special Symbols :"}],[{"id":"b2c9e1e4-5053-4c0e-847f-e55d68cefdf4","level":3,"previousLevel":2,"parentId":"c2150881-5ac1-4ce6-bc6b-25c0ec104e92","slug":"the-following-are-some-of-the-special-symbols-supported-by-c","title":"The following are some of the Special Symbols supported by C++ :"}]],"numUniqueUsersWhoReacted":0,"_id":"62a743bc4754a2eb1e0a8e82","title":"Fundamentals of C++","subtitle":"A complete guide to mastering C++ from basics to advance!","type":"story","coverImageAttribution":"","coverImagePhotographer":"","isCoverAttributionHidden":false,"ogImage":"","metaTitle":"Fundamentals of C++  , tokens in c++ , identifiers in c++","metaDescription":"Before going into the syntax of a C++ program, let us first understand some basic terms. Tokens, Identifiers, Constants, Literals, Variables, operator","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"6285a82d83966a1653f1383f","slug":"fundamentals-of-c","importedFromMedium":false,"dateAdded":"2022-06-13T14:03:40.086Z","hasCustomDate":false,"hasScheduledDate":false,"stickCoverToBottom":false,"series":"628a2e1eaad1d357809ff923","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"cl4ct31fy06twjpnv1q242tvx","author":"6286100a7b02ca162edae0a2","followersCount":1,"draft":"629f2616aa1e065bd75f6af8","readTime":6,"__v":0,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":2,"reaction_5c090d96c2a9c2a674d35486":1,"reaction_5c090d96c2a9c2a674d35485":1,"reaction_567453d0b73d6a82ac8c5abd":1,"reaction_5c090d96c2a9c2a674d3548b":1,"reaction_5d9dd859f31791c942dc5b52":1,"reaction_5c090d96c2a9c2a674d35488":1,"reaction_5c090d96c2a9c2a674d3548a":1,"reaction_567453d0b73d6a82ac8c5ab9":1,"reaction_567453d0b73d6a82ac8c5abc":1},"viewsUpdatedOn":1664308811887,"uniqueReactions":["5c090d96c2a9c2a674d35484","5c090d96c2a9c2a674d35486","5c090d96c2a9c2a674d35485","567453d0b73d6a82ac8c5abd","5c090d96c2a9c2a674d3548b","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d35488","5c090d96c2a9c2a674d3548a","567453d0b73d6a82ac8c5ab9","567453d0b73d6a82ac8c5abc"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":2,"reaction_5c090d96c2a9c2a674d35486":1,"reaction_5c090d96c2a9c2a674d35485":1,"reaction_567453d0b73d6a82ac8c5abd":1,"reaction_5c090d96c2a9c2a674d3548b":1,"reaction_5d9dd859f31791c942dc5b52":1,"reaction_5c090d96c2a9c2a674d35488":1,"reaction_5c090d96c2a9c2a674d3548a":1,"reaction_567453d0b73d6a82ac8c5ab9":1,"reaction_567453d0b73d6a82ac8c5abc":1},"id":"62a743bc4754a2eb1e0a8e82"},{"audioUrls":{"male":"https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl45u1mbj003txonvh95w6mvm-male"},"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":89,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1654707299019/aqJFAaqcw.png","autoGeneratedCover":"","brief":"We all know that we can use a variable to store a single value but if we have to store 100 values at a time, then declaring and initializing 100 variables is not an optimized way of doing things. For this purpose, we have arrays in C to store data of...","content":"<p>We all know that we can use a variable to store a single value but if we have to store 100 values at a time, then declaring and initializing 100 variables is not an optimized way of doing things. For this purpose, we have arrays in C to store data of a similar data type. Arrays in C are classified into one-dimensional, two-dimensional, and multi-dimensional arrays. Array indices always start from 0 and end with size-1.</p>\n<h1 id=\"heading-what-is-an-array\">What is an Array?</h1>\n<p>An array is a collection of one or more values of the same data type stored in contiguous memory locations. The data type can be user-defined or even any other primitive data type. Elements of an array can be accessed with the same array name by specifying the index number as the location in memory.</p>\n<h1 id=\"heading-types-of-arrays\">Types of Arrays</h1>\n<p>Arrays in C are classified into three types:</p>\n<ul>\n<li>One-dimensional arrays</li>\n<li>Two-dimensional arrays</li>\n<li>Multi-dimensional arrays</li>\n</ul>\n<h1 id=\"heading-introduction-to-one-dimensional-array-in-c\">Introduction to One Dimensional Array in C</h1>\n<p>We can visualize a one-dimensional array in C as a single row to store the elements. All the elements are stored at contiguous memory locations. Now, we will see how to declare, initialize and access array elements:</p>\n<h2 id=\"heading-array-declaration\">Array Declaration</h2>\n<p>While declaring a one-dimensional array in C, the data type can be of any type, and also, we can give any name to the array, just like naming a random variable. Syntax:</p>\n<pre><code><span class=\"hljs-type\">int</span> arr[<span class=\"hljs-number\">5</span>]; //arr <span class=\"hljs-keyword\">is</span> the <span class=\"hljs-keyword\">array</span> <span class=\"hljs-type\">name</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">integer</span>, <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">is</span> the size <span class=\"hljs-keyword\">of</span> the <span class=\"hljs-keyword\">array</span>\n</code></pre><h2 id=\"heading-array-initialization\">Array Initialization</h2>\n<p>In static uninitialized arrays, all the elements initially contain garbage values, but we can explicitly initialize them at their declaration.</p>\n<p>Syntax:</p>\n<pre><code><span class=\"hljs-operator\">&lt;</span>data_type<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>arr_name<span class=\"hljs-operator\">&gt;</span> [arr_size]<span class=\"hljs-operator\">=</span>{value1, value2, value3,…};\n</code></pre><p>Here, parameterized values are constant values separated by a comma.</p>\n<p>We can skip the writing size of the array within square brackets if we initialize array elements explicitly within the list at the time of declaration. In that case, it will pick elements list size as array size.</p>\n<p>Example:</p>\n<pre><code><span class=\"hljs-attribute\">int</span> nums[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>}; //array nums is initialized with elements <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>\n</code></pre><p>If we want to initialize all elements of an integer array to zero, we could simply write:</p>\n<pre><code><span class=\"hljs-keyword\">int</span> <span class=\"hljs-operator\">&lt;</span>array name<span class=\"hljs-operator\">&gt;</span>[size] <span class=\"hljs-operator\">=</span> {<span class=\"hljs-number\">0</span>};\n</code></pre><h1 id=\"heading-array-accessing\">Array Accessing</h1>\n<p>In one-dimensional arrays in C, elements are accessed by specifying the array name and the index value within the square brackets. Array indexing starts from 0 and ends with size-1. If we try to access array elements out of the range, the compiler will not show any error message; rather, it will return some garbage value.</p>\n<p>Syntax:</p>\n<pre><code><span class=\"hljs-operator\">&lt;</span>arr_name<span class=\"hljs-operator\">&gt;</span>[index];\n</code></pre><p>Example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">int</span> nums[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>};\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, nums[<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">//Array element at index 0 is printed</span>\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, nums[<span class=\"hljs-number\">-1</span>]); <span class=\"hljs-comment\">//Garbage value will be printed</span>\n</code></pre>\n<p>C Program to illustrate declaration, initialization and accessing of elements of one-dimensional array in C:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> arr[<span class=\"hljs-number\">3</span>] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>}; <span class=\"hljs-comment\">//declaring and initializing one-dimensional array in C</span>\n\n    <span class=\"hljs-comment\">// After declaration, we can also initialize array as:</span>\n    <span class=\"hljs-comment\">// arr[0] = 10; arr[1] = 20; arr[2] = 30;</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) {\n        <span class=\"hljs-comment\">// accessing elements of array</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\" Value of arr[%d]: %d\\n\"</span>, i, arr[i]);\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre><code> <span class=\"hljs-attribute\">Value</span> of arr[<span class=\"hljs-number\">0</span>]: <span class=\"hljs-number\">10</span>\n <span class=\"hljs-attribute\">Value</span> of arr[<span class=\"hljs-number\">1</span>]: <span class=\"hljs-number\">20</span>\n <span class=\"hljs-attribute\">Value</span> of arr[<span class=\"hljs-number\">2</span>]: <span class=\"hljs-number\">30</span>\n</code></pre><p>In this C programming code, we have initialized an array at the time of declaration with size 3 and array name as arr. At the end of the code, we are trying to print the array values by accessing its elements.</p>\n<h1 id=\"heading-rules-for-declaring-one-dimensional-array-in-c\">Rules for Declaring One Dimensional Array in C</h1>\n<p>Before using and accessing, we must declare the array variable.\nIn array, indexing starts from 0 and ends at size-1. For example, if we have arr[10] of size 10, then the indexing of elements ranges from 0 to 9.\nWe must include data-type and variable names while declaring one-dimensional arrays in C.\nWe can initialize them explicitly when the declaration specifies array size within square brackets is not necessary.\nEach element of the array is stored at a contiguous memory location with a unique index number for accessing.\nInitialization of One-Dimensional Array in C\nAfter declaration, we can initialize array elements or simply initialize them explicitly at the time of declaration. One-Dimensional arrays in C are initialized either at Compile Time or Run Time.</p>\n<h1 id=\"heading-compile-time-initialization\">Compile-Time Initialization</h1>\n<p>Compile-Time initialization is also known as static initialization. In this, array elements are initialized when we declare the array implicitly.</p>\n<p>Syntax:</p>\n<pre><code><span class=\"hljs-operator\">&lt;</span>data_type<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>array_name<span class=\"hljs-operator\">&gt;</span> [array_size]<span class=\"hljs-operator\">=</span>{list of elements};\n</code></pre><p>Example:</p>\n<pre><code><span class=\"hljs-attribute\">int</span> nums[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>};\n</code></pre><p>C Program to illustrate Compile-Time Initialization:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-keyword\">int</span> nums[<span class=\"hljs-number\">3</span>]={<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>};\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\" Compile-Time Initialization Example:\\n\"</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\" %d \"</span>,nums[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>,nums[<span class=\"hljs-number\">1</span>]);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>,nums[<span class=\"hljs-number\">2</span>]);\n}\n</code></pre>\n<p>Output:</p>\n<pre><code><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\n</code></pre><p>In this C program code, we have initialized array nums of size 3 and elements as 0,1  and 2 in the list. This is compile-time initialization and then at the end, we have printed all its values by accessing index-wise.</p>\n<h1 id=\"heading-run-time-initialization\">Run-Time Initialization</h1>\n<p>Runtime initialization is also known as dynamic-initialization. Array elements are initialized at the runtime after successfully compiling the program.</p>\n<p>Example:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;nums[<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">//initializing 0th index element at runtime dynamically</span>\n</code></pre>\n<p>C Program to illustrate Run-Time Initialization:</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> nums[<span class=\"hljs-number\">5</span>];\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n Run-Time Initialization Example:\\n\"</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n Enter array elements: \"</span>);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;nums[i]);\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\" Accessing array elements after dynamic Initialization: \"</span>);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, nums[i]);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>Input</p>\n<p>Run-Time Initialisation Example:    </p>\n<pre><code><span class=\"hljs-attr\">Enter array elements:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-number\">50</span>\n</code></pre><p>Output:</p>\n<p>Accessing array elements after dynamic Initialization: 10 20 30 40 50\nTo demonstrate runtime initialization, we have just declared array nums of size 5 in this C programming code. After that, within a loop, we are asking the user to enter the array values to initialize it after the compilation of the code. In the end, we have printed its values by accessing them index-wise.</p>\n<h2 id=\"heading-copying-one-dimensional-arrays-in-c\">Copying One-Dimensional Arrays in C</h2>\n<p>If we have two arrays - array1 and array2, one is initialized and another array is just declared, and suppose, if we have to copy array1 elements to array2 then we can't simply just write:</p>\n<pre><code><span class=\"hljs-attribute\">int</span> array<span class=\"hljs-number\">1</span>[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>};\n<span class=\"hljs-attribute\">int</span> array<span class=\"hljs-number\">2</span>[<span class=\"hljs-number\">5</span>];\n<span class=\"hljs-attribute\">array2</span> = array<span class=\"hljs-number\">1</span>; //This statement is wrong, it will produce an error\n</code></pre><p>The primary condition to copy an array is that the copy array's size should be less than the original array.</p>\n<p>Program to illustrate copying of elements of a one-dimensional array in C</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> array1[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>};\n    <span class=\"hljs-keyword\">int</span> array2[<span class=\"hljs-number\">5</span>];\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Copying One-Dimensional Arrays in C:\\n\"</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Array1 elements: \"</span>);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, array1[i]);\n        array2[i] = array1[i]; <span class=\"hljs-comment\">// Copying array1 elements to array2</span>\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nArray2 elements after copying: \"</span>);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, array2[i]);\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre><code><span class=\"hljs-attr\">Copying One-Dimensional Arrays in C:</span>\n<span class=\"hljs-attr\">Array1 elements:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-number\">50</span> \n<span class=\"hljs-attr\">Array2 elements after copying:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-number\">50</span>\n</code></pre><p>In this C programming code, we have taken two arrays: array1 and array2. array1 has been initialized at the time of declaration and to illustrate the concept of copying array elements, we are assigning array1 values to array2 within a loop. In the end, we have printed the values of both arrays.</p>\n<h2 id=\"heading-points-to-remember-about-array-in-c\">Points to Remember About Array in C</h2>\n<ul>\n<li>Arrays in C are a collection of similar data-type elements stored at contiguous memory locations.</li>\n<li>In arrays in C, all the elements have the same data type and can be accessed by their unique index value.</li>\n<li>Array indexing starts from 0 and ends with size-1.</li>\n<li>One-dimensional arrays in C can be initialized statically (during compile-time) or dynamically (during runtime).</li>\n<li>We must include the data type, variable name for the array, and size of the array in square brackets while declaring one-dimensional arrays in C.</li>\n</ul>\n<h1 id=\"heading-conclusion\">Conclusion</h1>\n<ul>\n<li>Arrays in C have derived data types containing similar data-type elements.</li>\n<li>In one-dimensional arrays in C, indexing starts from 0 and ends at size-1, and if we try to access an element out of range, it will return a garbage value.</li>\n<li>We must include a data type, variable name for array, and array size in square brackets while declaring one-dimensional arrays in C.</li>\n<li>One-dimensional arrays in C can be initialized statically (during compile-time) or dynamically (during runtime).</li>\n<li>All the elements of an array are stored at contiguous memory locations, and therefore, we can access them using their unique index number.</li>\n</ul>\n","contentMarkdown":"We all know that we can use a variable to store a single value but if we have to store 100 values at a time, then declaring and initializing 100 variables is not an optimized way of doing things. For this purpose, we have arrays in C to store data of a similar data type. Arrays in C are classified into one-dimensional, two-dimensional, and multi-dimensional arrays. Array indices always start from 0 and end with size-1.\n\n# What is an Array?\nAn array is a collection of one or more values of the same data type stored in contiguous memory locations. The data type can be user-defined or even any other primitive data type. Elements of an array can be accessed with the same array name by specifying the index number as the location in memory.\n\n# Types of Arrays\nArrays in C are classified into three types:\n\n- One-dimensional arrays\n- Two-dimensional arrays\n- Multi-dimensional arrays\n\n# Introduction to One Dimensional Array in C\n\nWe can visualize a one-dimensional array in C as a single row to store the elements. All the elements are stored at contiguous memory locations. Now, we will see how to declare, initialize and access array elements:\n\n\n## Array Declaration\nWhile declaring a one-dimensional array in C, the data type can be of any type, and also, we can give any name to the array, just like naming a random variable. Syntax:\n\n```\nint arr[5]; //arr is the array name of type integer, and 5 is the size of the array\n```\n## Array Initialization\nIn static uninitialized arrays, all the elements initially contain garbage values, but we can explicitly initialize them at their declaration.\n\nSyntax:\n\n```\n<data_type> <arr_name> [arr_size]={value1, value2, value3,…};\n```\n\nHere, parameterized values are constant values separated by a comma.\n\nWe can skip the writing size of the array within square brackets if we initialize array elements explicitly within the list at the time of declaration. In that case, it will pick elements list size as array size.\n\nExample:\n\n```\nint nums[5] = {0, 1, 2, 3, 4}; //array nums is initialized with elements 0,1,2,3,4\n```\nIf we want to initialize all elements of an integer array to zero, we could simply write:\n\n```\nint <array name>[size] = {0};\n```\n# Array Accessing\nIn one-dimensional arrays in C, elements are accessed by specifying the array name and the index value within the square brackets. Array indexing starts from 0 and ends with size-1. If we try to access array elements out of the range, the compiler will not show any error message; rather, it will return some garbage value.\n\nSyntax:\n\n```\n<arr_name>[index];\n```\nExample:\n```c\nint nums[5] = {0, 1, 2, 3, 4};\nprintf(\"%d\", nums[0]); //Array element at index 0 is printed\nprintf(\"%d\", nums[-1]); //Garbage value will be printed\n```\nC Program to illustrate declaration, initialization and accessing of elements of one-dimensional array in C:\n\n```c\n#include <stdio.h>\nint main() {\n\tint arr[3] = {10, 20, 30}; //declaring and initializing one-dimensional array in C\n\n\t// After declaration, we can also initialize array as:\n\t// arr[0] = 10; arr[1] = 20; arr[2] = 30;\n\n\tfor (int i = 0; i < 3; i++) {\n\t\t// accessing elements of array\n\t\tprintf(\" Value of arr[%d]: %d\\n\", i, arr[i]);\n\t}\n}\n```\nOutput:\n```\n Value of arr[0]: 10\n Value of arr[1]: 20\n Value of arr[2]: 30\n```\nIn this C programming code, we have initialized an array at the time of declaration with size 3 and array name as arr. At the end of the code, we are trying to print the array values by accessing its elements.\n\n# Rules for Declaring One Dimensional Array in C\nBefore using and accessing, we must declare the array variable.\nIn array, indexing starts from 0 and ends at size-1. For example, if we have arr[10] of size 10, then the indexing of elements ranges from 0 to 9.\nWe must include data-type and variable names while declaring one-dimensional arrays in C.\nWe can initialize them explicitly when the declaration specifies array size within square brackets is not necessary.\nEach element of the array is stored at a contiguous memory location with a unique index number for accessing.\nInitialization of One-Dimensional Array in C\nAfter declaration, we can initialize array elements or simply initialize them explicitly at the time of declaration. One-Dimensional arrays in C are initialized either at Compile Time or Run Time.\n\n# Compile-Time Initialization\nCompile-Time initialization is also known as static initialization. In this, array elements are initialized when we declare the array implicitly.\n\nSyntax:\n\n```\n<data_type> <array_name> [array_size]={list of elements};\n```\n\nExample:\n\n```\nint nums[5] = {0, 1, 2, 3, 4};\n\n```\nC Program to illustrate Compile-Time Initialization:\n```c\n#include <stdio.h>\nint main(){\n    int nums[3]={0,1,2};\n    printf(\" Compile-Time Initialization Example:\\n\");\n    printf(\" %d \",nums[0]);\n    printf(\"%d \",nums[1]);\n    printf(\"%d \",nums[2]);\n}\n```\nOutput:\n\n```\n0 1 2\n```\nIn this C program code, we have initialized array nums of size 3 and elements as 0,1  and 2 in the list. This is compile-time initialization and then at the end, we have printed all its values by accessing index-wise.\n\n# Run-Time Initialization\nRuntime initialization is also known as dynamic-initialization. Array elements are initialized at the runtime after successfully compiling the program.\n\nExample:\n```c\nscanf(\"%d\", &nums[0]); //initializing 0th index element at runtime dynamically\n```\nC Program to illustrate Run-Time Initialization:\n\n```c\n#include <stdio.h>\n\nint main() {\n\tint nums[5];\n\tprintf(\"\\n Run-Time Initialization Example:\\n\");\n\tprintf(\"\\n Enter array elements: \");\n\n\tfor (int i = 0; i < 5; i++) {\n\t\tscanf(\"%d\", &nums[i]);\n\t}\n\n\tprintf(\" Accessing array elements after dynamic Initialization: \");\n\n\tfor (int i = 0; i < 5; i++) {\n\t\tprintf(\"%d \", nums[i]);\n\t}\n    \n    return 0;\n}\n```\nInput\n\nRun-Time Initialisation Example:    \n\n```\nEnter array elements: 10 20 30 40 50\n```\nOutput:\n\nAccessing array elements after dynamic Initialization: 10 20 30 40 50\nTo demonstrate runtime initialization, we have just declared array nums of size 5 in this C programming code. After that, within a loop, we are asking the user to enter the array values to initialize it after the compilation of the code. In the end, we have printed its values by accessing them index-wise.\n\n## Copying One-Dimensional Arrays in C\nIf we have two arrays - array1 and array2, one is initialized and another array is just declared, and suppose, if we have to copy array1 elements to array2 then we can't simply just write:\n\n```\nint array1[5] = {0, 1, 2, 3, 4};\nint array2[5];\narray2 = array1; //This statement is wrong, it will produce an error\n```\nThe primary condition to copy an array is that the copy array's size should be less than the original array.\n\nProgram to illustrate copying of elements of a one-dimensional array in C\n```c\n#include <stdio.h>\nint main() {\n\tint array1[5] = {10, 20, 30, 40, 50};\n\tint array2[5];\n\tprintf(\"Copying One-Dimensional Arrays in C:\\n\");\n\tprintf(\"Array1 elements: \");\n\n\tfor (int i = 0; i < 5; i++) {\n\t\tprintf(\"%d \", array1[i]);\n\t\tarray2[i] = array1[i]; // Copying array1 elements to array2\n\t}\n\n\tprintf(\"\\nArray2 elements after copying: \");\n\n\tfor (int i = 0; i < 5; i++) {\n\t\tprintf(\"%d \", array2[i]);\n\t}\n}\n```\nOutput:\n```\nCopying One-Dimensional Arrays in C:\nArray1 elements: 10 20 30 40 50 \nArray2 elements after copying: 10 20 30 40 50\n``` \nIn this C programming code, we have taken two arrays: array1 and array2. array1 has been initialized at the time of declaration and to illustrate the concept of copying array elements, we are assigning array1 values to array2 within a loop. In the end, we have printed the values of both arrays.\n\n## Points to Remember About Array in C\n\n- Arrays in C are a collection of similar data-type elements stored at contiguous memory locations.\n- In arrays in C, all the elements have the same data type and can be accessed by their unique index value.\n- Array indexing starts from 0 and ends with size-1.\n- One-dimensional arrays in C can be initialized statically (during compile-time) or dynamically (during runtime).\n- We must include the data type, variable name for the array, and size of the array in square brackets while declaring one-dimensional arrays in C.\n\n#  Conclusion\n\n- Arrays in C have derived data types containing similar data-type elements.\n- In one-dimensional arrays in C, indexing starts from 0 and ends at size-1, and if we try to access an element out of range, it will return a garbage value.\n- We must include a data type, variable name for array, and array size in square brackets while declaring one-dimensional arrays in C.\n- One-dimensional arrays in C can be initialized statically (during compile-time) or dynamically (during runtime).\n- All the elements of an array are stored at contiguous memory locations, and therefore, we can access them using their unique index number.","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["578e290c5460288cdeb6f187","56744721958ef13879b9492c","5f789ec19c3b6e410121699a","56744722958ef13879b951bb"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5461.4334,"responses":[{"popularity":5464.0874,"isActive":true,"upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"score":0,"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"_id":"62a3b21d165482d2b3eea347","content":"<p>Thanks <a class=\"user-mention\" href=\"https://hashnode.com/@abbhishek\">Abhishek kushwaha</a></p>\n","contentMarkdown":"Thanks @[Abhishek kushwaha](@abbhishek)","author":"624226a5db84f8c50fa5b247","stamp":"cl48xu1e301orq2nvhdkscbpe","post":"62a0d4a968ad9b73958af441","replies":[],"dateAdded":"2022-06-10T21:05:33.580Z","badgesAwarded":[],"__v":0},{"popularity":5460.0747,"isActive":true,"upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"score":0,"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"_id":"62a0f0c0aa709871a80be9e6","content":"<p>Another great article....love it 🧡</p>\n","contentMarkdown":"Another great article....love it 🧡","author":"625ed5f857bc3611152044db","stamp":"cl45ybq4l01hwjznv7g6c90p7","post":"62a0d4a968ad9b73958af441","replies":[],"dateAdded":"2022-06-08T18:56:00.262Z","badgesAwarded":[],"__v":0}],"responseCount":2,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35488","567453d0b73d6a82ac8c5abd","5c090d96c2a9c2a674d35486","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5abc","567453d0b73d6a82ac8c5ab9","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548a","5c090d96c2a9c2a674d35484"],"totalReactions":33,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":true,"enableToc":true,"toc":[[{"id":"f069d572-059f-4523-ae0a-f8b663207f92","level":1,"previousLevel":null,"parentId":null,"slug":"what-is-an-array","title":"What is an Array?"}],[{"id":"08a34b52-4d19-4ca0-93a2-fee44ed32d95","level":1,"previousLevel":1,"parentId":null,"slug":"types-of-arrays","title":"Types of Arrays"}],[{"id":"9d2d690f-269f-4049-9e95-39346fe00616","level":1,"previousLevel":1,"parentId":null,"slug":"introduction-to-one-dimensional-array-in-c","title":"Introduction to One Dimensional Array in C"}],[{"id":"08dd36ce-7c9b-4007-bd13-0111771dba84","level":2,"previousLevel":1,"parentId":"9d2d690f-269f-4049-9e95-39346fe00616","slug":"array-declaration","title":"Array Declaration"}],[{"id":"5c8abb51-f17e-4027-8c34-83b2c83b94eb","level":2,"previousLevel":2,"parentId":"9d2d690f-269f-4049-9e95-39346fe00616","slug":"array-initialization","title":"Array Initialization"}],[{"id":"9eede0df-f2c6-4804-b8f2-0f8d89b9cf16","level":1,"previousLevel":2,"parentId":null,"slug":"array-accessing","title":"Array Accessing"}],[{"id":"cc073f1d-0163-4b1a-b279-5597ab7205cf","level":1,"previousLevel":1,"parentId":null,"slug":"rules-for-declaring-one-dimensional-array-in-c","title":"Rules for Declaring One Dimensional Array in C"}],[{"id":"a3eaa582-2c35-4f01-9817-6fa5005663cb","level":1,"previousLevel":1,"parentId":null,"slug":"compile-time-initialization","title":"Compile-Time Initialization"}],[{"id":"a4c67c08-66a2-475a-a3ea-baa8f23e651a","level":1,"previousLevel":1,"parentId":null,"slug":"run-time-initialization","title":"Run-Time Initialization"}],[{"id":"47af330e-f39e-4c1f-bc60-698b127e812d","level":2,"previousLevel":1,"parentId":"a4c67c08-66a2-475a-a3ea-baa8f23e651a","slug":"copying-one-dimensional-arrays-in-c","title":"Copying One-Dimensional Arrays in C"}],[{"id":"5359f687-755d-428d-ac75-69465d78b910","level":2,"previousLevel":2,"parentId":"a4c67c08-66a2-475a-a3ea-baa8f23e651a","slug":"points-to-remember-about-array-in-c","title":"Points to Remember About Array in C"}],[{"id":"2096d76a-6a15-4440-ad46-237ac3cc53c1","level":1,"previousLevel":2,"parentId":null,"slug":"conclusion","title":"Conclusion"}]],"numUniqueUsersWhoReacted":0,"_id":"62a0d4a968ad9b73958af441","title":"Introduction To Arrays","subtitle":"This article starts with introducing one-dimensional arrays in C, and we learn about array initializing, its declaration, and accessing of its element","type":"story","coverImageAttribution":"","coverImagePhotographer":"","isCoverAttributionHidden":false,"metaTitle":"Introduction To Arrays","metaDescription":"This article starts with introducing one-dimensional arrays in C, and we learn about array initializing, its declaration, and accessing of its element","partOfPublication":true,"publication":"6285a82d83966a1653f1383f","slug":"introduction-to-arrays","series":"628a2bb4929bcf4c721d471f","pollOptions":[],"dateAdded":"2022-06-08T16:56:09.953Z","badges":[],"questionReplies":[],"contributors":[{"_id":"62a3b21d165482d2b3eea348","user":"624226a5db84f8c50fa5b247","stamp":"cl48xu1e301orq2nvhdkscbpe"},{"_id":"62a0f0c0aa709871a80be9e7","user":"625ed5f857bc3611152044db","stamp":"cl45ybq4l01hwjznv7g6c90p7"}],"cuid":"cl45u1mbj003txonvh95w6mvm","author":"61f829629030330a7b25a024","followersCount":1,"draft":"62a0ce18aa709871a80be5b2","isRepublished":false,"readTime":7,"__v":3,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35485":4,"reaction_5c090d96c2a9c2a674d35488":3,"reaction_567453d0b73d6a82ac8c5abd":3,"reaction_5c090d96c2a9c2a674d35486":3,"reaction_5c090d96c2a9c2a674d3548b":3,"reaction_567453d0b73d6a82ac8c5abc":3,"reaction_567453d0b73d6a82ac8c5ab9":3,"reaction_5d9dd859f31791c942dc5b52":3,"reaction_5c090d96c2a9c2a674d3548a":3,"reaction_5c090d96c2a9c2a674d35484":5},"viewsUpdatedOn":1664789406204,"lastActivity":"2022-06-10T21:05:33.587Z","dateUpdated":"2022-06-09T03:38:18.167Z","pendingPublicationApproval":false,"uniqueReactions":["5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35488","567453d0b73d6a82ac8c5abd","5c090d96c2a9c2a674d35486","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5abc","567453d0b73d6a82ac8c5ab9","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548a","5c090d96c2a9c2a674d35484"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35485":4,"reaction_5c090d96c2a9c2a674d35488":3,"reaction_567453d0b73d6a82ac8c5abd":3,"reaction_5c090d96c2a9c2a674d35486":3,"reaction_5c090d96c2a9c2a674d3548b":3,"reaction_567453d0b73d6a82ac8c5abc":3,"reaction_567453d0b73d6a82ac8c5ab9":3,"reaction_5d9dd859f31791c942dc5b52":3,"reaction_5c090d96c2a9c2a674d3548a":3,"reaction_5c090d96c2a9c2a674d35484":5},"id":"62a0d4a968ad9b73958af441"},{"audioUrls":{"male":"https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl40tgnxr00baiznvaerkbno1-male"},"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":159,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1654403952116/8bGFqHJ_Z.png","autoGeneratedCover":"","brief":"what drove the creation of C++?\nBack in the days, people worked on low-level programming languages (Assembly language) which, for the most part, were hardware-dependent and were complex to understand. Then high-level programming languages (like that ...","content":"<h2 id=\"heading-what-drove-the-creation-of-c\">what drove the creation of C++?</h2>\n<p>Back in the days, people worked on low-level programming languages (<strong>Assembly language</strong>) which, for the most part, were hardware-dependent and were complex to understand. Then high-level programming languages (like that of <strong>FORTRAN</strong>) were developed to write human-readable instructions to the machine. During the 1970s, the C language gained popularity and was the most widely used programming language for its dynamic memory management and efficiency. However, in the early 80s, people began realizing its shortcomings as it no longer proved to be efficient for working with more complex and larger programs. This increase in program complexity was the main factor that lead to the creation of C++. </p>\n<p>C++ was developed by <strong> Stroustrup</strong> at Bell Labs in 1979 as an extension of the C language. He wanted an efficient and simple language like C combined with high-level features that include the concepts of <strong>Object Oriented Programming( Encapsulation, Inheritance, Polymorphism, Data abstraction, etc), Exception handling, Constructors or Destructors.</strong></p>\n<h2 id=\"heading-introduction\">Introduction :</h2>\n<p>C++  is a multi-platform programming language that is used to create high-performance applications. It can be used to develop <strong>operating systems, browsers, games, and so on. </strong> Most popular operating systems like <strong>windows OS, MAC OS</strong> and <strong>Linux</strong>, which we still use today, were written in C++. Browsers like <strong>Chrome, Firefox</strong>, and <strong>Internet Explorer</strong> have a core rendering engine also written in C++.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1654351322463/uZudKm_0Q.gif\" alt=\"5nnkrcc3kixypm642opg.gif\" /></p>\n<h2 id=\"heading-key-features\">Key features :</h2>\n<ul>\n<li>Object-oriented  </li>\n<li>simple and efficient</li>\n<li>fast and powerful</li>\n<li>platform dependent</li>\n<li>Dynamic memory management</li>\n<li>a wide range of inbuilt library functions</li>\n</ul>\n","contentMarkdown":"## what drove the creation of C++?\nBack in the days, people worked on low-level programming languages (**Assembly language**) which, for the most part, were hardware-dependent and were complex to understand. Then high-level programming languages (like that of **FORTRAN**) were developed to write human-readable instructions to the machine. During the 1970s, the C language gained popularity and was the most widely used programming language for its dynamic memory management and efficiency. However, in the early 80s, people began realizing its shortcomings as it no longer proved to be efficient for working with more complex and larger programs. This increase in program complexity was the main factor that lead to the creation of C++. \n\nC++ was developed by ** Stroustrup** at Bell Labs in 1979 as an extension of the C language. He wanted an efficient and simple language like C combined with high-level features that include the concepts of **Object Oriented Programming( Encapsulation, Inheritance, Polymorphism, Data abstraction, etc), Exception handling, Constructors or Destructors.**\n\n## Introduction : \nC++  is a multi-platform programming language that is used to create high-performance applications. It can be used to develop **operating systems, browsers, games, and so on. ** Most popular operating systems like **windows OS, MAC OS** and **Linux**, which we still use today, were written in C++. Browsers like **Chrome, Firefox**, and **Internet Explorer** have a core rendering engine also written in C++.\n\n![5nnkrcc3kixypm642opg.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1654351322463/uZudKm_0Q.gif)\n\n ## Key features :\n\n- Object-oriented  \n- simple and efficient\n- fast and powerful\n- platform dependent\n- Dynamic memory management\n- a wide range of inbuilt library functions\n\n\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744721958ef13879b948b7","57b75ddd51da93ffde24c7d9","56744723958ef13879b955a9"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5453.418,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35484","5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35486","5c090d96c2a9c2a674d35488","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5ab9","567453d0b73d6a82ac8c5abc","5c090d96c2a9c2a674d3548a","567453d0b73d6a82ac8c5abd"],"totalReactions":20,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":true,"enableToc":true,"toc":[[{"id":"4cd6a9c8-9621-4d6c-bef6-cb10db8492d6","level":2,"previousLevel":null,"parentId":null,"slug":"what-drove-the-creation-of-c","title":"what drove the creation of C++?"}],[{"id":"bd063f4b-0091-40d8-a97e-c2c54e42118a","level":2,"previousLevel":2,"parentId":null,"slug":"introduction","title":"Introduction :"}],[{"id":"c3e40f2a-50da-43d1-bb57-9c716244d774","level":2,"previousLevel":2,"parentId":null,"slug":"key-features","title":"Key features :"}]],"numUniqueUsersWhoReacted":0,"_id":"629c33ddfe616239d48f549a","title":"Introduction to C++","subtitle":"A complete guide to mastering C++ from basics to advance !","type":"story","coverImageAttribution":"","coverImagePhotographer":"","isCoverAttributionHidden":false,"ogImage":"","metaTitle":"Introduction to C++  , cpp best blog","metaDescription":"A complete guide to mastering C++ from basics to advance!","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"6285a82d83966a1653f1383f","slug":"introduction-to-cpp","importedFromMedium":false,"dateAdded":"2022-06-04T15:27:43.388Z","hasCustomDate":true,"hasScheduledDate":false,"stickCoverToBottom":false,"series":"628a2e1eaad1d357809ff923","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"cl40tgnxr00baiznvaerkbno1","author":"6286100a7b02ca162edae0a2","followersCount":2,"draft":"629afa8fa414e02d6a7011c5","readTime":2,"__v":1,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":2,"reaction_5c090d96c2a9c2a674d35485":2,"reaction_5c090d96c2a9c2a674d35486":2,"reaction_5c090d96c2a9c2a674d35488":2,"reaction_5d9dd859f31791c942dc5b52":2,"reaction_5c090d96c2a9c2a674d3548b":2,"reaction_567453d0b73d6a82ac8c5ab9":2,"reaction_567453d0b73d6a82ac8c5abc":2,"reaction_5c090d96c2a9c2a674d3548a":2,"reaction_567453d0b73d6a82ac8c5abd":2},"dateUpdated":"2022-06-05T04:52:16.435Z","viewsUpdatedOn":1664697610481,"uniqueReactions":["5c090d96c2a9c2a674d35484","5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35486","5c090d96c2a9c2a674d35488","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5ab9","567453d0b73d6a82ac8c5abc","5c090d96c2a9c2a674d3548a","567453d0b73d6a82ac8c5abd"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":2,"reaction_5c090d96c2a9c2a674d35485":2,"reaction_5c090d96c2a9c2a674d35486":2,"reaction_5c090d96c2a9c2a674d35488":2,"reaction_5d9dd859f31791c942dc5b52":2,"reaction_5c090d96c2a9c2a674d3548b":2,"reaction_567453d0b73d6a82ac8c5ab9":2,"reaction_567453d0b73d6a82ac8c5abc":2,"reaction_5c090d96c2a9c2a674d3548a":2,"reaction_567453d0b73d6a82ac8c5abd":2},"id":"629c33ddfe616239d48f549a"},{"audioUrls":{"male":"https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl3zel8l000uj77nv14im4g16-male"},"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":5,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1654318253696/liknW0y-c.jpg","autoGeneratedCover":"","brief":"### Introduction:\n#include <iostream.h>  \n#include<conio.h>  \nvoid main() {  \n   clrscr();  \n   cout << \"Welcome to C++ Programming.\";   \n   getch();  \n}","content":"<p><strong><em>### Introduction:</em></strong></p>\n<pre><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream.h&gt;  </span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;conio.h&gt;  </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{  \n   clrscr();  \n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Welcome to C++ Programming.\"</span>;   \n   getch();  \n}\n</code></pre>","contentMarkdown":"***### Introduction:***\n```\n#include <iostream.h>  \n#include<conio.h>  \nvoid main() {  \n   clrscr();  \n   cout << \"Welcome to C++ Programming.\";   \n   getch();  \n} \n```","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["629ae616f3e81428fc189884"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5451.2759,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":false,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":false,"enableToc":true,"toc":[],"numUniqueUsersWhoReacted":0,"_id":"629ae616f3e81428fc189883","title":"Introduction to C++","subtitle":"a complete guide to starting C++","type":"story","coverImageAttribution":"","coverImagePhotographer":"","isCoverAttributionHidden":false,"ogImage":"","metaTitle":"","metaDescription":"","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"6285a82d83966a1653f1383f","slug":"introduction-to-cpp--deleted","importedFromMedium":false,"dateAdded":"2022-06-04T04:56:54.682Z","hasCustomDate":false,"hasScheduledDate":false,"stickCoverToBottom":false,"series":"628a2e1eaad1d357809ff923","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"cl3zel8l000uj77nv14im4g16","author":"6286100a7b02ca162edae0a2","followersCount":1,"draft":"629ae2e9f3e81428fc189847","readTime":1,"__v":0,"viewsUpdatedOn":1654363807846,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"629ae616f3e81428fc189883"},{"audioUrls":{"male":"https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl1i10xna03k6jvnv39ecdwmn-male"},"reward":{"type":"xlm"},"backups":{"github":{"owner":"Abbhiishek","repository":"Blogs"}},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":352,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1648913173103/Zxr0xF87L.png","autoGeneratedCover":"","brief":"Datatypes\nEvery day we meet names and numbers—at home, at work, at school, or at play. A person’s name is\na type of data; so is a number. We can thus speak of the two data types called “name” and “number.”\nConsider the statement:\nCaroline bought 3 dr...","content":"<h1 id=\"heading-datatypes\">Datatypes</h1>\n<p>Every day we meet names and numbers—at home, at work, at school, or at play. A person’s name is\na type of data; so is a number. We can thus speak of the two data types called “name” and “number.”\nConsider the statement:\nCaroline bought 3 dresses for $199.95\nHere, we can find:</p>\n<ul>\n<li><p>An example of a name: Caroline.</p>\n</li>\n<li><p>An example of a number: 3.</p>\n</li>\n<li><p>Two examples of numbers: 3 and 199.95.</p>\n</li>\n</ul>\n<p><br />\n<br /></p>\n<h2 id=\"heading-in-c-we-have-bunch-of-datatypes\">In C we have bunch of <code>Datatypes</code></h2>\n<ul>\n<li>we can divide <code>Datatypes</code> into three categories .<ol>\n<li><code>Primitive Datatypes</code></li>\n<li><code>Derived Datatypes</code></li>\n<li><code>User Defined Datatypes</code></li>\n</ol>\n</li>\n</ul>\n<p><br />\n<br /></p>\n<h2 id=\"heading-primitive-datatypes\"> <code>Primitive Datatypes</code> </h2>\n<p><br /></p>\n<ul>\n<li><p><code>Primitive Datatypes</code> are the datatypes which are not user defined .</p>\n</li>\n<li><p>Each primitive datatype has its own rules and conventions for naming variables.</p>\n<ul>\n<li><code>int</code>    // integer datatype</li>\n<li><code>long</code>   // integer datatype</li>\n<li><code>float</code>  // floating point datatype</li>\n<li><code>char</code>   // integer datatype</li>\n<li><code>double</code>  //  floating point datatype</li>\n</ul>\n</li>\n</ul>\n<table><tbody>\n<tr>\n<td>\n<h3>DATA TYPE</h3>\n</td>\n<td>\n<h3>MEMORY (bytes)</h3>\n</td>\n<td>\n<h3>RANGE</h3>\n</td>\n<td>\n<h3>FORMAT SPECIFIER</h3>\n</td>\n</tr>\n<tr>\n<td>\n<p>int</p>\n</td>\n<td>\n<p>4</p>\n</td>\n<td>\n<p>-231 to 231 - 1  </p>\n</td>\n<td>\n<p>%d </p>\n</td>\n</tr>\n<tr>\n<td>\n<p>char</p>\n</td>\n<td>\n<p>1</p>\n</td>\n<td>\n<p>-128 to 127</p>\n</td>\n<td>\n<p>%c</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>float</p>\n</td>\n<td>\n<p>4</p>\n</td>\n<td>\n<p>1.2E-38 to 3.4E+38</p>\n</td>\n<td>\n<p>%f</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>double</p>\n</td>\n<td>\n<p>8</p>\n</td>\n<td>\n<p>2.3E-308 to 1.7E+308</p>\n</td>\n<td>\n<p>%lf</p>\n</td>\n</tr>\n</tbody></table>\n\n<p><br />\n<br /></p>\n<ul>\n<li>Primary data types are also known as the <code>fundamental data types</code> because they are pre-defined or they already <code>exist</code> in the C language. All the other types of data types <code>(derived and user-defined data types)</code> are derived from these data types. Primary data types in C are of 4 types: <code>int</code>, <code>char</code>, <code>float</code>, and <code>double</code>.</li>\n</ul>\n<p><br />\n<br /></p>\n<h3 id=\"heading-int-datatypes\"><code>Int Datatypes</code></h3>\n<ul>\n<li>The int data type is used to store the integer values. Any number that falls in the range of <code>-∞ to +∞</code>is said to be an <code>integer</code>. </li>\n<li><p>For example 0, 10, 105, -15, -103, etc are all integers. <code>However, integers can be either negative or positive. And that’s where we use data type modifiers</code>, which we will be going to discuss later in this article.</p>\n</li>\n<li><p>In C language, the integers <code>cannot be represented as floating or decimal point numbers</code>. They can only be operated by/on integers themselves. For example, 4/3 is fine but 4/3.0 is not fine.  However, if the operation of two integers <code>results in a fraction number</code>, <code>the integer part will be stored as the final result</code>.</p>\n<p>  <code>Syntax</code></p>\n</li>\n</ul>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">int</span> variable_name;\n</code></pre>\n<h4 id=\"heading-example\"><code>Example</code></h4>\n<pre><code class=\"lang-c\">\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;    </span></span>\n\n<span class=\"hljs-comment\">// header file </span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span>; \n    <span class=\"hljs-comment\">// here we are declaring the variable a and assigning the value 10 to it.</span>\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">20</span>; \n    <span class=\"hljs-comment\">// here we are declaring the variable b and assigning the value 20 to it.</span>\n    <span class=\"hljs-keyword\">int</span> c = a + b;  \n    <span class=\"hljs-comment\">// doing the sum of a and b and storing the result in c.</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, c);\n    <span class=\"hljs-comment\">// printing the value of c.</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h4 id=\"heading-char-data-type\"><code>Char Data Type</code></h4>\n<ul>\n<li>The char data type is used to store the characters. The characters stored in a variable of char data type have a value equivalent to its integer code. </li>\n<li><p>These codes are often called American Standard Code For Information Interchange or ASCII codes. The ASCII code for upper case characters A to Z starts from 65 to 90 and for lower case characters a to z, it starts from 97 to 122.</p>\n</li>\n<li><p>The general size of a character is 1 byte. However, just like the integers the size of a char can vary according to the data type modifiers. Since all characters and symbols can be represented in their numerical ASCII value, the char type is often considered as an int type.</p>\n<p>  <code>Syntax</code></p>\n</li>\n</ul>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">char</span> variable_name;\n</code></pre>\n<p><code>Example</code>The following example illustrates the char data types in C.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n\n</span>{\n    <span class=\"hljs-comment\">//variable ch is initialised as char</span>\n    <span class=\"hljs-keyword\">char</span> ch = <span class=\"hljs-string\">'A'</span>;\n    <span class=\"hljs-comment\">//storing same ASCII code in int</span>\n    <span class=\"hljs-keyword\">int</span> num = ch;\n    <span class=\"hljs-comment\">//print the ASCII value of ch</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The ASCII code for %d\"</span>, ch);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\" is %d\"</span>, num);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Adding 1 to the character code \\n\"</span>); \n\n    <span class=\"hljs-comment\">//Adding 1 to the char variable ch</span>\n    ch += <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">//num stores the corresponding</span>\n    <span class=\"hljs-comment\">//ASCII value of ch</span>\n\n    num = ch;\n    <span class=\"hljs-comment\">//print the ASCII value of ch+1</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The ASCII code for %d\"</span>, ch);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\" is %d\"</span>, num);\n}\n</code></pre>\n<ul>\n<li>In the above example, we have initialized a variable ch with character A. Then, we have initialized an int variable with ch. Now, this variable is holding the ASCII value of character A. This has proven when we added 1 in the num and printed it, we got 66 as output. </li>\n</ul>\n<h3 id=\"heading-float-data-type\"><code>Float Data Type</code></h3>\n<p><br />\n<br /></p>\n<ul>\n<li>The float data type is used to store the floating-point numbers. The numbers that have a fractional part are called floating-point numbers. For example, 3.0, 5.57, -31.2, -3.12, etc are all floating-point numbers. Moreover, it should be noticed carefully that 8 is an integer but 8.0 is a floating-point number. </li>\n<li><p>Although the value of both the digits is the same, 8.0 has a decimal number which differentiates it with 8.</p>\n</li>\n<li><p>The major advantage of floating point numbers over integers is that they can represent a much larger and wider range of digits as compared to int data type.</p>\n<p>   <code>Syntax</code></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">float</span> varaible_name;\n</code></pre>\n</li>\n</ul>\n<p><code>Example</code>\nThe following example illustrates the float data types in C.</p>\n<pre><code class=\"lang-c\">\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n\n</span>{\n\n    <span class=\"hljs-comment\">//variable radius is initialised as float</span>\n\n    <span class=\"hljs-keyword\">float</span> radius = <span class=\"hljs-number\">10.0</span>; \n\n    <span class=\"hljs-comment\">//print the radius</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Radius of the circle is: %f\"</span>, radius);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n\n    <span class=\"hljs-comment\">//variable area is initialised as float</span>\n\n    <span class=\"hljs-keyword\">float</span> area;\n\n    area = <span class=\"hljs-number\">3.14</span> * radius * radius; \n\n    <span class=\"hljs-comment\">//print the area of the circle</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Area of the circle is :%f\"</span>, area);\n\n}\n</code></pre>\n<ul>\n<li>In the above example, we are calculating the area of a circle. Note that, we are multiplying only the variables having float data type with each other and storing the final result in another float type variable.</li>\n</ul>\n<h4 id=\"heading-double-data-type\"><code>Double Data Type</code></h4>\n<p><br />\n<br /></p>\n<ul>\n<li>The double data type is also used to store floating-point numbers. But still, it is considered as a distinct data type because of two reasons. </li>\n<li>The first one is that it occupies twice as much memory as type float. </li>\n<li><p>The second reason is that it is used to store a much larger range of floating-point numbers than a float data type.</p>\n</li>\n<li><p>The double stores almost double the number of significant digits after the decimal point or precision of the float. However, the double data type consumes more memory and it  is also slower as compared to float. So, it is advisable to use a smaller data type as much as possible for the sake of optimization of code.</p>\n<p>   <code>Syntax</code></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">double</span> variable_name;\n</code></pre>\n</li>\n</ul>\n<p><code>Example</code>\nThe following example illustrates the double data type in C.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// function to calculate surface area and volume</span>\n\n<span class=\"hljs-comment\">// of a sphere</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sphere</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> radius)</span>  <span class=\"hljs-comment\">// this is the function </span>\n\n</span>{\n    <span class=\"hljs-comment\">// variables to hold double values</span>\n\n    <span class=\"hljs-keyword\">double</span> surfaceArea, sphereVolume;\n\n    <span class=\"hljs-comment\">//Calculating the surface area </span>\n\n    <span class=\"hljs-comment\">//and surface volume of the sphere</span>\n\n    surfaceArea = <span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">3.14</span> * radius * radius;\n\n    sphereVolume = (surfaceArea * radius) / <span class=\"hljs-number\">3</span>; \n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The surface area of the sphere is: %lf\"</span>, surfaceArea);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\\nThe volume of the sphere is:  %lf\"</span>, sphereVolume);\n} \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n\n</span>{\n\n    <span class=\"hljs-keyword\">int</span> radius = <span class=\"hljs-number\">6</span>; <span class=\"hljs-comment\">// giving the radius of the sphere</span>\n    sphere(radius);   <span class=\"hljs-comment\">// calling the function to calculate the surface area and volume of the sphere</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\\n\"</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<ul>\n<li>In the above example, we are calculating the area and volume of a sphere. Here, we have used the double-type variables. One thing to note here is that after the final answer, the remaining significant digits have automatically set to 0.</li>\n</ul>\n<h2 id=\"heading-derived-datatypes\"><code>Derived Datatypes</code></h2>\n<ul>\n<li><code>Derived data types are derived from the primitive or fundamental data types.</code></li>\n<li>There are mainly 3 types of derived data types in C that we are going to discuss in this section.</li>\n</ul>\n<h3 id=\"heading-arrays\"><code>Arrays</code></h3>\n<ul>\n<li>An array is a group of <code>similar kinds of finite entities of the same type</code>. These entities or elements can be referred to by their <code>indices</code> respectively.</li>\n<li>The indexing starts from <code>0 to (array_size-1)</code> conventionally. </li>\n<li><p><code>An array can be one-dimensional, two-dimensional, or multidimensional</code>.</p>\n<p>  <code>Syntax</code></p>\n<pre><code class=\"lang-c\">  data_type arr_name[size];\n</code></pre>\n</li>\n</ul>\n<h4 id=\"heading-description-of-the-syntax\"><code>Description of the syntax</code></h4>\n<ul>\n<li><code>data_type:</code> This is the data type that specifies the type of elements to be stored in the array. It can be int, float, double, and char.</li>\n<li><code>array_name:</code> This is the name of the array. To specify the name of an array, you must follow the same rules which are applicable while declaring a usual variable in C.</li>\n<li><code>size:</code> The size specifies the number of elements held by the array. If the size is n then the number of array elements will be n-1.</li>\n</ul>\n<p><br />\n<br /></p>\n<p><code>Example</code>\nThe following example illustrates the array data types in C.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n\n</span>{\n\n    <span class=\"hljs-keyword\">int</span> idx, element;\n\n    <span class=\"hljs-comment\">// initialize an array.</span>\n\n    <span class=\"hljs-keyword\">int</span> my_array[<span class=\"hljs-number\">10</span>] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">52</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">27</span>};\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter element to be searched:\\n\"</span>);\n\n    <span class=\"hljs-comment\">// input element to be searched.</span>\n\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;element);\n\n    <span class=\"hljs-comment\">// traverse the array to search the element.</span>\n\n    <span class=\"hljs-keyword\">for</span> (idx = <span class=\"hljs-number\">0</span>; idx &lt;= <span class=\"hljs-number\">9</span>; idx++)\n\n    {\n\n        <span class=\"hljs-keyword\">if</span> (my_array[idx] == element)\n\n        {\n\n            <span class=\"hljs-comment\">// print the index at which</span>\n\n            <span class=\"hljs-comment\">// the element is found.</span>\n\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element found at idxex %d\"</span>, idx);\n\n            <span class=\"hljs-keyword\">break</span>;\n\n        }\n\n    } \n\n    <span class=\"hljs-comment\">// if the element is not found.</span>\n\n    <span class=\"hljs-keyword\">if</span> (idx == <span class=\"hljs-number\">10</span>)\n\n    {\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nElement not found!\"</span>);\n\n    }\n\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\n}\n</code></pre>\n<ul>\n<li>The above example is to check if the input element exists in the array or not. Here, we have declared an integer type array for size 10. We are iterating over the array and checking if the given element is found in the array. </li>\n</ul>\n<h3 id=\"heading-functions\"><code>Functions</code></h3>\n<ul>\n<li><p>A function is a piece of code that<code>performs some specific task</code> when invoked in the program. It can be called from <code>anywhere and any number of times</code> in the program. The return value i.e., what type of value it will <code>return depends upon the return type of the function</code>.</p>\n</li>\n<li><p>In C, a function can be called by types: <code>call by value and call by reference.</code>When the function is called by value, a copy of the variable is passed as the argument whereas when the function is called by the reference, the address or reference of variable itself is passed to the function.</p>\n<p>  <code>Syntax</code></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-function\">return_type <span class=\"hljs-title\">function_name</span><span class=\"hljs-params\">(parameters)</span></span>;\n</code></pre>\n</li>\n</ul>\n<p><code>Description of the Syntax</code></p>\n<ul>\n<li><code>return_type:</code> This is the data type that specifies the type of value to be returned by the function. If the return type is void, then it is not mandatory for the function to return a value.</li>\n<li><code>function_name:</code> This is the name of the function. To specify the name of a function, you must follow the same rules which are applicable while declaring a usual variable in C.</li>\n<li><code>parameters:</code> The parameters are optional. They are passed according to the type of the function call.\n<code>Example</code>\nThe following example illustrates functions in C.\n```c</li>\n</ul>\n<p>#include </p>\n<p>// function returning the maximum</p>\n<p>// numbers between two integers.</p>\n<p>int max_num(int num1, int num2)</p>\n<p>{</p>\n<pre><code><span class=\"hljs-comment\">// local variable declaration</span>\n\n<span class=\"hljs-keyword\">int</span> res; \n\n<span class=\"hljs-keyword\">if</span> (num1 <span class=\"hljs-operator\">&gt;</span> num2)\n\n    res <span class=\"hljs-operator\">=</span> num1;\n\n<span class=\"hljs-keyword\">else</span>\n\n    res <span class=\"hljs-operator\">=</span> num2; \n\n<span class=\"hljs-keyword\">return</span> res;\n</code></pre><p>} </p>\n<p>int main()</p>\n<p>{</p>\n<pre><code><span class=\"hljs-comment\">// local variable definition.</span>\n\n<span class=\"hljs-keyword\">int</span> num1 <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">225</span>;\n\n<span class=\"hljs-keyword\">int</span> num2 <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">250</span>;\n\n<span class=\"hljs-keyword\">int</span> res;\n\n <span class=\"hljs-comment\">// function call.</span>\n\nres <span class=\"hljs-operator\">=</span> max_num(num1, num2); \n\n<span class=\"hljs-comment\">// print the result.</span>\n\nprintf(<span class=\"hljs-string\">\"Maximum number is : %d\\n\"</span>, res);\n\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</code></pre><p>}</p>\n<pre><code>\n<span class=\"hljs-operator\">-</span> The above example <span class=\"hljs-keyword\">is</span> comparing two numbers and finding the greatest among them. Here, we have passed two numbers that need to be compared, to the <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">by</span> <span class=\"hljs-title\">value</span>. <span class=\"hljs-title\">The</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">function</span></span> <span class=\"hljs-title\">has</span> <span class=\"hljs-title\">an</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">int</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">return</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">type</span></span> <span class=\"hljs-title\">so</span>, <span class=\"hljs-title\">it</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">is</span></span> <span class=\"hljs-title\">returning</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">greater</span> <span class=\"hljs-title\">number</span> <span class=\"hljs-title\">after</span> <span class=\"hljs-title\">making</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-title\">comparison</span>.\n\n### `<span class=\"hljs-title\">Pointers</span>`\n- <span class=\"hljs-title\">A</span> <span class=\"hljs-title\">pointer</span> <span class=\"hljs-title\">can</span> <span class=\"hljs-title\">be</span> <span class=\"hljs-title\">defined</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">as</span></span> <span class=\"hljs-title\">a</span> <span class=\"hljs-title\">variable</span> <span class=\"hljs-title\">that</span> <span class=\"hljs-title\">stores</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">address</span></span> <span class=\"hljs-title\">of</span> <span class=\"hljs-title\">other</span> <span class=\"hljs-title\">variables</span>. <span class=\"hljs-title\">This</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">address</span></span> <span class=\"hljs-title\">signifies</span> <span class=\"hljs-title\">where</span> <span class=\"hljs-title\">that</span> <span class=\"hljs-title\">variable</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">is</span></span> <span class=\"hljs-title\">located</span> <span class=\"hljs-title\">in</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">memory</span></span>. <span class=\"hljs-title\">If</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">is</span></span> <span class=\"hljs-title\">storing</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">address</span></span> <span class=\"hljs-title\">of</span> <span class=\"hljs-title\">b</span>, <span class=\"hljs-title\">then</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">is</span></span> <span class=\"hljs-title\">pointing</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">b</span>. <span class=\"hljs-title\">The</span> <span class=\"hljs-title\">data</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">type</span></span> <span class=\"hljs-title\">of</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-title\">pointer</span> <span class=\"hljs-title\">must</span> <span class=\"hljs-title\">be</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">same</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">as</span></span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">variable</span> <span class=\"hljs-title\">whose</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">address</span></span> <span class=\"hljs-title\">it</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">is</span></span> <span class=\"hljs-title\">storing</span>. \n\n    `<span class=\"hljs-title\">Syntax</span>`\n```<span class=\"hljs-title\">c</span>\n<span class=\"hljs-title\"><span class=\"hljs-keyword\">type</span></span> *<span class=\"hljs-title\">pointer_name</span></span>;\n</code></pre><p><code>Description of the syntax</code></p>\n<ul>\n<li>type: This is the data type that specifies the type of value to which the pointer is pointing.</li>\n<li>pointer_name: This is the name of the pointer. To specify the name of a pointer, you must follow the same rules which are applicable while declaring a usual variable in C. Apart from these rules, a pointer must always be preceded by an asterisk(*).\n<code>Example</code>\nThe following example illustrates pointers in C.\n```C\n#include </li>\n</ul>\n<p>int main()</p>\n<p>{</p>\n<pre><code><span class=\"hljs-comment\">// array declaration and initialization.</span>\n\n<span class=\"hljs-keyword\">int</span> arr[<span class=\"hljs-number\">4</span>] <span class=\"hljs-operator\">=</span> {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">200</span>}; \n\n<span class=\"hljs-comment\">// int type pointer variable declaration.</span>\n\n<span class=\"hljs-keyword\">int</span> <span class=\"hljs-operator\">*</span>ptr; \n\n<span class=\"hljs-comment\">// Assign the address of arr[0] to ptr.</span>\n\nptr <span class=\"hljs-operator\">=</span> arr;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-number\">4</span>; i<span class=\"hljs-operator\">+</span><span class=\"hljs-operator\">+</span>)\n\n{\n\n    printf(<span class=\"hljs-string\">\"Value of *ptr = %d\\n\"</span>, <span class=\"hljs-operator\">*</span>ptr);\n\n    printf(<span class=\"hljs-string\">\"Value of ptr = %p\\n\\n\"</span>, ptr); \n\n    <span class=\"hljs-comment\">// increment pointer ptr by 1.</span>\n\n    ptr<span class=\"hljs-operator\">+</span><span class=\"hljs-operator\">+</span>;\n\n}\n</code></pre><p>}</p>\n<pre><code>\n- In the above example, we have declared a pointer ptr that is holding the address of the array arr. We have looped through the array and printed the value at each index along <span class=\"hljs-keyword\">with</span> the address <span class=\"hljs-keyword\">of</span> the element.\n\n\n\n\n<span class=\"hljs-comment\">## &lt;u&gt;`User-Defined Data Types` &lt;/u&gt;</span>\n\n<span class=\"hljs-comment\">## `Structure`</span>\n&lt;br&gt;\n&lt;br&gt;\n\n- A structure <span class=\"hljs-keyword\">is</span> a <span class=\"hljs-keyword\">user</span>-defined <span class=\"hljs-keyword\">data</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-keyword\">in</span> C that allows you <span class=\"hljs-keyword\">to</span> combine members <span class=\"hljs-keyword\">of</span> different types <span class=\"hljs-keyword\">under</span> a single <span class=\"hljs-keyword\">name</span> (<span class=\"hljs-keyword\">or</span> the <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-keyword\">type</span>). The reason why it <span class=\"hljs-keyword\">is</span> called a <span class=\"hljs-keyword\">user</span>-defined <span class=\"hljs-keyword\">data</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-keyword\">is</span> that the <span class=\"hljs-keyword\">variables</span> <span class=\"hljs-keyword\">of</span> different types <span class=\"hljs-keyword\">are</span> clubbed together <span class=\"hljs-keyword\">under</span> a single structure, which can be defined according <span class=\"hljs-keyword\">to</span> the <span class=\"hljs-keyword\">user</span>’s choice. \n\n- <span class=\"hljs-keyword\">Consider</span> a situation <span class=\"hljs-keyword\">where</span> you want <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">store</span> a <span class=\"hljs-built_in\">record</span> <span class=\"hljs-keyword\">of</span> a book. The book will have properties <span class=\"hljs-keyword\">like</span> <span class=\"hljs-keyword\">name</span>, author, <span class=\"hljs-keyword\">and</span> genre. You can <span class=\"hljs-keyword\">create</span> three <span class=\"hljs-keyword\">variables</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">store</span> this information. But what <span class=\"hljs-keyword\">if</span> you need <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">store</span> <span class=\"hljs-keyword\">records</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">10</span> books. <span class=\"hljs-keyword\">Then</span> creating <span class=\"hljs-number\">3</span> separate <span class=\"hljs-keyword\">variables</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">each</span> book would <span class=\"hljs-keyword\">not</span> be a practical solution. This <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">where</span> a structure can be a great solution. A single structure book can be created <span class=\"hljs-keyword\">having</span> three members: <span class=\"hljs-keyword\">name</span>, author, <span class=\"hljs-keyword\">and</span> genre. This structure can be used <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-number\">10</span> books. \n\n   <span class=\"hljs-string\">`Syntax`</span> \n// <span class=\"hljs-keyword\">define</span> a structure.\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`c\nstruct structure_name \n\n{\n\n    data_type var1;\n\n    data_type var2;    \n\n};</span>\n</code></pre><p><code>Description of the Syntax</code></p>\n<ul>\n<li><code>struct:</code> The definition of a structure includes the keyword struct followed by its name. All the items inside it are called its members and after being declared inside a structure. </li>\n<li><code>data_type:</code> Each variable can have a different data type. Variables of any data type can be declared inside a structure.</li>\n<li>The definition of a structure ends with a semicolon at the end.\n<code>Example</code></li>\n</ul>\n<p>The following example illustrates structure in C.</p>\n<pre><code class=\"lang-c\">\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;  </span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;  </span></span>\n\n<span class=\"hljs-comment\">// define a \"user-defined\" structure.</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">book</span>      \n\n{</span>  \n\n    <span class=\"hljs-comment\">// declare members of the structure.</span>\n\n    <span class=\"hljs-keyword\">int</span> id;      \n\n    <span class=\"hljs-keyword\">char</span> name[<span class=\"hljs-number\">25</span>];\n\n    <span class=\"hljs-keyword\">char</span> author[<span class=\"hljs-number\">50</span>];\n\n    <span class=\"hljs-keyword\">char</span> genre[<span class=\"hljs-number\">20</span>];      \n\n};  \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>    \n\n</span>{    \n\n   <span class=\"hljs-comment\">// declare a variable of the book type.</span>\n\n   <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">book</span> <span class=\"hljs-title\">b1</span>;</span> \n\n\n\n   <span class=\"hljs-comment\">//store the information of the books.    </span>\n\n   b1.id = <span class=\"hljs-number\">10</span>; \n\n   <span class=\"hljs-built_in\">strcpy</span>(b1.name, <span class=\"hljs-string\">\"Dummy\"</span>);  \n\n   <span class=\"hljs-built_in\">strcpy</span>(b1.author, <span class=\"hljs-string\">\"Dummy Author\"</span>); \n\n   <span class=\"hljs-built_in\">strcpy</span>(b1.genre, <span class=\"hljs-string\">\"Science Fiction\"</span>);\n\n   <span class=\"hljs-comment\">// print the information.    </span>\n\n   <span class=\"hljs-built_in\">printf</span>( <span class=\"hljs-string\">\"The id is: %d\\n\"</span>, b1.id);    \n\n   <span class=\"hljs-built_in\">printf</span>( <span class=\"hljs-string\">\"The name of the book is: %s\\n\"</span>, b1.name);    \n\n   <span class=\"hljs-built_in\">printf</span>( <span class=\"hljs-string\">\"The author of the book is: %s\\n\"</span>, b1.author);    \n\n   <span class=\"hljs-built_in\">printf</span>( <span class=\"hljs-string\">\"The genre of the book is: %s\\n\"</span>, b1.genre);     \n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;  \n\n}\n</code></pre>\n<ul>\n<li>In the above example, a structured book is defined with 4 member variables: id, name, author, and genre. Now a separate copy of these 4 members will be allocated to any variable of the book type. So, the variable b1 also has its own copy of these 4 variables which are used to store the information about this book.</li>\n</ul>\n<h2 id=\"heading-union\"><code>Union</code></h2>\n<ul>\n<li>A union is also a user-defined data type. It also holds members of different data types under a single name. A union sounds similar to a structure and they are similar in conceptual terms. But there are some major differences between the two. While a structure allocates sufficient memory for all its members, a union only allocates memory equal to its largest member. </li>\n</ul>\n<p><code>Syntax</code> </p>\n<pre><code class=\"lang-c\">\n<span class=\"hljs-keyword\">union</span> structure_name \n{\n\n    data_type var1;\n\n    data_type var2;   \n\n};\n</code></pre>\n<p><code>Description of the Syntax</code></p>\n<ul>\n<li><code>union:</code> The union keyword is written at the beginning of the definition of a union in C. After it,  the name of the union is specified.</li>\n<li><code>data_type:</code> It is the data type of the member variable of the union. Members of different types can be defined inside a union.</li>\n<li>To understand the major difference between a structure and a union, consider the following definitions of a structure and a union:</li>\n</ul>\n<h4 id=\"heading-structure-definition\"><code>Structure definition</code></h4>\n<pre><code class=\"lang-c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">book</span>      \n\n{</span>  \n\n    <span class=\"hljs-keyword\">int</span> price;      <span class=\"hljs-comment\">// 4 bytes</span>\n\n    <span class=\"hljs-keyword\">char</span> name[<span class=\"hljs-number\">10</span>];  <span class=\"hljs-comment\">// 1*10 = 10 bytes    </span>\n\n};\n</code></pre>\n<h4 id=\"heading-union-definition\"><code>Union definition</code></h4>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">union</span> book      \n\n{  \n\n    <span class=\"hljs-keyword\">int</span> price;      <span class=\"hljs-comment\">// 4 bytes</span>\n\n    <span class=\"hljs-keyword\">char</span> name[<span class=\"hljs-number\">10</span>];  <span class=\"hljs-comment\">// 1*10 = 10 bytes    </span>\n\n};\n</code></pre>\n<p>An object of the structure book would be allocated 14 bytes for both the int and char members. However, an object of the union book would only be allocated 10 bytes (equal to the memory required by the char member) which is the maximum size.</p>\n<p><code>Example</code>\nThe following example illustrates union in C.</p>\n<pre><code class=\"lang-c\">\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// define the union. </span>\n\n<span class=\"hljs-keyword\">union</span> city\n\n{\n\n    <span class=\"hljs-keyword\">int</span> pinCode;\n\n    <span class=\"hljs-keyword\">char</span> name[<span class=\"hljs-number\">20</span>];\n\n}; \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n\n</span>{  \n\n   <span class=\"hljs-comment\">// object of the type \"city\".</span>\n\n   <span class=\"hljs-keyword\">union</span> city c1; \n\n   c1.pinCode = <span class=\"hljs-number\">110090</span>;\n\n   <span class=\"hljs-built_in\">strcpy</span>( c1.name, <span class=\"hljs-string\">\"Delhi\"</span>);\n\n   <span class=\"hljs-comment\">// print the information.</span>\n\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The pin code of the city: %d\\n\"</span>, c1.pinCode);   \n\n   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The name of the city is: %s\\n\"</span>, c1.name); \n\n}\n</code></pre>\n<ul>\n<li>In the above example, the char array name is printed correctly whereas the pinCode gives a corrupted value. This happened because the name occupied the space allocated for object c1. </li>\n</ul>\n<h3 id=\"heading-enumeration\"><code>Enumeration</code></h3>\n<p>Enumeration or simply enum is one of the user-defined data types in C which provides a special type of flexibility of defining variables. An enum consists of a set of integer constants that can be replaced by user-defined names. </p>\n<p>   <code>Syntax</code></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">enum</span> flag {const_name1, const_name2, ..., const_nameN};\n</code></pre>\n<p><code>Description of the Syntax</code></p>\n<p>enum: The keyword enum is written at the beginning of the definition.\nflag: This is the default name of the enumeration set. It can be replaced by another name or can be used as it is. \nconst_name: It is the integral identifier inside the enum set. The default values of this set are- {0, 1, 2, ….}.</p>\n<p><code>Example</code>\nThe following example illustrates enumeration in C.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// define enum flags.</span>\n\n<span class=\"hljs-keyword\">enum</span> color { red, blue, green };         <span class=\"hljs-comment\">// set is {0, 1, 2}.</span>\n\n<span class=\"hljs-keyword\">enum</span> fruit { mango = <span class=\"hljs-number\">10</span>, apple, grapes }; <span class=\"hljs-comment\">// set is {10, 11, 12}. </span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n\n</span>{\n\n    <span class=\"hljs-keyword\">enum</span> color c1;\n\n    <span class=\"hljs-keyword\">enum</span> fruit f1;\n\n    c1 = blue;  <span class=\"hljs-comment\">// default value i.e. 1 will be assigned.</span>\n\n    f1 = apple; <span class=\"hljs-comment\">// 11 will be assigned. </span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The second value in enum set is: %d\\n\"</span>,c1);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The second value in enum set is: %d\\n\"</span>,f1); \n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\n}\n</code></pre>\n<ul>\n<li>In the above example, two enum flags are defined. The first enum flag color{red, blue, green} has a constant with default values i.e. {0, 1, 2}. So, when the second constant blue is printed, 1 will be displayed in the output. Whereas, in the second enum flag fruit{mango, apple, grapes}, the first constant i.e. mango is initialized with 10. So, the values of the following constants will automatically get updated. Hence, when the second constant of the enum fruit is printed, 11 is displayed in the output.</li>\n</ul>\n<h2 id=\"heading-data-type-modifiers\"><code>Data Type Modifiers</code></h2>\n<table><tbody>\n<tr>\n<td>\n<h3>DATA TYPE</h3>\n</td>\n<td>\n<h3>MEMORY (bytes)</h3>\n</td>\n<td>\n<h3>RANGE</h3>\n</td>\n<td>\n<h3>FORMAT SPECIFIER</h3>\n</td>\n</tr>\n<tr>\n<td>\n<p>short int</p>\n</td>\n<td>\n<p>2</p>\n</td>\n<td>\n<p>-32,768 to 32,767 </p>\n</td>\n<td>\n<p>%hd </p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unsigned int</p>\n</td>\n<td>\n<p>4</p>\n</td>\n<td>\n<p>0 to 4,294,967,295 </p>\n</td>\n<td>\n<p>%u</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>long int</p>\n</td>\n<td>\n<p>4</p>\n</td>\n<td>\n<p>-231 to 231 - 1  </p>\n</td>\n<td>\n<p>%ld</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>long long int</p>\n</td>\n<td>\n<p>8</p>\n</td>\n<td>\n<p>-(263) to (263)-1</p>\n</td>\n<td>\n<p>%lld </p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unsigned long int</p>\n</td>\n<td>\n<p>4</p>\n</td>\n<td>\n<p>0 to 4,294,967,295 </p>\n</td>\n<td>\n<p>%lu</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unsigned long long int</p>\n</td>\n<td>\n<p>8</p>\n</td>\n<td>\n<p>0 to 2^64-1 </p>\n</td>\n<td>\n<p>%llu</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>signed char</p>\n</td>\n<td>\n<p>1</p>\n</td>\n<td>\n<p>-128 to 127 </p>\n</td>\n<td>\n<p>%c</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unsigned char</p>\n</td>\n<td>\n<p>1</p>\n</td>\n<td>\n<p>0 to 255 </p>\n</td>\n<td>\n<p>%c</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>long double</p>\n</td>\n<td>\n<p>16</p>\n</td>\n<td>\n<p>3.4E-4932 to 1.1E+4932</p>\n</td>\n<td>\n<p>%Lf</p>\n</td>\n</tr>\n</tbody></table>\n\n\n\n<h2 id=\"heading-signed\"><code>Signed</code></h2>\n<p>When a signed variable is declared, it indicates that it can have both negative and positive values. This modifier can be applied to data types like int, char, short, and long. In C, the value stored in a variable is signed by default. For example in the declaration, int var = 10, the int variable is a signed int by default and the variable var can hold both negative and positive values.</p>\n<p><code>Syntax</code> </p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">signed</span> type var_name;\n</code></pre>\n<p>Examples</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">int</span> var1;\n\n<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span> var2;\n\n<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var3;\n\n<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var4;\n\n<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">char</span> var5;\n</code></pre>\n<pre><code class=\"lang-diff\"><span class=\"hljs-deletion\">-Note: Since all data types are signed by default, the best practice is to declare variables without using the suffix “signed”.</span>\n</code></pre>\n<ul>\n<li>An n-bit variable can contain 2n  possible values. So, an 8-bit signed integer can store 28 i.e. 256 possible values.</li>\n</ul>\n<table><tbody>\n<tr>\n<td>\n<p>Bits</p>\n</td>\n<td>\n<p>Range</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>8 bit signed</p>\n</td>\n<td>\n<p>-128 to 127</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>16 bit signed</p>\n</td>\n<td>\n<p>-32,768 to 32,767</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>32 bit signed</p>\n</td>\n<td>\n<p>-2,147,483,648 to 2,147,483,647</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>64 bit signed</p>\n</td>\n<td>\n<p>-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</p>\n</td>\n</tr>\n</tbody></table>\n\n<hr />\n\n\n<p> The following example illustrates the size occupied by signed variables.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n\n</span>{\n\n    <span class=\"hljs-comment\">// declare signed variables.</span>\n\n    <span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">int</span> var1;\n\n    <span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span> var2;\n\n    <span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var3;\n\n    <span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var4;\n\n    <span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">char</span> var5;\n\n    <span class=\"hljs-comment\">// print the size occupied by the signed variables.</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by signed int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by signed short int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by signed long int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by signed long long int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by signed char is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">char</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\\n\"</span>);\n\n}\n</code></pre>\n<h2 id=\"heading-unsigned\"><code>Unsigned</code></h2>\n<ul>\n<li><p>An unsigned variable can contain only 0 and positive values (non-negative values). This data type modifier can be used with the types- int, char, short, and long. To declare an unsigned variable the suffix “unsigned” is used before the type of the variable. </p>\n</li>\n<li><p>The range of possible values of an unsigned variable is nearly double the range of a signed variable. This data type modifier is useful for positive entities like age, salary, etc.</p>\n</li>\n</ul>\n<p><code>Syntax</code></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">unsigned</span> type var_name;\n</code></pre>\n<p><code>Examples</code></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> var1;\n\n<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span> var2;\n\n<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var3;\n\n<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var4;\n\n<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> var5;\n</code></pre>\n<ul>\n<li>In a 32-bit system, an unsigned integer can hold values up to 232-1 i.e. 0 to 4,294,967,295 values.</li>\n</ul>\n<table><tbody>\n<tr>\n<td>\n<p>Bits</p>\n</td>\n<td>\n<p>Range</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>8 bit unsigned</p>\n</td>\n<td>\n<p>0 to 255</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>16 bit unsigned</p>\n</td>\n<td>\n<p>0 to 65535</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>32 bit unsigned</p>\n</td>\n<td>\n<p>0 to 4294967295</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>64 bit unsigned</p>\n</td>\n<td>\n<p>0 to 18446744073709551615</p>\n</td>\n</tr>\n</tbody></table>\n\n\n<p> The following example illustrates the size occupied by unsigned variables.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n\n</span>{\n\n    <span class=\"hljs-comment\">// declare unsigned variables.</span>\n\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> var1;\n\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span> var2;\n\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var3;\n\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var4;\n\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> var5; \n\n    <span class=\"hljs-comment\">// print the size occupied by the unsigned variables.</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by unsigned int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by unsigned short int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by unsigned long int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by unsigned long long int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by unsigned char is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span>)); \n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\\n\"</span>); \n\n}\n</code></pre>\n<h2 id=\"heading-long\"><code>Long</code></h2>\n<p>The long data type modifier is used when the value to be stored is <code>large and exceeds the usual integer range</code>. It can be applied to <code>int and double data types</code> in C. A long integer variable takes <code>4 bytes of memory space in a 32-bit system</code>. </p>\n<p><code>Syntax</code></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">long</span> type var_name;\n</code></pre>\n<p><code>Examples</code></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var1;       <span class=\"hljs-comment\">// or long var1</span>\n\n<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var2;  <span class=\"hljs-comment\">// or long long var2</span>\n\n<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">double</span> var3;\n</code></pre>\n<ul>\n<li>In C, <code>“long int”</code> is equivalent to simply <code>“long”</code> and similarly instead of <code>“long long int”</code> you can simply write <code>“long long”</code>. This is commonly used in competitive programming as the inputs there can be very large.</li>\n</ul>\n<p>The following example illustrates the size occupied by long variables.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n\n</span>{\n\n    <span class=\"hljs-comment\">// declare long variables.</span>\n\n    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var1;      \n\n    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> var2;  \n\n    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">double</span> var3;\n\n    <span class=\"hljs-comment\">// print the size occupied by the long variables.</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by long int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by long long int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by long double is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">double</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\\n\"</span>);\n\n}\n</code></pre>\n<h2 id=\"heading-short\"><code>Short</code></h2>\n<p>The short data type modifier is used for saving memory consumption. It can contain whole numbers lying in the range from -32768 to 32767. It can only be applied with an int data type and it’s also said to be a 16-bit signed two's complement integer.</p>\n<p><code>Syntax</code></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span> var_name;\n\n<span class=\"hljs-comment\">// or</span>\n\n<span class=\"hljs-keyword\">short</span> var_name;\n</code></pre>\n<ul>\n<li>Note: This data type modifier takes 2 times less memory than the usual integer variable. </li>\n</ul>\n<p>The following example illustrates the size occupied by long variables.</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n\n</span>{\n\n    <span class=\"hljs-comment\">// declare a short variable.</span>\n\n    <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span> var_name; \n\n    <span class=\"hljs-comment\">// print the size occupied by the long variables.</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The size occupied by long int is: %d\\n\"</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span>));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\\n\"</span>);   \n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\n}\n</code></pre>\n","contentMarkdown":"\n# Datatypes\n\nEvery day we meet names and numbers—at home, at work, at school, or at play. A person’s name is\na type of data; so is a number. We can thus speak of the two data types called “name” and “number.”\nConsider the statement:\nCaroline bought 3 dresses for $199.95\nHere, we can find:\n\n-  An example of a name: Caroline.\n\n- An example of a number: 3.\n\n- Two examples of numbers: 3 and 199.95.\n\n<br>\n<br>\n\n##  In C we have bunch of `Datatypes`\n\n\n- we can divide `Datatypes` into three categories .\n    1. `Primitive Datatypes`\n    2. `Derived Datatypes`\n    3. `User Defined Datatypes`\n\n<br>\n<br>\n\n## <u> `Primitive Datatypes` </u>\n\n<br>\n\n\n- `Primitive Datatypes` are the datatypes which are not user defined .\n\n- Each primitive datatype has its own rules and conventions for naming variables.\n\n    - `int`    // integer datatype\n    - `long`   // integer datatype\n    - `float`  // floating point datatype\n    - `char`   // integer datatype\n    - `double`  //  floating point datatype\n\n\n<table><tbody>\n<tr>\n<td>\n<h3>DATA TYPE</h3>\n</td>\n<td>\n<h3>MEMORY (bytes)</h3>\n</td>\n<td>\n<h3>RANGE</h3>\n</td>\n<td>\n<h3>FORMAT SPECIFIER</h3>\n</td>\n</tr>\n<tr>\n<td>\n<p>int</p>\n</td>\n<td>\n<p>4</p>\n</td>\n<td>\n<p>-231 to 231 - 1&nbsp;&nbsp;</p>\n</td>\n<td>\n<p>%d&nbsp;</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>char</p>\n</td>\n<td>\n<p>1</p>\n</td>\n<td>\n<p>-128 to 127</p>\n</td>\n<td>\n<p>%c</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>float</p>\n</td>\n<td>\n<p>4</p>\n</td>\n<td>\n<p>1.2E-38 to 3.4E+38</p>\n</td>\n<td>\n<p>%f</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>double</p>\n</td>\n<td>\n<p>8</p>\n</td>\n<td>\n<p>2.3E-308 to 1.7E+308</p>\n</td>\n<td>\n<p>%lf</p>\n</td>\n</tr>\n</tbody></table>\n\n<br>\n<br>\n\n- Primary data types are also known as the `fundamental data types` because they are pre-defined or they already `exist` in the C language. All the other types of data types `(derived and user-defined data types)` are derived from these data types. Primary data types in C are of 4 types: `int`, `char`, `float`, and `double`.\n\n<br>\n<br>\n\n\n\n### ``Int Datatypes``\n\n- The int data type is used to store the integer values. Any number that falls in the range of `-∞ to +∞ `is said to be an `integer`. \n- For example 0, 10, 105, -15, -103, etc are all integers. `However, integers can be either negative or positive. And that’s where we use data type modifiers`, which we will be going to discuss later in this article.\n\n- In C language, the integers `cannot be represented as floating or decimal point numbers`. They can only be operated by/on integers themselves. For example, 4/3 is fine but 4/3.0 is not fine.  However, if the operation of two integers `results in a fraction number`, `the integer part will be stored as the final result`.\n\n    `Syntax`\n\n```c\nint variable_name;\n\n```\n\n#### `Example` \n\n```c\n\n#include <stdio.h>    \n\n// header file \n\nint main()\n{\n    int a = 10; \n    // here we are declaring the variable a and assigning the value 10 to it.\n    int b = 20; \n    // here we are declaring the variable b and assigning the value 20 to it.\n    int c = a + b;  \n    // doing the sum of a and b and storing the result in c.\n    printf(\"%d\", c);\n    // printing the value of c.\n    return 0;\n}\n\n```\n\n\n#### `Char Data Type`\n- The char data type is used to store the characters. The characters stored in a variable of char data type have a value equivalent to its integer code. \n- These codes are often called American Standard Code For Information Interchange or ASCII codes. The ASCII code for upper case characters A to Z starts from 65 to 90 and for lower case characters a to z, it starts from 97 to 122.\n\n- The general size of a character is 1 byte. However, just like the integers the size of a char can vary according to the data type modifiers. Since all characters and symbols can be represented in their numerical ASCII value, the char type is often considered as an int type.\n\n    `Syntax`\n\n```c\nchar variable_name;\n\n```\n\n`Example\n`The following example illustrates the char data types in C.\n\n```c\n#include <stdio.h>\n\nint main()\n\n{\n    //variable ch is initialised as char\n    char ch = 'A';\n    //storing same ASCII code in int\n    int num = ch;\n    //print the ASCII value of ch\n\n    printf(\"The ASCII code for %d\", ch);\n    printf(\" is %d\", num);\n    printf(\"\\n\");\n\n    printf(\"Adding 1 to the character code \\n\"); \n\n    //Adding 1 to the char variable ch\n    ch += 1;\n\n    //num stores the corresponding\n    //ASCII value of ch\n\n    num = ch;\n    //print the ASCII value of ch+1\n\n    printf(\"The ASCII code for %d\", ch);\n\n    printf(\" is %d\", num);\n}\n```\n\n- In the above example, we have initialized a variable ch with character A. Then, we have initialized an int variable with ch. Now, this variable is holding the ASCII value of character A. This has proven when we added 1 in the num and printed it, we got 66 as output. \n\n\n\n### `Float Data Type`\n<br>\n<br>\n\n- The float data type is used to store the floating-point numbers. The numbers that have a fractional part are called floating-point numbers. For example, 3.0, 5.57, -31.2, -3.12, etc are all floating-point numbers. Moreover, it should be noticed carefully that 8 is an integer but 8.0 is a floating-point number. \n- Although the value of both the digits is the same, 8.0 has a decimal number which differentiates it with 8.\n\n- The major advantage of floating point numbers over integers is that they can represent a much larger and wider range of digits as compared to int data type.\n\n     `Syntax`\n```c\nfloat varaible_name;\n```\n\n`Example`\nThe following example illustrates the float data types in C.\n```c\n\n#include <stdio.h>\n\nint main()\n\n{\n\n    //variable radius is initialised as float\n\n    float radius = 10.0; \n\n    //print the radius\n\n    printf(\"Radius of the circle is: %f\", radius);\n\n    printf(\"\\n\");\n\n    //variable area is initialised as float\n\n    float area;\n\n    area = 3.14 * radius * radius; \n\n    //print the area of the circle\n\n    printf(\"Area of the circle is :%f\", area);\n\n}\n```\n\n\n- In the above example, we are calculating the area of a circle. Note that, we are multiplying only the variables having float data type with each other and storing the final result in another float type variable.\n\n#### `Double Data Type`\n<br>\n<br>\n\n- The double data type is also used to store floating-point numbers. But still, it is considered as a distinct data type because of two reasons. \n- The first one is that it occupies twice as much memory as type float. \n- The second reason is that it is used to store a much larger range of floating-point numbers than a float data type.\n\n- The double stores almost double the number of significant digits after the decimal point or precision of the float. However, the double data type consumes more memory and it  is also slower as compared to float. So, it is advisable to use a smaller data type as much as possible for the sake of optimization of code.\n\n     `Syntax`\n```c\ndouble variable_name;\n```\n\n`Example`\nThe following example illustrates the double data type in C.\n```c\n#include <stdio.h>\n\n// function to calculate surface area and volume\n\n// of a sphere\n\nvoid sphere(int radius)  // this is the function \n\n{\n    // variables to hold double values\n\n    double surfaceArea, sphereVolume;\n\n    //Calculating the surface area \n\n    //and surface volume of the sphere\n\n    surfaceArea = 4 * 3.14 * radius * radius;\n\n    sphereVolume = (surfaceArea * radius) / 3; \n\n    printf(\"The surface area of the sphere is: %lf\", surfaceArea);\n\n    printf(\"\\n\\nThe volume of the sphere is:  %lf\", sphereVolume);\n} \n\nint main()\n\n{\n\n    int radius = 6; // giving the radius of the sphere\n    sphere(radius);   // calling the function to calculate the surface area and volume of the sphere\n\n    printf(\"\\n\\n\");\n\n    return 0;\n}\n\n```\n\n\n- In the above example, we are calculating the area and volume of a sphere. Here, we have used the double-type variables. One thing to note here is that after the final answer, the remaining significant digits have automatically set to 0.\n\n\n\n## `Derived Datatypes`\n\n\n- `Derived data types are derived from the primitive or fundamental data types.`\n- There are mainly 3 types of derived data types in C that we are going to discuss in this section.\n\n### `Arrays`\n- An array is a group of `similar kinds of finite entities of the same type`. These entities or elements can be referred to by their `indices` respectively.\n- The indexing starts from `0 to (array_size-1)` conventionally. \n- `An array can be one-dimensional, two-dimensional, or multidimensional`.\n\n    `Syntax`\n```c\n    data_type arr_name[size];\n```\n\n#### `Description of the syntax`\n\n- `data_type:` This is the data type that specifies the type of elements to be stored in the array. It can be int, float, double, and char.\n- `array_name:` This is the name of the array. To specify the name of an array, you must follow the same rules which are applicable while declaring a usual variable in C.\n- `size:` The size specifies the number of elements held by the array. If the size is n then the number of array elements will be n-1.\n\n<br>\n<br>\n\n`Example`\nThe following example illustrates the array data types in C.\n```c\n#include <stdio.h>\n\nint main()\n\n{\n\n    int idx, element;\n\n    // initialize an array.\n\n    int my_array[10] = {10, 0, 29, 8, 52, 14, 16, 100, 2, 27};\n\n    printf(\"Enter element to be searched:\\n\");\n\n    // input element to be searched.\n\n    scanf(\"%d\", &element);\n\n    // traverse the array to search the element.\n\n    for (idx = 0; idx <= 9; idx++)\n\n    {\n\n        if (my_array[idx] == element)\n\n        {\n\n            // print the index at which\n\n            // the element is found.\n\n            printf(\"Element found at idxex %d\", idx);\n\n            break;\n\n        }\n\n    } \n\n    // if the element is not found.\n\n    if (idx == 10)\n\n    {\n\n        printf(\"\\nElement not found!\");\n\n    }\n\n     return 0;\n\n}\n\n```\n\n- The above example is to check if the input element exists in the array or not. Here, we have declared an integer type array for size 10. We are iterating over the array and checking if the given element is found in the array. \n\n### `Functions`\n- A function is a piece of code that` performs some specific task` when invoked in the program. It can be called from `anywhere and any number of times` in the program. The return value i.e., what type of value it will `return depends upon the return type of the function`.\n\n- In C, a function can be called by types: `call by value and call by reference. `When the function is called by value, a copy of the variable is passed as the argument whereas when the function is called by the reference, the address or reference of variable itself is passed to the function.\n\n    `Syntax`\n```c\nreturn_type function_name(parameters);\n```\n\n`Description of the Syntax`\n\n- `return_type:` This is the data type that specifies the type of value to be returned by the function. If the return type is void, then it is not mandatory for the function to return a value.\n- `function_name:` This is the name of the function. To specify the name of a function, you must follow the same rules which are applicable while declaring a usual variable in C.\n- `parameters:` The parameters are optional. They are passed according to the type of the function call.\n`Example`\nThe following example illustrates functions in C.\n```c\n\n#include <stdio.h>\n\n// function returning the maximum\n\n// numbers between two integers.\n\nint max_num(int num1, int num2)\n\n{\n\n    // local variable declaration\n\n    int res; \n\n    if (num1 > num2)\n\n        res = num1;\n\n    else\n\n        res = num2; \n\n    return res;\n\n} \n\nint main()\n\n{\n\n    // local variable definition.\n\n    int num1 = 225;\n\n    int num2 = 250;\n\n    int res;\n\n     // function call.\n\n    res = max_num(num1, num2); \n\n    // print the result.\n\n    printf(\"Maximum number is : %d\\n\", res);\n\n    return 0;\n\n}\n```\n\n- The above example is comparing two numbers and finding the greatest among them. Here, we have passed two numbers that need to be compared, to the function by value. The function has an int return type so, it is returning the greater number after making a comparison.\n\n### `Pointers`\n- A pointer can be defined as a variable that stores the address of other variables. This address signifies where that variable is located in the memory. If a is storing the address of b, then a is pointing to b. The data type of a pointer must be the same as the variable whose address it is storing. \n\n    `Syntax`\n```c\ntype *pointer_name;\n```\n`Description of the syntax`\n- type: This is the data type that specifies the type of value to which the pointer is pointing.\n- pointer_name: This is the name of the pointer. To specify the name of a pointer, you must follow the same rules which are applicable while declaring a usual variable in C. Apart from these rules, a pointer must always be preceded by an asterisk(*).\n`Example`\nThe following example illustrates pointers in C.\n```C\n#include <stdio.h>\n\nint main()\n\n{\n\n    // array declaration and initialization.\n\n    int arr[4] = {50, 100, 150, 200}; \n\n    // int type pointer variable declaration.\n\n    int *ptr; \n\n    // Assign the address of arr[0] to ptr.\n\n    ptr = arr;\n\n    for (int i = 0; i < 4; i++)\n\n    {\n\n        printf(\"Value of *ptr = %d\\n\", *ptr);\n\n        printf(\"Value of ptr = %p\\n\\n\", ptr); \n\n        // increment pointer ptr by 1.\n\n        ptr++;\n\n    }\n\n}\n```\n\n- In the above example, we have declared a pointer ptr that is holding the address of the array arr. We have looped through the array and printed the value at each index along with the address of the element.\n\n\n\n\n## <u>`User-Defined Data Types` </u>\n\n## `Structure`\n<br>\n<br>\n\n- A structure is a user-defined data type in C that allows you to combine members of different types under a single name (or the struct type). The reason why it is called a user-defined data type is that the variables of different types are clubbed together under a single structure, which can be defined according to the user’s choice. \n\n- Consider a situation where you want to store a record of a book. The book will have properties like name, author, and genre. You can create three variables to store this information. But what if you need to store records of 10 books. Then creating 3 separate variables for each book would not be a practical solution. This is where a structure can be a great solution. A single structure book can be created having three members: name, author, and genre. This structure can be used for all 10 books. \n\n   `Syntax` \n// define a structure.\n```c\nstruct structure_name \n\n{\n\n    data_type var1;\n\n    data_type var2;    \n\n};\n```\n`Description of the Syntax`\n\n- `struct:` The definition of a structure includes the keyword struct followed by its name. All the items inside it are called its members and after being declared inside a structure. \n- `data_type:` Each variable can have a different data type. Variables of any data type can be declared inside a structure.\n- The definition of a structure ends with a semicolon at the end.\n`Example`\n\nThe following example illustrates structure in C.\n```c\n\n#include<stdio.h>  \n\n#include <string.h>  \n\n// define a \"user-defined\" structure.\n\nstruct book      \n\n{  \n\n    // declare members of the structure.\n\n    int id;      \n\n    char name[25];\n\n    char author[50];\n\n    char genre[20];      \n\n};  \n\nint main( )    \n\n{    \n\n   // declare a variable of the book type.\n\n   struct book b1; \n\n \n\n   //store the information of the books.    \n\n   b1.id = 10; \n\n   strcpy(b1.name, \"Dummy\");  \n\n   strcpy(b1.author, \"Dummy Author\"); \n\n   strcpy(b1.genre, \"Science Fiction\");\n\n   // print the information.    \n\n   printf( \"The id is: %d\\n\", b1.id);    \n\n   printf( \"The name of the book is: %s\\n\", b1.name);    \n\n   printf( \"The author of the book is: %s\\n\", b1.author);    \n\n   printf( \"The genre of the book is: %s\\n\", b1.genre);     \n\n   return 0;  \n\n}  \n```\n\n- In the above example, a structured book is defined with 4 member variables: id, name, author, and genre. Now a separate copy of these 4 members will be allocated to any variable of the book type. So, the variable b1 also has its own copy of these 4 variables which are used to store the information about this book.\n\n## `Union`\n- A union is also a user-defined data type. It also holds members of different data types under a single name. A union sounds similar to a structure and they are similar in conceptual terms. But there are some major differences between the two. While a structure allocates sufficient memory for all its members, a union only allocates memory equal to its largest member. \n\n`Syntax` \n```c\n\nunion structure_name \n{\n\n    data_type var1;\n\n    data_type var2;   \n\n};\n```\n\n`Description of the Syntax`\n- `union:` The union keyword is written at the beginning of the definition of a union in C. After it,  the name of the union is specified.\n- `data_type:` It is the data type of the member variable of the union. Members of different types can be defined inside a union.\n- To understand the major difference between a structure and a union, consider the following definitions of a structure and a union:\n\n#### `Structure definition`\n```c\nstruct book      \n\n{  \n\n    int price;      // 4 bytes\n\n    char name[10];  // 1*10 = 10 bytes    \n\n};  \n```\n#### `Union definition`\n\n```c\nunion book      \n\n{  \n\n    int price;      // 4 bytes\n\n    char name[10];  // 1*10 = 10 bytes    \n\n};\n```\nAn object of the structure book would be allocated 14 bytes for both the int and char members. However, an object of the union book would only be allocated 10 bytes (equal to the memory required by the char member) which is the maximum size.\n\n`Example`\nThe following example illustrates union in C.\n```c\n\n#include<stdio.h>\n\n#include<string.h>\n\n// define the union. \n\nunion city\n\n{\n\n    int pinCode;\n\n    char name[20];\n\n}; \n\nint main( )\n\n{  \n\n   // object of the type \"city\".\n\n   union city c1; \n\n   c1.pinCode = 110090;\n\n   strcpy( c1.name, \"Delhi\");\n\n   // print the information.\n\n   printf(\"The pin code of the city: %d\\n\", c1.pinCode);   \n\n   printf(\"The name of the city is: %s\\n\", c1.name); \n\n}\n\n```\n\n- In the above example, the char array name is printed correctly whereas the pinCode gives a corrupted value. This happened because the name occupied the space allocated for object c1. \n\n###  `Enumeration `\nEnumeration or simply enum is one of the user-defined data types in C which provides a special type of flexibility of defining variables. An enum consists of a set of integer constants that can be replaced by user-defined names. \n\n   `Syntax`\n```c\nenum flag {const_name1, const_name2, ..., const_nameN};\n\n```\n\n`Description of the Syntax`\n\nenum: The keyword enum is written at the beginning of the definition.\nflag: This is the default name of the enumeration set. It can be replaced by another name or can be used as it is. \nconst_name: It is the integral identifier inside the enum set. The default values of this set are- {0, 1, 2, ….}.\n\n\n`Example`\nThe following example illustrates enumeration in C.\n```c\n#include <stdio.h>\n\n// define enum flags.\n\nenum color { red, blue, green };         // set is {0, 1, 2}.\n\nenum fruit { mango = 10, apple, grapes }; // set is {10, 11, 12}. \n\nint main()\n\n{\n\n    enum color c1;\n\n    enum fruit f1;\n\n    c1 = blue;  // default value i.e. 1 will be assigned.\n\n    f1 = apple; // 11 will be assigned. \n\n    printf(\"The second value in enum set is: %d\\n\",c1);\n\n    printf(\"The second value in enum set is: %d\\n\",f1); \n\n    return 0;\n\n}\n```\n\n- In the above example, two enum flags are defined. The first enum flag color{red, blue, green} has a constant with default values i.e. {0, 1, 2}. So, when the second constant blue is printed, 1 will be displayed in the output. Whereas, in the second enum flag fruit{mango, apple, grapes}, the first constant i.e. mango is initialized with 10. So, the values of the following constants will automatically get updated. Hence, when the second constant of the enum fruit is printed, 11 is displayed in the output.\n\n\n## `Data Type Modifiers`\n<table><tbody>\n<tr>\n<td>\n<h3>DATA TYPE</h3>\n</td>\n<td>\n<h3>MEMORY (bytes)</h3>\n</td>\n<td>\n<h3>RANGE</h3>\n</td>\n<td>\n<h3>FORMAT SPECIFIER</h3>\n</td>\n</tr>\n<tr>\n<td>\n<p>short int</p>\n</td>\n<td>\n<p>2</p>\n</td>\n<td>\n<p>-32,768 to 32,767&nbsp;</p>\n</td>\n<td>\n<p>%hd&nbsp;</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unsigned int</p>\n</td>\n<td>\n<p>4</p>\n</td>\n<td>\n<p>0 to 4,294,967,295&nbsp;</p>\n</td>\n<td>\n<p>%u</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>long int</p>\n</td>\n<td>\n<p>4</p>\n</td>\n<td>\n<p>-231 to 231 - 1&nbsp;&nbsp;</p>\n</td>\n<td>\n<p>%ld</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>long long int</p>\n</td>\n<td>\n<p>8</p>\n</td>\n<td>\n<p>-(263) to (263)-1</p>\n</td>\n<td>\n<p>%lld&nbsp;</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unsigned long int</p>\n</td>\n<td>\n<p>4</p>\n</td>\n<td>\n<p>0 to 4,294,967,295&nbsp;</p>\n</td>\n<td>\n<p>%lu</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unsigned long long int</p>\n</td>\n<td>\n<p>8</p>\n</td>\n<td>\n<p>0 to 2^64-1&nbsp;</p>\n</td>\n<td>\n<p>%llu</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>signed char</p>\n</td>\n<td>\n<p>1</p>\n</td>\n<td>\n<p>-128 to 127&nbsp;</p>\n</td>\n<td>\n<p>%c</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unsigned char</p>\n</td>\n<td>\n<p>1</p>\n</td>\n<td>\n<p>0 to 255&nbsp;</p>\n</td>\n<td>\n<p>%c</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>long double</p>\n</td>\n<td>\n<p>16</p>\n</td>\n<td>\n<p>3.4E-4932 to 1.1E+4932</p>\n</td>\n<td>\n<p>%Lf</p>\n</td>\n</tr>\n</tbody></table>\n\n\n\n## `Signed`\nWhen a signed variable is declared, it indicates that it can have both negative and positive values. This modifier can be applied to data types like int, char, short, and long. In C, the value stored in a variable is signed by default. For example in the declaration, int var = 10, the int variable is a signed int by default and the variable var can hold both negative and positive values.\n\n`Syntax` \n```c\nsigned type var_name;\n```\nExamples\n```c\nsigned int var1;\n\nsigned short int var2;\n\nsigned long int var3;\n\nsigned long long int var4;\n\nsigned char var5;\n```\n```diff\n-Note: Since all data types are signed by default, the best practice is to declare variables without using the suffix “signed”.\n```\n- An n-bit variable can contain 2n  possible values. So, an 8-bit signed integer can store 28 i.e. 256 possible values.\n\n<table><tbody>\n<tr>\n<td>\n<p>Bits</p>\n</td>\n<td>\n<p>Range</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>8 bit signed</p>\n</td>\n<td>\n<p>-128 to 127</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>16 bit signed</p>\n</td>\n<td>\n<p>-32,768 to 32,767</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>32 bit signed</p>\n</td>\n<td>\n<p>-2,147,483,648 to 2,147,483,647</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>64 bit signed</p>\n</td>\n<td>\n<p>-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</p>\n</td>\n</tr>\n</tbody></table>\n\n<hr>\n\n\n The following example illustrates the size occupied by signed variables.\n```c\n#include <stdio.h>\n\nint main()\n\n{\n\n    // declare signed variables.\n\n    signed int var1;\n\n    signed short int var2;\n\n    signed long int var3;\n\n    signed long long int var4;\n\n    signed char var5;\n\n    // print the size occupied by the signed variables.\n\n    printf(\"The size occupied by signed int is: %d\\n\", sizeof(signed int));\n\n    printf(\"The size occupied by signed short int is: %d\\n\", sizeof(signed short int));\n\n    printf(\"The size occupied by signed long int is: %d\\n\", sizeof(signed long int));\n\n    printf(\"The size occupied by signed long long int is: %d\\n\", sizeof(signed long long int));\n\n    printf(\"The size occupied by signed char is: %d\\n\", sizeof(signed char));\n\n    printf(\"\\n\\n\");\n\n}\n```\n\n\n## `Unsigned`\n\n- An unsigned variable can contain only 0 and positive values (non-negative values). This data type modifier can be used with the types- int, char, short, and long. To declare an unsigned variable the suffix “unsigned” is used before the type of the variable. \n\n- The range of possible values of an unsigned variable is nearly double the range of a signed variable. This data type modifier is useful for positive entities like age, salary, etc.\n\n`Syntax`\n```c\nunsigned type var_name;\n```\n`Examples`\n```c\nunsigned int var1;\n\nunsigned short int var2;\n\nunsigned long int var3;\n\nunsigned long long int var4;\n\nunsigned char var5;\n```\n- In a 32-bit system, an unsigned integer can hold values up to 232-1 i.e. 0 to 4,294,967,295 values.\n\n<table><tbody>\n<tr>\n<td>\n<p>Bits</p>\n</td>\n<td>\n<p>Range</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>8 bit unsigned</p>\n</td>\n<td>\n<p>0 to 255</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>16 bit unsigned</p>\n</td>\n<td>\n<p>0 to 65535</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>32 bit unsigned</p>\n</td>\n<td>\n<p>0 to 4294967295</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>64 bit unsigned</p>\n</td>\n<td>\n<p>0 to 18446744073709551615</p>\n</td>\n</tr>\n</tbody></table>\n\n\n The following example illustrates the size occupied by unsigned variables.\n```c\n#include <stdio.h>\n\nint main()\n\n{\n\n    // declare unsigned variables.\n\n    unsigned int var1;\n\n    unsigned short int var2;\n\n    unsigned long int var3;\n\n    unsigned long long int var4;\n\n    unsigned char var5; \n\n    // print the size occupied by the unsigned variables.\n\n    printf(\"The size occupied by unsigned int is: %d\\n\", sizeof(unsigned int));\n\n    printf(\"The size occupied by unsigned short int is: %d\\n\", sizeof(unsigned short int));\n\n    printf(\"The size occupied by unsigned long int is: %d\\n\", sizeof(unsigned long int));\n\n    printf(\"The size occupied by unsigned long long int is: %d\\n\", sizeof(unsigned long long int));\n\n    printf(\"The size occupied by unsigned char is: %d\\n\", sizeof(unsigned char)); \n\n    printf(\"\\n\\n\"); \n\n}\n```\n\n## `Long`\nThe long data type modifier is used when the value to be stored is `large and exceeds the usual integer range`. It can be applied to `int and double data types` in C. A long integer variable takes `4 bytes of memory space in a 32-bit system`. \n\n`Syntax`\n```c\nlong type var_name;\n```\n`Examples`\n```c\nlong int var1;       // or long var1\n\nlong long int var2;  // or long long var2\n\nlong double var3;\n```\n- In C, `“long int”` is equivalent to simply `“long”` and similarly instead of `“long long int”` you can simply write `“long long”`. This is commonly used in competitive programming as the inputs there can be very large.\n\nThe following example illustrates the size occupied by long variables.\n```c\n#include <stdio.h>\n\nint main()\n\n{\n\n    // declare long variables.\n\n    long int var1;      \n\n    long long int var2;  \n\n    long double var3;\n\n    // print the size occupied by the long variables.\n\n    printf(\"The size occupied by long int is: %d\\n\", sizeof(long int));\n\n    printf(\"The size occupied by long long int is: %d\\n\", sizeof(long long int));\n\n    printf(\"The size occupied by long double is: %d\\n\", sizeof(long double));\n\n    printf(\"\\n\\n\");\n\n}\n```\n\n\n## `Short`\nThe short data type modifier is used for saving memory consumption. It can contain whole numbers lying in the range from -32768 to 32767. It can only be applied with an int data type and it’s also said to be a 16-bit signed two's complement integer.\n\n`Syntax`\n```c\nshort int var_name;\n\n// or\n\nshort var_name;\n```\n- Note: This data type modifier takes 2 times less memory than the usual integer variable. \n\nThe following example illustrates the size occupied by long variables.\n```c\n#include <stdio.h>\n\nint main()\n\n{\n\n    // declare a short variable.\n\n    short int var_name; \n\n    // print the size occupied by the long variables.\n\n    printf(\"The size occupied by long int is: %d\\n\", sizeof(short int));\n\n    printf(\"\\n\\n\");   \n\n    return 0;\n\n}\n```","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744721958ef13879b9492c","56744722958ef13879b951bb","56744723958ef13879b955a9","56744721958ef13879b94ae7","56744721958ef13879b94982"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5332.5032,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d3548a","567453d0b73d6a82ac8c5abd","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5abc","5d9dd859f31791c942dc5b52","567453d0b73d6a82ac8c5ab9","5c090d96c2a9c2a674d35486","5c090d96c2a9c2a674d35484","5c090d96c2a9c2a674d35488"],"totalReactions":21,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":true,"enableToc":true,"toc":[[{"id":"bf0928b9-664d-4540-8e0e-c1109c3261ba","level":1,"previousLevel":null,"parentId":null,"slug":"datatypes","title":"Datatypes"}],[{"id":"6ff8599c-d005-4a35-bc85-4e4bde030c04","level":2,"previousLevel":1,"parentId":"bf0928b9-664d-4540-8e0e-c1109c3261ba","slug":"in-c-we-have-bunch-of-datatypes","title":"In C we have bunch of Datatypes"}],[{"id":"9b2aa74f-fb97-4a1d-85b7-595a64141ca4","level":2,"previousLevel":2,"parentId":"bf0928b9-664d-4540-8e0e-c1109c3261ba","slug":"primitive-datatypes","title":"&lt;u&gt; Primitive Datatypes &lt;/u&gt;"}],[{"id":"c4b3301e-b5d1-4860-8d3c-ecfe2b21cdc8","level":3,"previousLevel":2,"parentId":"9b2aa74f-fb97-4a1d-85b7-595a64141ca4","slug":"int-datatypes","title":"Int Datatypes"}],[{"id":"c6ac27e2-ec7f-4948-b933-d7a27c2f3921","level":4,"previousLevel":3,"parentId":"c4b3301e-b5d1-4860-8d3c-ecfe2b21cdc8","slug":"example","title":"Example"}],[{"id":"67d90998-4601-4f30-820c-7b33e1858c78","level":4,"previousLevel":4,"parentId":"c4b3301e-b5d1-4860-8d3c-ecfe2b21cdc8","slug":"char-data-type","title":"Char Data Type"}],[{"id":"a3c4236e-b376-4767-abb8-a7536bad15c9","level":3,"previousLevel":4,"parentId":"9b2aa74f-fb97-4a1d-85b7-595a64141ca4","slug":"float-data-type","title":"Float Data Type"}],[{"id":"6ce95faa-98c6-4573-9d7b-b2783fbdf92b","level":4,"previousLevel":3,"parentId":"a3c4236e-b376-4767-abb8-a7536bad15c9","slug":"double-data-type","title":"Double Data Type"}],[{"id":"072feef1-73c5-4a5c-9b92-226c93b6c328","level":2,"previousLevel":4,"parentId":"bf0928b9-664d-4540-8e0e-c1109c3261ba","slug":"derived-datatypes","title":"Derived Datatypes"}],[{"id":"46c264ed-8a6b-4075-b00f-45b2161b25dd","level":3,"previousLevel":2,"parentId":"072feef1-73c5-4a5c-9b92-226c93b6c328","slug":"arrays","title":"Arrays"}],[{"id":"1a69b08e-1e6e-4fc9-bf6f-8ed936d22da8","level":4,"previousLevel":3,"parentId":"46c264ed-8a6b-4075-b00f-45b2161b25dd","slug":"description-of-the-syntax","title":"Description of the syntax"}],[{"id":"e2b11d72-c739-4859-b2c1-3c75118e2b6e","level":3,"previousLevel":4,"parentId":"072feef1-73c5-4a5c-9b92-226c93b6c328","slug":"functions","title":"Functions"}],[{"id":"9d73ad7c-87fa-42ff-9c8b-94965a1f3af4","level":2,"previousLevel":3,"parentId":"bf0928b9-664d-4540-8e0e-c1109c3261ba","slug":"union","title":"Union"}],[{"id":"0bfb7576-6f7b-4162-9650-c16d0aca4f77","level":4,"previousLevel":2,"parentId":"9d73ad7c-87fa-42ff-9c8b-94965a1f3af4","slug":"structure-definition","title":"Structure definition"}],[{"id":"cf2e098b-7046-43e8-9379-214edeb9d330","level":4,"previousLevel":4,"parentId":"9d73ad7c-87fa-42ff-9c8b-94965a1f3af4","slug":"union-definition","title":"Union definition"}],[{"id":"92097251-29a2-418b-a0f4-3454ae67a30f","level":3,"previousLevel":4,"parentId":"9d73ad7c-87fa-42ff-9c8b-94965a1f3af4","slug":"enumeration","title":"Enumeration"}],[{"id":"55e6a231-7993-4653-a25f-d8720a5a57fa","level":2,"previousLevel":3,"parentId":"bf0928b9-664d-4540-8e0e-c1109c3261ba","slug":"data-type-modifiers","title":"Data Type Modifiers"}],[{"id":"a79ad173-bd62-42a9-b102-760ba6279f0c","level":2,"previousLevel":2,"parentId":"bf0928b9-664d-4540-8e0e-c1109c3261ba","slug":"signed","title":"Signed"}],[{"id":"009de859-3fbe-496c-b6c5-fc6a131158b2","level":2,"previousLevel":2,"parentId":"bf0928b9-664d-4540-8e0e-c1109c3261ba","slug":"unsigned","title":"Unsigned"}],[{"id":"c07ca0ae-120b-4249-9f28-16c064921cbc","level":2,"previousLevel":2,"parentId":"bf0928b9-664d-4540-8e0e-c1109c3261ba","slug":"long","title":"Long"}],[{"id":"72ddc418-6a2d-4955-8d0d-962993fb02a4","level":2,"previousLevel":2,"parentId":"bf0928b9-664d-4540-8e0e-c1109c3261ba","slug":"short","title":"Short"}]],"numUniqueUsersWhoReacted":0,"_id":"62486fa64b4dde0dc0be6f2e","title":"Data Structure 101 in C - Programming Language","subtitle":"Learn the basic idea of Data Structure in C.","type":"story","coverImageAttribution":"","coverImagePhotographer":"","isCoverAttributionHidden":false,"metaTitle":"data structure in c,\nC data structure","metaDescription":"C - programming language\nData structure in c\n\nwhat are the data structures in c ?\ndata structure complete guide","partOfPublication":true,"publication":"6285a82d83966a1653f1383f","slug":"data-structure-101-in-c-programming-language","pollOptions":[],"dateAdded":"2022-04-02T15:45:42.041Z","badges":[],"questionReplies":[],"contributors":[],"cuid":"cl1i10xna03k6jvnv39ecdwmn","author":"61f829629030330a7b25a024","followersCount":1,"draft":"6248654516cdedfe9f7cd3cc","isRepublished":false,"hasPinnedTag":false,"readTime":20,"__v":2,"viewsUpdatedOn":1664697610481,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":3,"reaction_5c090d96c2a9c2a674d35485":2,"reaction_5c090d96c2a9c2a674d35488":2,"reaction_5c090d96c2a9c2a674d3548a":2,"reaction_567453d0b73d6a82ac8c5abd":2,"reaction_5c090d96c2a9c2a674d3548b":2,"reaction_567453d0b73d6a82ac8c5abc":2,"reaction_5d9dd859f31791c942dc5b52":2,"reaction_567453d0b73d6a82ac8c5ab9":2,"reaction_5c090d96c2a9c2a674d35486":2},"series":"628a2bb4929bcf4c721d471f","dateUpdated":"2022-05-22T12:30:25.393Z","pendingPublicationApproval":false,"uniqueReactions":["5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d3548a","567453d0b73d6a82ac8c5abd","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5abc","5d9dd859f31791c942dc5b52","567453d0b73d6a82ac8c5ab9","5c090d96c2a9c2a674d35486","5c090d96c2a9c2a674d35484","5c090d96c2a9c2a674d35488"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":3,"reaction_5c090d96c2a9c2a674d35485":2,"reaction_5c090d96c2a9c2a674d35488":2,"reaction_5c090d96c2a9c2a674d3548a":2,"reaction_567453d0b73d6a82ac8c5abd":2,"reaction_5c090d96c2a9c2a674d3548b":2,"reaction_567453d0b73d6a82ac8c5abc":2,"reaction_5d9dd859f31791c942dc5b52":2,"reaction_567453d0b73d6a82ac8c5ab9":2,"reaction_5c090d96c2a9c2a674d35486":2},"id":"62486fa64b4dde0dc0be6f2e"},{"audioUrls":{"male":"https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl16j1t65059vkpnv6s8p30wk-male"},"reward":{"type":"xlm"},"backups":{"github":{"owner":"Abbhiishek","repository":"Blogs"}},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":230,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1648218694186/dYO5eq58U.png","autoGeneratedCover":"","brief":"Variables\n Variables are the name of a memory location where data is being stored .\nint a = 10 ;\n\nHere we are storing the value 10 in a variable named a.\n\nHow to visulaise a variable in a place .\n\nWe can imagine a variable as a conatiner in any langu...","content":"<h1 id=\"heading-variables\">Variables</h1>\n<p> Variables are the name of a memory location where data is being stored .</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span> ;\n</code></pre>\n<p>Here we are storing the value 10 in a variable named a.</p>\n<p><br /></p>\n<h2 id=\"heading-how-to-visulaise-a-variable-in-a-place\"><code>How to visulaise a variable in a place .</code></h2>\n<ul>\n<li><p>We can imagine a variable as a <code>conatiner</code> in any language where we can store some data and modify that in later down the line in code . </p>\n</li>\n<li><p>A variable make it easy for us to access the data we want to access for <code>mathematical operations</code>.</p>\n</li>\n</ul>\n<p><img src=\"https://s3.studytonight.com/tutorials/uploads/pictures/1632808033-.png\" /></p>\n<p><br />\n<br /></p>\n<ul>\n<li><p>Lets take an example for better undersatnding :</p>\n<p>  lets assume that i want to add some numbers in my c program and then print the result  in terminal .</p>\n<pre><code class=\"lang-c\">\n          <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">10</span>;\n          <span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">20</span>;\n          <span class=\"hljs-comment\">// int k = i + j; </span>\n\n          <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, i + j);\n</code></pre>\n<ul>\n<li><p>When we run the code and its print the output we get our result , but here we are not able to <code>store that data</code> into something for later use .</p>\n</li>\n<li><p>So we need to store the result in a <code>variable</code> .</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><br />\n<br /></p>\n<h2 id=\"heading-rules-for-naming-variables\">Rules for naming variables .</h2>\n<p>So there are bunch of rules and regulations for naming variables , that one should follow otherwise the compiler will give an error .</p>\n<ul>\n<li><p><code>Variables should start with a letter or an underscore (\"_\").</code></p>\n<pre><code class=\"lang-c\">It means that <span class=\"hljs-keyword\">if</span> we start the variable name with a number then the compiler will give an error.\n\n we can make variable name as <span class=\"hljs-string\">\"_abc\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc_\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc\"</span>  \n\n but <span class=\"hljs-keyword\">not</span> <span class=\"hljs-string\">\"1abc\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"@abc\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc@\"</span> .\n</code></pre>\n</li>\n</ul>\n<p><br />\n<br /></p>\n<ul>\n<li><p><code>Variables should not contain spaces or commas.</code></p>\n<pre><code class=\"lang-c\">It means that <span class=\"hljs-keyword\">if</span> we have a variable name which contains spaces then the compiler will give an error.\n\nwe can make variable name as <span class=\"hljs-string\">\"abc1def\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc_def\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abcdef\"</span>  \n\nbut <span class=\"hljs-keyword\">not</span> <span class=\"hljs-string\">\"abc,def\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc def\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc@def\"</span> .\n</code></pre>\n</li>\n</ul>\n<p><br />\n<br /></p>\n<ul>\n<li><p><code>Variables should not start with a number.</code></p>\n<pre><code class=\"lang-c\">It means that <span class=\"hljs-keyword\">if</span> we start the variable name with a number then the compiler will give an error.\n\nwe can make variable name as <span class=\"hljs-string\">\"abc\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc_\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc\"</span>  \n\nbut <span class=\"hljs-keyword\">not</span> <span class=\"hljs-string\">\"1abc\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"45abc\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"001_abc@\"</span> .\n</code></pre>\n</li>\n</ul>\n<p><br />\n<br /></p>\n<ul>\n<li><p><code>Variables should not contain any special characters only \"_\" is allowed .</code></p>\n<pre><code class=\"lang-c\">It means that <span class=\"hljs-keyword\">if</span> we have a variable name which contains special characters then the compiler will give an error.\n\nwe can make variable name as <span class=\"hljs-string\">\"abc\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc_\"</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc\"</span>  \n\nbut <span class=\"hljs-keyword\">not</span> <span class=\"hljs-string\">\"1abc\"</span> <span class=\"hljs-keyword\">or</span> `@abc` <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"abc@\"</span> .\n</code></pre>\n</li>\n</ul>\n<p><br />\n<br /></p>\n<h2 id=\"heading-how-to-declare-a-variable\">How to declare a variable .</h2>\n<ul>\n<li>We can declare a variable in two ways .</li>\n<li>One is by using the keyword <code>int</code> .</li>\n<li>Another is by using the keyword <code>float</code> .</li>\n<li>we can also use the keyword <code>char</code> .</li>\n<li>we can also use the keyword <code>double</code> .</li>\n<li>All these keywords are used to declare a <code>variable</code> .</li>\n</ul>\n<p><br />\n<br /></p>\n<h3 id=\"heading-lets-take-an-example-for-better-undersatnding\">Lets take an example for better undersatnding :</h3>\n<pre><code class=\"lang-c\">    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">float</span> f = <span class=\"hljs-number\">10.5</span>;\n    <span class=\"hljs-keyword\">char</span> c = <span class=\"hljs-string\">'a'</span>;\n    <span class=\"hljs-keyword\">double</span> d = <span class=\"hljs-number\">10.5</span>;\n</code></pre>\n<ul>\n<li>Here we are declaring a variable named <code>i</code> and assigning it the value 10 .</li>\n<li><p>Here we are declaring a variable named <code>f</code> and assigning it the value 10.5 .</p>\n</li>\n<li><p>Here we are declaring a variable named <code>c</code> and assigning it the value 'a' .</p>\n</li>\n</ul>\n<p>Here all these  i  ,  f  ,  c  ,  d  are called <code>variables</code> .</p>\n<ul>\n<li>Here all these int , float , char , double are called <code>types</code>  of the variable and the type of data they can store  , <code>Datatypes</code>.</li>\n</ul>\n<h3 id=\"heading-we-would-be-discussing-datatypes-in-next-module\"><code>we would be discussing datatypes in next Module !</code></h3>\n<p><br />\n<br /></p>\n<h2 id=\"heading-how-to-assign-a-value-to-a-variable\">How to assign a value to a variable .</h2>\n<p><br /></p>\n<ul>\n<li>We can assign a value to a variable by using the keyword <code>=</code> .</li>\n<li><code>datatype variable_name = value_to_be_stores ;</code> </li>\n</ul>\n<h2 id=\"heading-naming-convention\"><code>Naming Convention</code></h2>\n<p>There are some convention for naming variables .\nBy following these convention we can make our code more readable and maintainable. Some of the convention are as follows:</p>\n<ul>\n<li><code>Variable names should be written in lowercase_with_underscore.</code></li>\n<li><code>Variable names should not start with a number.</code></li>\n<li><code>Variable names should not contain any special characters.</code></li>\n<li><code>Variable names should not contain spaces.</code></li>\n<li><code>one should mantain a naming system for the variables so that with just one look we can find the variabl, and predict here the value is comming from.</code></li>\n</ul>\n<pre><code> ```c\n  <span class=\"hljs-keyword\">int</span> a <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>; ❎\n\n  <span class=\"hljs-comment\">// here we are assigning the value 10 to the variable a , but with more code and more complexity we shall not be able to find the origin of a , and this can take a much time in debugging the code .</span>\n\n  <span class=\"hljs-keyword\">int</span> number <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>; ✅\n\n  <span class=\"hljs-comment\">// here by just looking at the variable we can make a idea about the origin of the variable  number that its store some kind of number .</span>\n\n  <span class=\"hljs-keyword\">int</span> random_number <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10004546679667677</span>;\n\n  <span class=\"hljs-comment\">// here we can see that the variable `10004546679667677` is comming from the `random_number` variable.</span>\n\n  <span class=\"hljs-keyword\">int</span> user_name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"Abhishek Kushwaha\"</span>;\n\n  <span class=\"hljs-comment\">// here we can see that the variable `Abhishek Kushwaha` is comming from the `user_name` variable.</span>\n\n  <span class=\"hljs-keyword\">int</span> user_age <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20</span>;\n\n  <span class=\"hljs-comment\">// here we can see that the variable `20` is comming from the `user_age` variable.</span>\n\n\n ```\n</code></pre><p><br /></p>\n","contentMarkdown":"# Variables\n\n\n Variables are the name of a memory location where data is being stored .\n\n\n```c\nint a = 10 ;\n```\n\nHere we are storing the value 10 in a variable named a.\n\n<br>\n\n\n## `How to visulaise a variable in a place .`\n\n- We can imagine a variable as a `conatiner` in any language where we can store some data and modify that in later down the line in code . \n\n- A variable make it easy for us to access the data we want to access for `mathematical operations`.\n\n<img src=\"https://s3.studytonight.com/tutorials/uploads/pictures/1632808033-.png\">\n\n\n<br>\n<br>\n\n- Lets take an example for better undersatnding :\n\n    lets assume that i want to add some numbers in my c program and then print the result  in terminal .\n    ```c\n\n            int i = 10;\n            int j = 20;\n            // int k = i + j; \n\n            printf(\"%d\", i + j);\n    ```\n\n    - When we run the code and its print the output we get our result , but here we are not able to `store that data` into something for later use .\n\n    - So we need to store the result in a `variable` .\n\n<br>\n<br>\n\n## Rules for naming variables .\n\nSo there are bunch of rules and regulations for naming variables , that one should follow otherwise the compiler will give an error .\n\n- `Variables should start with a letter or an underscore (\"_\").`\n  ```c\n  It means that if we start the variable name with a number then the compiler will give an error.\n\n   we can make variable name as \"_abc\" or \"abc_\" or \"abc\"  \n\n   but not \"1abc\" or \"@abc\" or \"abc@\" .\n  \n  ```\n  \n<br>\n<br>\n\n\n- `Variables should not contain spaces or commas.`\n  ```c\n  It means that if we have a variable name which contains spaces then the compiler will give an error.\n\n  we can make variable name as \"abc1def\" or \"abc_def\" or \"abcdef\"  \n\n  but not \"abc,def\" or \"abc def\" or \"abc@def\" .\n  \n  ```\n\n<br>\n<br>\n\n- `Variables should not start with a number.`\n  ```c\n  It means that if we start the variable name with a number then the compiler will give an error.\n\n  we can make variable name as \"abc\" or \"abc_\" or \"abc\"  \n\n  but not \"1abc\" or \"45abc\" or \"001_abc@\" .\n  \n  ```\n\n<br>\n<br>\n\n- `Variables should not contain any special characters only \"_\" is allowed .`\n  ```c\n  It means that if we have a variable name which contains special characters then the compiler will give an error.\n\n  we can make variable name as \"abc\" or \"abc_\" or \"abc\"  \n\n  but not \"1abc\" or `@abc` or \"abc@\" .\n  \n  ```\n\n<br>\n<br>\n\n\n## How to declare a variable .\n\n- We can declare a variable in two ways .\n- One is by using the keyword `int` .\n- Another is by using the keyword `float` .\n- we can also use the keyword `char` .\n- we can also use the keyword `double` .\n- All these keywords are used to declare a `variable` .\n\n<br>\n<br>\n\n### Lets take an example for better undersatnding :\n```c\n    int i = 10;\n    float f = 10.5;\n    char c = 'a';\n    double d = 10.5;\n\n```\n\n- Here we are declaring a variable named `i` and assigning it the value 10 .\n- Here we are declaring a variable named `f` and assigning it the value 10.5 .\n\n- Here we are declaring a variable named `c` and assigning it the value 'a' .\n\n\n\nHere all these  i  ,  f  ,  c  ,  d  are called `variables` .\n- Here all these int , float , char , double are called `types`  of the variable and the type of data they can store  , `Datatypes`.\n\n### `we would be discussing datatypes in next Module !`\n\n<br>\n<br>\n\n## How to assign a value to a variable .\n<br>\n\n- We can assign a value to a variable by using the keyword `=` .\n- ` datatype variable_name = value_to_be_stores ;` \n\n## `Naming Convention`\n\n\nThere are some convention for naming variables .\nBy following these convention we can make our code more readable and maintainable. Some of the convention are as follows:\n\n- `Variable names should be written in lowercase_with_underscore.`\n-  `Variable names should not start with a number.`\n- `Variable names should not contain any special characters.`\n-  `Variable names should not contain spaces.`\n- `one should mantain a naming system for the variables so that with just one look we can find the variabl, and predict here the value is comming from.`\n\n\n\n     ```c\n      int a = 10; ❎\n\n      // here we are assigning the value 10 to the variable a , but with more code and more complexity we shall not be able to find the origin of a , and this can take a much time in debugging the code .\n\n      int number = 10; ✅\n\n      // here by just looking at the variable we can make a idea about the origin of the variable  number that its store some kind of number .\n\n      int random_number = 10004546679667677;\n\n      // here we can see that the variable `10004546679667677` is comming from the `random_number` variable.\n\n      int user_name = \"Abhishek Kushwaha\";\n\n      // here we can see that the variable `Abhishek Kushwaha` is comming from the `user_name` variable.\n\n      int user_age = 20;\n\n      // here we can see that the variable `20` is comming from the `user_age` variable.\n\n     \n     ```\n\n\n<br>\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744721958ef13879b9492c","56744721958ef13879b94863","56744722958ef13879b951bb","56744723958ef13879b955a9"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5317.2345,"responses":[{"popularity":5315.7843,"isActive":true,"upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"score":0,"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"_id":"623ddd342209c88a3de90478","content":"<p>Kaha se liya</p>\n","contentMarkdown":"Kaha se liya","author":"623ddcd02209c88a3de9046e","stamp":"cl16kir7j05f6kpnvennlcjvu","post":"623dd38e2209c88a3de90300","replies":[],"dateAdded":"2022-03-25T15:18:12.800Z","badgesAwarded":[],"__v":0}],"responseCount":1,"replyCount":1,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35486","5c090d96c2a9c2a674d3548a","5c090d96c2a9c2a674d35488","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5ab9","567453d0b73d6a82ac8c5abc","5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abd"],"totalReactions":32,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":true,"enableToc":true,"toc":[[{"id":"ad20de78-f4c8-4bd0-86c0-fc7821cc0d0c","level":1,"previousLevel":null,"parentId":null,"slug":"variables","title":"Variables"}],[{"id":"c15e13f4-fb91-4d4e-9cf2-2281c5973016","level":2,"previousLevel":1,"parentId":"ad20de78-f4c8-4bd0-86c0-fc7821cc0d0c","slug":"how-to-visulaise-a-variable-in-a-place","title":"How to visulaise a variable in a place ."}],[{"id":"0ede3d50-6c1b-4708-a46d-46a04e7fd1b9","level":2,"previousLevel":2,"parentId":"ad20de78-f4c8-4bd0-86c0-fc7821cc0d0c","slug":"rules-for-naming-variables","title":"Rules for naming variables ."}],[{"id":"ef697fd2-ef1d-411d-8219-72f0ec112a75","level":2,"previousLevel":2,"parentId":"ad20de78-f4c8-4bd0-86c0-fc7821cc0d0c","slug":"how-to-declare-a-variable","title":"How to declare a variable ."}],[{"id":"beb9c47a-9f62-4734-a04b-629b6991d1ca","level":3,"previousLevel":2,"parentId":"ef697fd2-ef1d-411d-8219-72f0ec112a75","slug":"lets-take-an-example-for-better-undersatnding","title":"Lets take an example for better undersatnding :"}],[{"id":"301a4652-6e74-4af3-b232-f047c5b5b77a","level":3,"previousLevel":3,"parentId":"ef697fd2-ef1d-411d-8219-72f0ec112a75","slug":"we-would-be-discussing-datatypes-in-next-module","title":"we would be discussing datatypes in next Module !"}],[{"id":"8c9713a3-8e2a-4e61-b550-b6d2705f3073","level":2,"previousLevel":3,"parentId":"ad20de78-f4c8-4bd0-86c0-fc7821cc0d0c","slug":"how-to-assign-a-value-to-a-variable","title":"How to assign a value to a variable ."}],[{"id":"790414d4-7580-455c-a932-382c92536eea","level":2,"previousLevel":2,"parentId":"ad20de78-f4c8-4bd0-86c0-fc7821cc0d0c","slug":"naming-convention","title":"Naming Convention"}]],"numUniqueUsersWhoReacted":0,"_id":"623dd38e2209c88a3de90300","title":"Variables in C - Programming Language","subtitle":"Learn about the Variables type , convention and best practises in C programming language","type":"story","coverImageAttribution":"","coverImagePhotographer":"","isCoverAttributionHidden":false,"metaTitle":"Variables in C - Programming Language","metaDescription":"This is the blog by Code for Community written by Abhishek Kushwaha for variables in C - Programming Language. What are variables , convention","partOfPublication":true,"publication":"6285a82d83966a1653f1383f","slug":"variables-in-c-programming-language","pollOptions":[],"dateAdded":"2022-03-25T14:37:02.420Z","badges":[],"questionReplies":[],"contributors":[{"_id":"623ddd342209c88a3de90479","user":"623ddcd02209c88a3de9046e","stamp":"cl16kir7j05f6kpnvennlcjvu"}],"cuid":"cl16j1t65059vkpnv6s8p30wk","author":"61f829629030330a7b25a024","followersCount":1,"draft":"623dce1f2209c88a3de90292","isRepublished":false,"hasPinnedTag":false,"readTime":4,"__v":4,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35485":3,"reaction_5c090d96c2a9c2a674d35486":3,"reaction_5c090d96c2a9c2a674d3548a":3,"reaction_5c090d96c2a9c2a674d35488":3,"reaction_5d9dd859f31791c942dc5b52":3,"reaction_5c090d96c2a9c2a674d3548b":3,"reaction_567453d0b73d6a82ac8c5ab9":3,"reaction_567453d0b73d6a82ac8c5abc":2,"reaction_5c090d96c2a9c2a674d35484":6,"reaction_567453d0b73d6a82ac8c5abd":3},"viewsUpdatedOn":1664398809645,"lastActivity":"2022-03-25T15:27:01.069Z","series":"628a2bb4929bcf4c721d471f","dateUpdated":"2022-05-22T12:27:48.755Z","pendingPublicationApproval":false,"uniqueReactions":["5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35486","5c090d96c2a9c2a674d3548a","5c090d96c2a9c2a674d35488","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5ab9","567453d0b73d6a82ac8c5abc","5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abd"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35485":3,"reaction_5c090d96c2a9c2a674d35486":3,"reaction_5c090d96c2a9c2a674d3548a":3,"reaction_5c090d96c2a9c2a674d35488":3,"reaction_5d9dd859f31791c942dc5b52":3,"reaction_5c090d96c2a9c2a674d3548b":3,"reaction_567453d0b73d6a82ac8c5ab9":3,"reaction_567453d0b73d6a82ac8c5abc":2,"reaction_5c090d96c2a9c2a674d35484":6,"reaction_567453d0b73d6a82ac8c5abd":3},"id":"623dd38e2209c88a3de90300"}]}